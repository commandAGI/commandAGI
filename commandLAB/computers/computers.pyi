"""
Type stubs for commandLAB computer implementations.

This file provides type hints for all computer implementations without requiring
the actual dependencies to be installed, which is helpful for development environments
and static type checking.
"""

from typing import Dict, List, Optional, Tuple, Union, Any, Literal
import logging

from commandLAB.computers.base_computer import BaseComputer
from commandLAB.types import (
    ShellCommandAction,
    KeyboardHotkeyAction,
    KeyboardKey,
    KeyboardKeyDownAction,
    KeyboardKeyPressAction,
    KeyboardKeyReleaseAction,
    KeyboardKeysDownAction,
    KeyboardKeysPressAction,
    KeyboardKeysReleaseAction,
    KeyboardStateObservation,
    MouseButton,
    MouseButtonDownAction,
    MouseButtonUpAction,
    MouseMoveAction,
    MouseScrollAction,
    MouseStateObservation,
    ScreenshotObservation,
    TypeAction,
    ClickAction,
    DoubleClickAction,
    DragAction,
    LayoutTreeObservation,
    ProcessesObservation,
    WindowsObservation,
    DisplaysObservation,
    RunProcessAction,
)

class LocalComputer(BaseComputer):
    """Base class for local computer implementations.
    
    This class provides common functionality for local computer implementations
    such as screenshot capture, command execution, and basic resource management.
    """
    
    def __init__(self) -> None: ...
    
    def _start(self) -> bool: ...
    
    def _stop(self) -> bool: ...
    
    def _get_screenshot(self, display_id: int = 0, format: Literal['base64', 'PIL', 'path'] = 'PIL') -> ScreenshotObservation: ...
    
    def _execute_shell_command(self, action: ShellCommandAction) -> None: ...
    
    def _run_process(self, action: RunProcessAction) -> bool: ...
    
    def _pause(self) -> None: ...
    
    def _resume(self, timeout_hours: Optional[float] = None) -> None: ...
    
    def _find_free_port(self) -> int: ...
    
    @property
    def video_stream_url(self) -> str: ...
    
    def start_video_stream(self) -> bool: ...
    
    def stop_video_stream(self) -> bool: ...

# Local PyAutoGUI Computer
class LocalPyAutoGUIComputer(LocalComputer):
    """Local computer implementation using PyAutoGUI for input control."""
    
    def __init__(self) -> None: ...
    
    def reset_state(self) -> None: ...
    
    def _get_mouse_state(self) -> MouseStateObservation: ...
    
    def _get_keyboard_state(self) -> KeyboardStateObservation: ...
    
    def _execute_keyboard_key_down(self, action: KeyboardKeyDownAction) -> None: ...
    
    def _execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction) -> None: ...
    
    def _execute_type(self, action: TypeAction) -> None: ...
    
    def _execute_mouse_move(self, action: MouseMoveAction) -> None: ...
    
    def _execute_mouse_scroll(self, action: MouseScrollAction) -> None: ...
    
    def _execute_mouse_button_down(self, action: MouseButtonDownAction) -> None: ...
    
    def _execute_mouse_button_up(self, action: MouseButtonUpAction) -> None: ...

# Local Pynput Computer
class LocalPynputComputer(LocalComputer):
    """Local computer implementation using Pynput for input control and state tracking."""
    
    def __init__(self) -> None: ...
    
    def _start(self) -> bool: ...
    
    def _stop(self) -> bool: ...
    
    def reset_state(self) -> None: ...
    
    def _on_keyboard_press(self, key: Any) -> None: ...
    
    def _on_keyboard_release(self, key: Any) -> None: ...
    
    def _on_mouse_move(self, x: int, y: int) -> None: ...
    
    def _on_mouse_click(self, x: int, y: int, button: Any, pressed: bool) -> None: ...
    
    def _on_mouse_scroll(self, x: int, y: int, dx: int, dy: int) -> None: ...
    
    def _get_mouse_state(self) -> MouseStateObservation: ...
    
    def _get_keyboard_state(self) -> KeyboardStateObservation: ...
    
    def get_observation(self) -> Any: ...
    
    def _execute_keyboard_key_down(self, action: KeyboardKeyDownAction) -> None: ...
    
    def _execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction) -> None: ...
    
    def _execute_type(self, action: TypeAction) -> None: ...
    
    def _execute_mouse_move(self, action: MouseMoveAction) -> None: ...
    
    def _execute_mouse_scroll(self, action: MouseScrollAction) -> None: ...
    
    def _execute_mouse_button_down(self, action: MouseButtonDownAction) -> None: ...
    
    def _execute_mouse_button_up(self, action: MouseButtonUpAction) -> None: ...
    
    def _execute_keyboard_key_press(self, action: KeyboardKeyPressAction) -> None: ...
    
    def _execute_keyboard_hotkey(self, action: KeyboardHotkeyAction) -> None: ...

# VNC Computer
class VNCComputer(BaseComputer):
    def __init__(self, host: str = "localhost", port: int = 5900, password: Optional[str] = None) -> None: ...
    def _start(self) -> bool: ...
    def _stop(self) -> bool: ...
    def reset_state(self) -> None: ...
    def _get_screenshot(self, display_id: int = 0, format: Literal['base64', 'PIL', 'path'] = 'PIL') -> ScreenshotObservation: ...
    def _get_mouse_state(self) -> MouseStateObservation: ...
    def _get_keyboard_state(self) -> KeyboardStateObservation: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...
    def _execute_keyboard_key_down(self, action: KeyboardKeyDownAction): ...
    def _execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction): ...
    def _execute_type(self, action: TypeAction): ...
    def _execute_mouse_move(self, action: MouseMoveAction): ...
    def _execute_mouse_scroll(self, action: MouseScrollAction): ...
    def _execute_mouse_button_down(self, action: MouseButtonDownAction): ...
    def _execute_mouse_button_up(self, action: MouseButtonUpAction): ...
    def _pause(self) -> None: ...
    def _resume(self, timeout_hours: Optional[float] = None) -> None: ...
    @property
    def video_stream_url(self) -> str: ...
    def start_video_stream(self) -> bool: ...
    def stop_video_stream(self) -> bool: ...

# E2B Desktop Computer
class E2BDesktopComputer(BaseComputer):
    def __init__(self, video_stream: bool = False) -> None: ...
    def _start(self) -> bool: ...
    def _stop(self) -> bool: ...
    def reset_state(self) -> None: ...
    def _get_screenshot(self, display_id: int = 0, format: Literal['base64', 'PIL', 'path'] = 'PIL') -> ScreenshotObservation: ...
    def _get_mouse_state(self) -> MouseStateObservation: ...
    def _get_keyboard_state(self) -> KeyboardStateObservation: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...
    def _execute_keyboard_key_down(self, action: KeyboardKeyDownAction): ...
    def _execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction): ...
    def _execute_type(self, action: TypeAction): ...
    def _execute_mouse_move(self, action: MouseMoveAction): ...
    def _execute_mouse_scroll(self, action: MouseScrollAction): ...
    def _execute_mouse_button_down(self, action: MouseButtonDownAction): ...
    def _execute_mouse_button_up(self, action: MouseButtonUpAction): ...
    def _execute_click(self, action: ClickAction): ...
    def _execute_double_click(self, action: DoubleClickAction): ...
    def _execute_keyboard_key_press(self, action: KeyboardKeyPressAction): ...
    def _execute_keyboard_hotkey(self, action: KeyboardHotkeyAction): ...
    def locate_on_screen(self, text: str) -> Optional[Tuple[int, int]]: ...
    def open_file(self, file_path: str) -> bool: ...
    def get_video_stream_url(self) -> str: ...
    def _pause(self) -> None: ...
    def _resume(self, timeout_hours: Optional[float] = None) -> None: ...
    @property
    def video_stream_url(self) -> str: ...
    def start_video_stream(self) -> bool: ...
    def stop_video_stream(self) -> bool: ...

# Daemon Client Computer
class DaemonClientComputer(BaseComputer):
    def __init__(
        self,
        daemon_base_url: str,
        daemon_port: int,
        daemon_token: str,
        provisioner: Any,
    ) -> None: ...
    def _start(self) -> bool: ...
    def _stop(self) -> bool: ...
    def reset_state(self) -> bool: ...
    def get_observation(self) -> Dict[str, Any]: ...
    def _get_screenshot(self, display_id: int = 0, format: Literal['base64', 'PIL', 'path'] = 'PIL') -> ScreenshotObservation: ...
    def _get_mouse_state(self) -> MouseStateObservation: ...
    def _get_keyboard_state(self) -> KeyboardStateObservation: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...
    def _execute_keyboard_key_down(self, action: KeyboardKeyDownAction): ...
    def _execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction): ...
    def _execute_keyboard_key_press(self, action: KeyboardKeyPressAction): ...
    def _execute_keyboard_hotkey(self, action: KeyboardHotkeyAction): ...
    def _execute_type(self, action: TypeAction): ...
    def _execute_mouse_move(self, action: MouseMoveAction): ...
    def _execute_mouse_scroll(self, action: MouseScrollAction): ...
    def _execute_mouse_button_down(self, action: MouseButtonDownAction): ...
    def _execute_mouse_button_up(self, action: MouseButtonUpAction): ...
    def _pause(self) -> None: ...
    def _resume(self, timeout_hours: Optional[float] = None) -> None: ...
    @property
    def video_stream_url(self) -> str: ...
    def start_video_stream(self) -> bool: ...
    def stop_video_stream(self) -> bool: ...

# PigDev Computer
class PigDevComputer(BaseComputer):
    def __init__(self, api_key: Optional[str] = None, machine_id: Optional[str] = None) -> None: ...
    def _start(self) -> bool: ...
    def _stop(self) -> bool: ...
    def reset_state(self) -> None: ...
    def _get_screenshot(self, display_id: int = 0, format: Literal['base64', 'PIL', 'path'] = 'PIL') -> ScreenshotObservation: ...
    def _get_mouse_state(self) -> MouseStateObservation: ...
    def _get_keyboard_state(self) -> KeyboardStateObservation: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...
    def _execute_keyboard_key_down(self, action: KeyboardKeyDownAction): ...
    def _execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction): ...
    def _execute_type(self, action: TypeAction): ...
    def _execute_mouse_move(self, action: MouseMoveAction): ...
    def _execute_mouse_scroll(self, action: MouseScrollAction): ...
    def _execute_mouse_button_down(self, action: MouseButtonDownAction): ...
    def _execute_mouse_button_up(self, action: MouseButtonUpAction): ...
    def _execute_click(self, action: ClickAction): ...
    def _execute_double_click(self, action: DoubleClickAction): ...
    def _execute_drag(self, action: DragAction): ...
    def _execute_keyboard_key_press(self, action: KeyboardKeyPressAction): ...
    def _execute_keyboard_hotkey(self, action: KeyboardHotkeyAction): ...
    def _pause(self) -> None: ...
    def _resume(self, timeout_hours: Optional[float] = None) -> None: ...
    @property
    def video_stream_url(self) -> str: ...
    def start_video_stream(self) -> bool: ...
    def stop_video_stream(self) -> bool: ...

# Scrapybara Computer
class ScrapybaraComputer(BaseComputer):
    def __init__(self, api_key: Optional[str] = None) -> None: ...
    def _start(self) -> bool: ...
    def _stop(self) -> bool: ...
    def reset_state(self) -> None: ...
    def _get_screenshot(self, display_id: int = 0, format: Literal['base64', 'PIL', 'path'] = 'PIL') -> ScreenshotObservation: ...
    def _get_mouse_state(self) -> MouseStateObservation: ...
    def _get_keyboard_state(self) -> KeyboardStateObservation: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...
    def _execute_keyboard_key_down(self, action: KeyboardKeyDownAction): ...
    def _execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction): ...
    def _execute_type(self, action: TypeAction): ...
    def _execute_mouse_move(self, action: MouseMoveAction): ...
    def _execute_mouse_scroll(self, action: MouseScrollAction): ...
    def _execute_mouse_button_down(self, action: MouseButtonDownAction): ...
    def _execute_mouse_button_up(self, action: MouseButtonUpAction): ...
    def _execute_click(self, action: ClickAction): ...
    def _execute_keyboard_key_press(self, action: KeyboardKeyPressAction): ...
    def _execute_keyboard_hotkey(self, action: KeyboardHotkeyAction): ...
    def _execute_double_click(self, action: DoubleClickAction): ...
    def _execute_drag(self, action: DragAction): ...
    def pause(self) -> bool: ...
    def resume(self, timeout_hours: float = None) -> bool: ...
    def _pause(self) -> None: ...
    def _resume(self, timeout_hours: Optional[float] = None) -> None: ...
    def get_stream_url(self) -> str: ...
    @property
    def video_stream_url(self) -> str: ...
    def start_video_stream(self) -> bool: ...
    def stop_video_stream(self) -> bool: ...

class UbuntuScrapybaraComputer(ScrapybaraComputer):
    def __init__(self, api_key: Optional[str] = None) -> None: ...
    def _start(self) -> bool: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...
    def edit_file(self, path: str, command: str, **kwargs) -> bool: ...

class BrowserScrapybaraComputer(ScrapybaraComputer):
    def __init__(self, api_key: Optional[str] = None) -> None: ...
    def _start(self) -> bool: ...
    def get_cdp_url(self) -> str: ...
    def save_auth(self, name: str = "default") -> str: ...
    def authenticate(self, auth_state_id: str) -> bool: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...

class WindowsScrapybaraComputer(ScrapybaraComputer):
    def __init__(self, api_key: Optional[str] = None) -> None: ...
    def _start(self) -> bool: ...
    def _execute_shell_command(self, action: ShellCommandAction): ...