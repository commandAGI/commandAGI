{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CommandLAB","text":"<p>CommandLAB is a powerful framework for automating and controlling computers across different environments. It provides a unified interface for interacting with local and remote computers, making it easy to build automation tools, test applications, and train AI agents.</p> <p></p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Unified Computer Control API: Control any computer with the same code, regardless of platform or location</li> <li>Multiple Deployment Options: Run locally, in containers, or in various cloud environments</li> <li>Reinforcement Learning Framework: Train and evaluate AI agents to use computers through a standardized gym interface</li> <li>Modular Architecture: Easily extend with new computer implementations, provisioners, or agent types</li> <li>Cross-Platform Support: Works on Windows, macOS, and Linux</li> <li>Cloud Integration: Native support for AWS, Azure, and Google Cloud Platform</li> <li>Container Support: Docker and Kubernetes integration for scalable deployments</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install commandlab\n</code></pre>"},{"location":"#optional-components","title":"Optional Components","text":"<p>CommandLAB uses a modular design with optional components that can be installed based on your needs:</p> Component Description Installation Local control Control your local computer <code>pip install \"commandlab[local]\"</code> VNC support Control computers via VNC <code>pip install \"commandlab[vnc]\"</code> Docker support Run in Docker containers <code>pip install \"commandlab[docker]\"</code> Kubernetes support Deploy in Kubernetes <code>pip install \"commandlab[kubernetes]\"</code> Cloud providers AWS, Azure, GCP integration <code>pip install \"commandlab[cloud]\"</code> Daemon Remote control server <code>pip install \"commandlab[daemon]\"</code> E2B Desktop E2B Desktop integration <code>pip install \"commandlab[e2b-desktop]\"</code> Scrapybara Scrapybara integration <code>pip install \"commandlab[scrapybara]\"</code> LangChain LangChain integration <code>pip install \"commandlab[langchain]\"</code> PIG PIG integration <code>pip install \"commandlab[pig]\"</code> OCR Pytesseract OCR <code>pip install \"commandlab[pytesseract]\"</code> Development Tools for contributing <code>pip install \"commandlab[dev]\"</code> All features Everything included <code>pip install \"commandlab[all]\"</code>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nfrom commandLAB.types import ClickAction, TypeAction\n\n# Create a computer instance\ncomputer = LocalPynputComputer()\n\n# Take a screenshot\nscreenshot = computer.get_screenshot()\n\n# Click at coordinates (100, 100)\ncomputer.execute_click(ClickAction(x=100, y=100))\n\n# Type text\ncomputer.execute_type(TypeAction(text=\"Hello, CommandLAB!\"))\n</code></pre>"},{"location":"#remote-control-example","title":"Remote Control Example","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer with Docker provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER\n)\n\n# Execute a command in the container\ncomputer.execute_command(CommandAction(command=\"ls -la\", timeout=5))\n\n# Clean up when done\ncomputer.close()\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation Guide - Detailed installation instructions</li> <li>Quick Start Guide - Get up and running quickly</li> <li>Examples - Example scripts with status and usage information</li> <li>Core Concepts - Learn about the fundamental concepts</li> <li>Computers - Computer implementations</li> <li>Provisioners - Environment management</li> <li>Gym Framework - Reinforcement learning</li> <li>Daemon - Remote control</li> <li>Types - Data models</li> <li>Tutorials - Step-by-step guides</li> <li>Getting Started - Basic tutorials</li> <li>Advanced - Advanced topics</li> <li>Examples - Real-world examples</li> <li>API Reference - Detailed API documentation</li> <li>Developer Guide - Contributing to CommandLAB</li> </ul>"},{"location":"#who-is-commandlab-for","title":"Who is CommandLAB for?","text":"<ul> <li>Automation Engineers: Create robust automation scripts that work across different environments</li> <li>AI Researchers: Train and evaluate computer-using agents with a standardized interface</li> <li>DevOps Teams: Automate testing and deployment across different platforms</li> <li>Python Developers: Build tools that interact with computer UIs in a consistent way</li> <li>QA Engineers: Create automated tests for GUI applications</li> </ul>"},{"location":"#community-and-support","title":"Community and Support","text":"<ul> <li>GitHub Repository - Source code and issue tracking</li> <li>Documentation - Online documentation</li> <li>Discord Community - Community support and discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>CommandLAB is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"examples/","title":"CommandLAB Examples","text":"<p>This page provides an overview of the example scripts included in the CommandLAB repository. Each example demonstrates different aspects of the framework and can be used as a starting point for your own automation projects.</p>"},{"location":"examples/#example-status-legend","title":"Example Status Legend","text":"<ul> <li>\u2705 Works perfectly: The example runs without issues</li> <li>\u26a0\ufe0f Works with limitations: The example works but has some limitations or issues</li> <li>\u274c Not implemented: The example is a placeholder for future implementation</li> </ul>"},{"location":"examples/#available-examples","title":"Available Examples","text":""},{"location":"examples/#1-getting-started","title":"1. Getting Started","text":"<p>File: <code>examples/1_getting_started.py</code></p> <p>Description: Demonstrates how to import the CommandLAB library and print its version.</p> <p>Status: \u2705 Works perfectly</p> <ul> <li>Correctly displays version information</li> </ul> <p>Run with: <code>poetry run python examples/1_getting_started.py</code></p>"},{"location":"examples/#2-basic-concepts","title":"2. Basic Concepts","text":"<p>File: <code>examples/2_concepts.py</code></p> <p>Description: Demonstrates basic concepts of CommandLAB, including creating a computer instance, taking a screenshot, and saving it to a file.</p> <p>Status: \u2705 Works perfectly</p> <ul> <li>Successfully takes a screenshot and saves it to a file</li> </ul> <p>Run with: <code>poetry run python examples/2_concepts.py</code></p>"},{"location":"examples/#3-advanced-concepts","title":"3. Advanced Concepts","text":"<p>File: <code>examples/3_advanced_concepts.py</code></p> <p>Description: Demonstrates advanced concepts of CommandLAB, including mouse movement and clicking, keyboard typing, keyboard hotkeys, and getting mouse and keyboard state.</p> <p>Status: \u2705 Works perfectly</p> <ul> <li>Successfully performs mouse and keyboard actions</li> </ul> <p>Run with: <code>poetry run python examples/3_advanced_concepts.py</code></p>"},{"location":"examples/#4-docker-integration","title":"4. Docker Integration","text":"<p>File: <code>examples/4_using_docker.py</code></p> <p>Description: Demonstrates how to use the Docker provisioner to create and control a Docker container.</p> <p>Status: \u26a0\ufe0f Works with limitations</p> <ul> <li>Handles the error gracefully when the Docker image doesn't exist</li> <li>Provides helpful information about building the image</li> </ul> <p>Run with: <code>poetry run python examples/4_using_docker.py</code></p>"},{"location":"examples/#5-kubernetes-integration","title":"5. Kubernetes Integration","text":"<p>File: <code>examples/5_using_kubernetes.py</code></p> <p>Description: Demonstrates how to use the Kubernetes provisioner to create and control a Kubernetes pod running the CommandLAB daemon.</p> <p>Status: \u274c Not implemented yet</p> <ul> <li>This is a placeholder for future implementation</li> </ul> <p>Run with: <code>poetry run python examples/5_using_kubernetes.py</code></p>"},{"location":"examples/#6-scripting-computer-interactions","title":"6. Scripting Computer Interactions","text":"<p>File: <code>examples/6_scripting_computer_interactions.py</code></p> <p>Description: Demonstrates how to use the manual provisioner to script computer interactions. The manual provisioner is the simplest way to get started with CommandLAB.</p> <p>Status: \u26a0\ufe0f Requires manual setup</p> <ul> <li>Needs the daemon to be running in a separate terminal</li> </ul> <p>Run with: <code>poetry run python examples/6_scripting_computer_interactions.py</code></p>"},{"location":"examples/#7-automating-computer-interactions","title":"7. Automating Computer Interactions","text":"<p>File: <code>examples/7_automating_computer_interactions.py</code></p> <p>Description: Demonstrates how to use the grid overlay utility to help with positioning when automating computer interactions.</p> <p>Status: \u2705 Works perfectly</p> <ul> <li>Successfully creates a grid overlay image and demonstrates mouse actions</li> </ul> <p>Run with: <code>poetry run python examples/7_automating_computer_interactions.py</code></p>"},{"location":"examples/#8-document-editing","title":"8. Document Editing","text":"<p>File: <code>examples/8_document_editing.py</code></p> <p>Description: Demonstrates how to use the screen parser to extract text from a screenshot, which can be useful for document editing and text extraction tasks.</p> <p>Status: \u2705 Works perfectly</p> <ul> <li>Successfully extracts text from a screenshot and saves it to a file</li> </ul> <p>Run with: <code>poetry run python examples/8_document_editing.py</code></p>"},{"location":"examples/#9-web-automation","title":"9. Web Automation","text":"<p>File: <code>examples/9_using_the_internet.py</code></p> <p>Description: Demonstrates how to use CommandLAB for web automation tasks, such as opening a browser, navigating to a website, and interacting with web elements.</p> <p>Status: \u26a0\ufe0f Works with minor issues</p> <ul> <li>Successfully opens a browser, navigates to a website, and takes a screenshot</li> <li>Encounters an error when closing the browser</li> </ul> <p>Run with: <code>poetry run python examples/9_using_the_internet.py</code></p>"},{"location":"examples/#10-programming","title":"10. Programming","text":"<p>File: <code>examples/10_programming.py</code></p> <p>Description: Demonstrates how to use CommandLAB for programming tasks, such as opening a code editor, writing code, and running it.</p> <p>Status: \u26a0\ufe0f Works with limitations</p> <ul> <li>Successfully creates a Python script</li> <li>Encounters an error when trying to edit the script</li> <li>The script itself works correctly when run directly</li> </ul> <p>Run with: <code>poetry run python examples/10_programming.py</code></p>"},{"location":"examples/#running-the-examples","title":"Running the Examples","text":"<p>To run any of the examples, make sure you have CommandLAB installed with the appropriate extras:</p> <pre><code># For basic examples\npip install commandlab[local]\n\n# For Docker examples\npip install commandlab[docker]\n\n# For OCR examples\npip install commandlab[local,pytesseract]\n</code></pre> <p>Then run the example using Python:</p> <pre><code>python examples/1_getting_started.py\n</code></pre> <p>Or using Poetry:</p> <pre><code>poetry run python examples/1_getting_started.py\n</code></pre>"},{"location":"examples/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues running the examples:</p> <ol> <li>Make sure you have all the required dependencies installed</li> <li>Check that you're running the examples from the root of the CommandLAB repository</li> <li>For Docker examples, ensure Docker is installed and running</li> <li>For examples that require manual setup, follow the instructions in the console output</li> </ol>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide provides detailed instructions for installing CommandLAB and its dependencies on different operating systems.</p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: Python 3.9 or higher</li> <li>Operating System:</li> <li>Windows 10 or higher</li> <li>macOS 10.14 (Mojave) or higher</li> <li>Ubuntu 18.04 or higher, or other Linux distributions with X11</li> <li>Hardware:</li> <li>Recommended: 2GB RAM, 1GHz CPU</li> <li>Permissions:</li> <li>Local control requires permissions to simulate keyboard and mouse input</li> <li>Docker support requires Docker installed and running</li> <li>Cloud deployments require appropriate cloud provider credentials</li> </ul>"},{"location":"installation/#basic-installation","title":"Basic Installation","text":"<p>The simplest way to install CommandLAB is using pip:</p> <pre><code>pip install commandlab\n</code></pre> <p>This installs the core framework without specific backends. You'll need to install additional components based on your use case.</p>"},{"location":"installation/#installation-with-backends","title":"Installation with Backends","text":""},{"location":"installation/#local-computer-control","title":"Local Computer Control","text":"<p>To control your local computer, install the local backend:</p> <pre><code>pip install \"commandlab[local]\"\n</code></pre> <p>This installs dependencies for controlling your local computer:</p> <ul> <li><code>pynput</code> for keyboard and mouse control</li> <li><code>pyautogui</code> for alternative input control</li> <li><code>mss</code> for fast screenshots</li> </ul>"},{"location":"installation/#platform-specific-notes","title":"Platform-Specific Notes","text":"<p>Windows:</p> <ul> <li>No additional requirements</li> </ul> <p>macOS:</p> <ul> <li>You may need to grant accessibility permissions to your terminal or Python application</li> <li>Go to System Preferences &gt; Security &amp; Privacy &gt; Privacy &gt; Accessibility and add your terminal application</li> </ul> <p>Linux:</p> <ul> <li>X11 is required for input control</li> <li>Install X11 dependencies: <code>sudo apt-get install python3-xlib python3-tk python3-dev</code></li> </ul>"},{"location":"installation/#remote-daemon","title":"Remote Daemon","text":"<p>To use the remote control daemon:</p> <pre><code>pip install \"commandlab[daemon]\"\n</code></pre> <p>This installs:</p> <ul> <li><code>fastapi</code> and <code>uvicorn</code> for the API server</li> <li><code>requests</code> for client communication</li> </ul>"},{"location":"installation/#container-support","title":"Container Support","text":"<p>For Docker container support:</p> <pre><code>pip install \"commandlab[docker]\"\n</code></pre> <p>This requires:</p> <ul> <li>Docker installed and running on your system</li> <li>Python Docker SDK</li> </ul> <p>For Kubernetes support:</p> <pre><code>pip install \"commandlab[kubernetes]\"\n</code></pre> <p>This requires:</p> <ul> <li><code>kubernetes</code> Python client</li> <li><code>kubectl</code> configured with access to a cluster</li> </ul>"},{"location":"installation/#cloud-provider-support","title":"Cloud Provider Support","text":"<p>For AWS support:</p> <pre><code>pip install \"commandlab[aws]\"\n</code></pre> <p>For Azure support:</p> <pre><code>pip install \"commandlab[azure]\"\n</code></pre> <p>For Google Cloud Platform support:</p> <pre><code>pip install \"commandlab[gcp]\"\n</code></pre> <p>For all cloud providers:</p> <pre><code>pip install \"commandlab[cloud]\"\n</code></pre>"},{"location":"installation/#integration-components","title":"Integration Components","text":"<p>For OCR capabilities:</p> <pre><code>pip install \"commandlab[pytesseract]\"\n</code></pre> <p>This requires:</p> <ul> <li>Tesseract OCR installed on your system</li> <li>Windows: Download from GitHub</li> <li>macOS: <code>brew install tesseract</code></li> <li>Linux: <code>sudo apt-get install tesseract-ocr</code></li> </ul> <p>For E2B Desktop integration:</p> <pre><code>pip install \"commandlab[e2b-desktop]\"\n</code></pre> <p>For LangChain integration:</p> <pre><code>pip install \"commandlab[langchain]\"\n</code></pre>"},{"location":"installation/#all-features","title":"All Features","text":"<p>To install all available backends and features:</p> <pre><code>pip install \"commandlab[all]\"\n</code></pre> <p>Note that this will install all dependencies, which may include conflicting packages. It's generally better to install only the components you need.</p>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For contributing to CommandLAB:</p> <pre><code># Clone the repository\ngit clone https://github.com/your-org/commandlab.git\ncd commandlab\n\n# Install in development mode with development dependencies\npip install -e \".[dev]\"\n\n# Run tests\npytest\n</code></pre>"},{"location":"installation/#virtual-environment","title":"Virtual Environment","text":"<p>It's recommended to install CommandLAB in a virtual environment:</p> <pre><code># Create a virtual environment\npython -m venv commandlab-env\n\n# Activate the environment\n# On Windows:\ncommandlab-env\\Scripts\\activate\n# On macOS/Linux:\nsource commandlab-env/bin/activate\n\n# Install CommandLAB\npip install \"commandlab[local,daemon]\"\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#permission-errors","title":"Permission Errors","text":"<p>Problem: <code>PermissionError</code> when trying to control mouse or keyboard</p> <p>Solution:</p> <ul> <li>Run your script with administrator/root privileges</li> <li>On macOS, grant accessibility permissions to your terminal</li> <li>On Linux, ensure you have the necessary X11 permissions</li> </ul>"},{"location":"installation/#import-errors","title":"Import Errors","text":"<p>Problem: <code>ImportError: No module named 'pynput'</code> or similar</p> <p>Solution:</p> <ul> <li>Ensure you've installed the correct extras: <code>pip install \"commandlab[local]\"</code></li> <li>Check if your virtual environment is activated</li> </ul>"},{"location":"installation/#docker-issues","title":"Docker Issues","text":"<p>Problem: <code>docker.errors.DockerException: Error while fetching server API version</code></p> <p>Solution:</p> <ul> <li>Ensure Docker is installed and running</li> <li>Check if your user has permissions to access Docker</li> </ul>"},{"location":"installation/#cloud-provider-authentication","title":"Cloud Provider Authentication","text":"<p>Problem: Authentication errors with cloud providers</p> <p>Solution:</p> <ul> <li>Ensure you've configured credentials:</li> <li>AWS: Configure AWS CLI or set environment variables</li> <li>Azure: Log in with Azure CLI or set environment variables</li> <li>GCP: Set up application default credentials</li> </ul>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues not covered here:</p> <ol> <li>Check the GitHub Issues for similar problems</li> <li>Join our Discord community for support</li> <li>Open a new issue with details about your problem</li> </ol>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify your installation:</p> <pre><code>import commandLAB\nprint(f\"CommandLAB version: {commandLAB.__version__}\")\n\n# Test local computer if installed\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    computer = LocalPynputComputer()\n    print(\"Local computer control is working\")\nexcept ImportError:\n    print(\"Local computer control is not installed\")\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Follow the Quick Start Guide to begin using CommandLAB</li> <li>Explore the Core Concepts to understand the framework</li> <li>Try the Basic Automation Tutorial for a hands-on example</li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with CommandLAB quickly. We'll cover the basics of local computer control, remote control via daemon, and using Docker provisioning.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First, install CommandLAB with the components you need:</p> <pre><code># For local computer control\npip install \"commandlab[local]\"\n\n# For remote control via daemon\npip install \"commandlab[daemon]\"\n\n# For Docker provisioning\npip install \"commandlab[docker]\"\n\n# For all features\npip install \"commandlab[all]\"\n</code></pre>"},{"location":"quickstart/#basic-usage-local-computer-control","title":"Basic Usage: Local Computer Control","text":"<p>The simplest way to use CommandLAB is to control your local computer:</p> <pre><code>from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nfrom commandLAB.types import ClickAction, TypeAction, KeyboardHotkeyAction, KeyboardKey\n\n# Create a computer instance\ncomputer = LocalPynputComputer()\n\n# Take a screenshot\nscreenshot = computer.get_screenshot()\n\n# Click at coordinates (100, 100)\ncomputer.execute_click(ClickAction(x=100, y=100))\n\n# Type text\ncomputer.execute_type(TypeAction(text=\"Hello, CommandLAB!\"))\n\n# Press keyboard shortcut (Ctrl+S)\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(\n    keys=[KeyboardKey.CTRL, KeyboardKey.S]\n))\n</code></pre>"},{"location":"quickstart/#available-actions","title":"Available Actions","text":"<p>CommandLAB provides a rich set of actions for controlling computers:</p> Action Description Example <code>ClickAction</code> Click at specific coordinates <code>ClickAction(x=100, y=200)</code> <code>DoubleClickAction</code> Double-click at coordinates <code>DoubleClickAction(x=100, y=200)</code> <code>TypeAction</code> Type text <code>TypeAction(text=\"Hello\")</code> <code>KeyboardKeyPressAction</code> Press a key <code>KeyboardKeyPressAction(key=KeyboardKey.ENTER)</code> <code>KeyboardHotkeyAction</code> Press a keyboard shortcut <code>KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.C])</code> <code>MouseMoveAction</code> Move the mouse <code>MouseMoveAction(x=100, y=200)</code> <code>DragAction</code> Drag from one point to another <code>DragAction(start_x=100, start_y=100, end_x=200, end_y=200)</code> <code>CommandAction</code> Execute a system command <code>CommandAction(command=\"ls -la\", timeout=5)</code>"},{"location":"quickstart/#getting-observations","title":"Getting Observations","text":"<p>You can also get observations about the computer's state:</p> <pre><code># Get a screenshot\nscreenshot = computer.get_screenshot()\nprint(f\"Screenshot size: {len(screenshot.screenshot)} bytes\")\n\n# Get mouse state\nmouse_state = computer.get_mouse_state()\nprint(f\"Mouse position: {mouse_state.position}\")\nprint(f\"Mouse buttons: {mouse_state.buttons}\")\n\n# Get keyboard state\nkeyboard_state = computer.get_keyboard_state()\nprint(f\"Shift key pressed: {keyboard_state.keys.get(KeyboardKey.SHIFT, False)}\")\n</code></pre>"},{"location":"quickstart/#remote-control-via-daemon","title":"Remote Control via Daemon","text":"<p>CommandLAB allows you to control remote computers using a daemon server:</p>"},{"location":"quickstart/#starting-the-daemon","title":"Starting the Daemon","text":"<p>First, start the daemon on the target computer:</p> <pre><code># Start the daemon on port 8000 using the pynput backend\npython -m commandLAB.daemon.cli start --port 8000 --backend pynput\n</code></pre> <p>The daemon will print an API token that you'll need to connect to it.</p>"},{"location":"quickstart/#connecting-to-the-daemon","title":"Connecting to the Daemon","text":"<p>Then, control it from another machine:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.types import TypeAction, ClickAction\n\n# Connect to the daemon manually\ncomputer = DaemonClientComputer(\n    daemon_base_url=\"http://target-machine-ip\",\n    daemon_port=8000,\n    provisioning_method=ProvisioningMethod.MANUAL\n)\n\n# Take a screenshot of the remote computer\nscreenshot = computer.get_screenshot()\n\n# Click at coordinates (100, 100) on the remote computer\ncomputer.execute_click(ClickAction(x=100, y=100))\n\n# Type text on the remote computer\ncomputer.execute_type(TypeAction(text=\"Hello from another machine!\"))\n\n# Clean up when done\ncomputer.close()\n</code></pre>"},{"location":"quickstart/#using-docker-provisioning","title":"Using Docker Provisioning","text":"<p>CommandLAB can automatically provision and manage Docker containers:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.types import CommandAction, TypeAction\nfrom commandLAB.computers.provisioners.docker_provisioner import DockerPlatform\n\n# Create a computer with Docker provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.LOCAL  # Use local Docker\n)\n\n# Execute a command in the container\ncomputer.execute_command(CommandAction(command=\"ls -la\", timeout=5))\n\n# Type text in the container\ncomputer.execute_type(TypeAction(text=\"Hello from Docker!\"))\n\n# Clean up (stops and removes the container)\ncomputer.close()\n</code></pre>"},{"location":"quickstart/#using-cloud-provisioning","title":"Using Cloud Provisioning","text":"<p>CommandLAB supports provisioning computers in various cloud environments:</p>"},{"location":"quickstart/#aws-ec2","title":"AWS EC2","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer in AWS EC2\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.AWS,\n    region=\"us-west-2\",\n    instance_type=\"t2.micro\"\n)\n\n# Use the computer\n# ...\n\n# Clean up (terminates the EC2 instance)\ncomputer.close()\n</code></pre>"},{"location":"quickstart/#azure-vm","title":"Azure VM","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer in Azure\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.AZURE,\n    resource_group=\"my-resource-group\",\n    location=\"eastus\"\n)\n\n# Use the computer\n# ...\n\n# Clean up (deletes the Azure VM)\ncomputer.close()\n</code></pre>"},{"location":"quickstart/#google-cloud-platform","title":"Google Cloud Platform","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer in GCP\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.GCP,\n    project=\"my-project-id\",\n    zone=\"us-central1-a\"\n)\n\n# Use the computer\n# ...\n\n# Clean up (deletes the GCP VM)\ncomputer.close()\n</code></pre>"},{"location":"quickstart/#using-the-gym-framework","title":"Using the Gym Framework","text":"<p>CommandLAB includes a reinforcement learning framework for training agents:</p> <pre><code>from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\nfrom commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\nfrom commandLAB.gym.drivers import SimpleDriver\n\n# Configure the environment\nconfig = ComputerEnvConfig(\n    computer_cls_name=\"LocalPynputComputer\"\n)\n\n# Create the environment\nenv = ComputerEnv(config)\n\n# Create an agent\nagent = NaiveComputerAgent(chat_model_options={\n    \"model_provider\": \"openai\",\n    \"model\": \"gpt-4-vision-preview\"\n})\n\n# Create a driver\ndriver = SimpleDriver(env=env, agent=agent)\n\n# Collect an episode\nepisode = driver.collect_episode()\n\n# Print episode statistics\nprint(f\"Episode length: {episode.num_steps}\")\nprint(f\"Total reward: {sum(step.reward for step in episode)}\")\n</code></pre>"},{"location":"quickstart/#complete-example-automating-a-web-search","title":"Complete Example: Automating a Web Search","text":"<p>Here's a complete example that automates opening a browser and performing a web search:</p> <pre><code>import time\nfrom commandLAB.computers.local_pynput_computer import LocalPynputComputer\nfrom commandLAB.types import (\n    CommandAction,\n    TypeAction,\n    ClickAction,\n    KeyboardHotkeyAction,\n    KeyboardKey,\n    KeyboardKeyPressAction\n)\n\n# Create a computer instance\ncomputer = LocalPynputComputer()\n\n# Open a browser (Chrome in this example)\ncomputer.execute_command(CommandAction(command=\"chrome\"))\ntime.sleep(2)  # Wait for the browser to open\n\n# Type a URL\ncomputer.execute_type(TypeAction(text=\"https://www.google.com\"))\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\ntime.sleep(2)  # Wait for the page to load\n\n# Type a search query\ncomputer.execute_type(TypeAction(text=\"CommandLAB python automation\"))\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\ntime.sleep(2)  # Wait for search results\n\n# Take a screenshot of the results\nscreenshot = computer.get_screenshot()\nprint(\"Took screenshot of search results\")\n\n# Close the browser\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.ALT, KeyboardKey.F4]))\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've learned the basics of CommandLAB, you can:</p> <ul> <li>Learn about Core Concepts</li> <li>Explore Computer Types</li> <li>Understand Provisioners</li> <li>Try the Gym Framework</li> <li>Follow the Basic Automation Tutorial</li> <li>Check out the API Reference</li> </ul>"},{"location":"api/","title":"CommandLAB API Reference","text":"<p>This page contains the complete API reference for CommandLAB.</p>"},{"location":"api/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Cli<ul> <li>Base Computer</li> <li>Daemon Client Computer</li> <li>E2B Desktop Computer</li> <li>Local Pyautogui Computer</li> <li>Local Pynput Computer</li> <li>Aws Provisioner</li> <li>Azure Provisioner</li> <li>Base Provisioner</li> <li>Docker Provisioner</li> <li>Gcp Provisioner</li> <li>Kubernetes Provisioner</li> <li>Manual Provisioner</li> <li>Vagrant Provisioner</li> <li>Virtualbox Provisioner</li> <li>Vmware Provisioner</li> <li>Cli</li> <li>Client</li> <li>Server</li> <li>Build Images</li> <li>Dev Cli</li> <li>Update Daemon Client</li> <li>Llms</li> <li>Base Agent</li> <li>Naive Vision Language Computer Agent</li> <li>React Vision Language Computer Agent</li> <li>Drivers</li> <li>Base Env</li> <li>Computer Env</li> <li>Multimodal Env<ul> <li>Grid Overlay Wrapper</li> <li>Gymnasium</li> <li>Screen Parser Wrapper</li> </ul> </li> <li>Llm Based Evals</li> <li>Schema</li> <li>Base</li> <li>Computer Task</li> <li>Trainer</li> <li>Whisper</li> <li>Grid Overlay</li> <li>Pytesseract Screen Parser</li> <li>Screenparse Ai Screen Parser</li> <li>Types</li> <li>Openai</li> <li>Some Local Model</li> </ul> </li> <li>Types<ul> <li>Image</li> <li>Viewer</li> </ul> </li> <li>Version</li> </ul>"},{"location":"api/#cli","title":"Cli","text":"<p>Module Path: <code>commandLAB.cli</code></p> <p>CommandLAB CLI</p> <p>A command-line interface for interacting with CommandLAB functionality.</p> <p>Subcommands:   run-example     Run one of the example scripts   run-gym         Run a gym environment with a specified agent   screenshot      Take a screenshot using a specified computer   daemon          Start a daemon server for remote control   grid-overlay    Create a grid overlay on a screenshot to help with positioning   ocr             Extract text from a screenshot using OCR   version         Display version information</p>"},{"location":"api/#base-computer","title":"Base Computer","text":"<p>Module Path: <code>commandLAB.computers.base_computer</code></p> <p>Return a ScreenshotObservation containing the screenshot encoded as a base64 string.</p>"},{"location":"api/#daemon-client-computer","title":"Daemon Client Computer","text":"<p>Module Path: <code>commandLAB.computers.daemon_client_computer</code></p> <p>Return the appropriate provisioner class based on the provisioning method</p>"},{"location":"api/#e2b-desktop-computer","title":"E2B Desktop Computer","text":"<p>Module Path: <code>commandLAB.computers.e2b_desktop_computer</code></p> <p>Environment that uses E2B Desktop Sandbox for secure computer interactions</p>"},{"location":"api/#local-pyautogui-computer","title":"Local Pyautogui Computer","text":"<p>Module Path: <code>commandLAB.computers.local_pyautogui_computer</code></p> <p>Reset environment and return initial observation</p>"},{"location":"api/#local-pynput-computer","title":"Local Pynput Computer","text":"<p>Module Path: <code>commandLAB.computers.local_pynput_computer</code></p> <p>Reset environment, initialize pynput listener threads, and return the initial observation.</p>"},{"location":"api/#aws-provisioner","title":"Aws Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.aws_provisioner</code></p>"},{"location":"api/#binbash","title":"!/bin/bash","text":"<pre><code>                    pip install commandlab[local,daemon]\n                    python -m commandlab.daemon.daemon --port {self.port} --backend pynput\n</code></pre>"},{"location":"api/#azure-provisioner","title":"Azure Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.azure_provisioner</code></p> <p>pip install commandlab[local,daemon]                                 python -m commandlab.daemon.daemon --port {self.port} --backend pynput</p>"},{"location":"api/#base-provisioner","title":"Base Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.base_provisioner</code></p> <p>Setup the daemon with the specific provisioning method</p>"},{"location":"api/#docker-provisioner","title":"Docker Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.docker_provisioner</code></p> <p>Setup local Docker container</p>"},{"location":"api/#gcp-provisioner","title":"Gcp Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.gcp_provisioner</code></p> <p>Setup GCP Compute Engine instance</p>"},{"location":"api/#kubernetes-provisioner","title":"Kubernetes Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.kubernetes_provisioner</code></p> <p>Create Kubernetes deployment and service</p>"},{"location":"api/#manual-provisioner","title":"Manual Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.manual_provisioner</code></p>"},{"location":"api/#vagrant-provisioner","title":"Vagrant Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.vagrant_provisioner</code></p> <p>Setup a Vagrant VM and start the daemon.</p>"},{"location":"api/#virtualbox-provisioner","title":"Virtualbox Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.virtualbox_provisioner</code></p> <p>Setup a VirtualBox VM and start the daemon.</p>"},{"location":"api/#vmware-provisioner","title":"Vmware Provisioner","text":"<p>Module Path: <code>commandLAB.computers.provisioners.vmware_provisioner</code></p> <p>Setup a VMware VM and start the daemon.</p>"},{"location":"api/#cli_1","title":"Cli","text":"<p>Module Path: <code>commandLAB.daemon.cli</code></p>"},{"location":"api/#client","title":"Client","text":"<p>Module Path: <code>commandLAB.daemon.client</code></p>"},{"location":"api/#server","title":"Server","text":"<p>Module Path: <code>commandLAB.daemon.server</code></p>"},{"location":"api/#build-images","title":"Build Images","text":"<p>Module Path: <code>commandLAB.dev.build_images</code></p> <p>Get base directory paths for resources</p>"},{"location":"api/#dev-cli","title":"Dev Cli","text":"<p>Module Path: <code>commandLAB.dev.dev_cli</code></p> <p>Update the daemon client from the OpenAPI spec</p>"},{"location":"api/#update-daemon-client","title":"Update Daemon Client","text":"<p>Module Path: <code>commandLAB.dev.update_daemon_client</code></p>"},{"location":"api/#llms","title":"Llms","text":"<p>Module Path: <code>commandLAB.gym._utils.llms</code></p> <p>Instantiate and return a chat model based on the specified model provider.</p> <pre><code>Args:\n    model_provider (str): One of \"openai\", \"custom_openai_compat\", \"anthropic\", or \"huggingface\".\n    options (dict, optional): Additional keyword arguments for the chat model.\n\nReturns:\n    An instance of the appropriate chat model.\n\nRaises:\n    ValueError: If a required API key for a provider isn't set or an unsupported provider is specified.\n</code></pre>"},{"location":"api/#base-agent","title":"Base Agent","text":"<p>Module Path: <code>commandLAB.gym.agents.base_agent</code></p> <p>Base class for agents</p>"},{"location":"api/#naive-vision-language-computer-agent","title":"Naive Vision Language Computer Agent","text":"<p>Module Path: <code>commandLAB.gym.agents.naive_vision_language_computer_agent</code></p> <p>List of action functions that can be called to create ComputerAction objects.</p>"},{"location":"api/#react-vision-language-computer-agent","title":"React Vision Language Computer Agent","text":"<p>Module Path: <code>commandLAB.gym.agents.react_vision_language_computer_agent</code></p> <p>Initialize the React agent with a Hugging Face model.</p> <pre><code>    Args:\n        model: Name of the Hugging Face model to use\n        device: Device to run the model on (e.g., 'cuda', 'cpu')\n</code></pre>"},{"location":"api/#drivers","title":"Drivers","text":"<p>Module Path: <code>commandLAB.gym.drivers</code></p> <p>Abstract base class for drivers.</p>"},{"location":"api/#base-env","title":"Base Env","text":"<p>Module Path: <code>commandLAB.gym.environments.base_env</code></p> <p>Abstract base class for environments.</p>"},{"location":"api/#computer-env","title":"Computer Env","text":"<p>Module Path: <code>commandLAB.gym.environments.computer_env</code></p> <p>Configuration for the computer environment.</p>"},{"location":"api/#multimodal-env","title":"Multimodal Env","text":"<p>Module Path: <code>commandLAB.gym.environments.multimodal_env</code></p> <p>Base class for environments with multiple modalities for observations and actions</p>"},{"location":"api/#grid-overlay-wrapper","title":"Grid Overlay Wrapper","text":"<p>Module Path: <code>commandLAB.gym.environments.wrappers.grid_overlay_wrapper</code></p> <p>Wrapper that adds a grid overlay to screenshot observations.</p>"},{"location":"api/#gymnasium","title":"Gymnasium","text":"<p>Module Path: <code>commandLAB.gym.environments.wrappers.gymnasium</code></p> <p>Wrapper that converts BaseComputerEnv to OpenRL Gym environment</p>"},{"location":"api/#screen-parser-wrapper","title":"Screen Parser Wrapper","text":"<p>Module Path: <code>commandLAB.gym.environments.wrappers.screen_parser_wrapper</code></p> <p>Wrapper that adds a grid overlay to screenshot observations and optionally parses screen text.</p>"},{"location":"api/#llm-based-evals","title":"Llm Based Evals","text":"<p>Module Path: <code>commandLAB.gym.evals.llm_based_evals</code></p> <p>A base class for evaluators that use LLMs to evaluate tasks.</p>"},{"location":"api/#schema","title":"Schema","text":"<p>Module Path: <code>commandLAB.gym.schema</code></p> <p>Abstract base class for episodes.</p>"},{"location":"api/#base","title":"Base","text":"<p>Module Path: <code>commandLAB.gym.tasks.base</code></p> <p>A task is a description of the goal of the agent.</p>"},{"location":"api/#computer-task","title":"Computer Task","text":"<p>Module Path: <code>commandLAB.gym.tasks.computer_task</code></p>"},{"location":"api/#trainer","title":"Trainer","text":"<p>Module Path: <code>commandLAB.gym.trainer</code></p> <p>Base class for trainers.</p>"},{"location":"api/#whisper","title":"Whisper","text":"<p>Module Path: <code>commandLAB.processors.audio_transcription.whisper</code></p>"},{"location":"api/#grid-overlay","title":"Grid Overlay","text":"<p>Module Path: <code>commandLAB.processors.grid_overlay</code></p> <p>Overlay a grid on an image.</p> <pre><code>Args:\n    img: PIL Image to overlay grid on\n    grid_px_size: Size of grid cells in pixels\n\nReturns:\n    PIL Image with grid overlaid\n\nExamples:\n    &gt;&gt;&gt; # Create a test image\n    &gt;&gt;&gt; from PIL import Image\n    &gt;&gt;&gt; test_img = Image.new('RGB', (300, 200), color='white')\n    &gt;&gt;&gt; # Apply grid overlay\n    &gt;&gt;&gt; result = overlay_grid(test_img, grid_px_size=100)\n    &gt;&gt;&gt; # Check that result is an Image\n    &gt;&gt;&gt; isinstance(result, Image.Image)\n    True\n    &gt;&gt;&gt; # Check that dimensions are preserved\n    &gt;&gt;&gt; result.size\n    (300, 200)\n    &gt;&gt;&gt; # Check that it's a different image object (copy was made)\n    &gt;&gt;&gt; result is not test_img\n    True\n\n    &gt;&gt;&gt; # Test with different grid size\n    &gt;&gt;&gt; small_grid = overlay_grid(test_img, grid_px_size=50)\n    &gt;&gt;&gt; small_grid.size\n    (300, 200)\n</code></pre>"},{"location":"api/#pytesseract-screen-parser","title":"Pytesseract Screen Parser","text":"<p>Module Path: <code>commandLAB.processors.screen_parser.pytesseract_screen_parser</code></p> <p>Parse a screenshot using Tesseract OCR.</p> <pre><code>Args:\n    screenshot_b64: Base64 encoded screenshot image\n\nReturns:\n    ParsedScreenshot containing the detected text elements and their bounding boxes\n\nExamples:\n    &gt;&gt;&gt; # This example demonstrates the expected pattern but won't run in doctest\n    &gt;&gt;&gt; # Create a mock base64 image with text\n    &gt;&gt;&gt; import base64\n    &gt;&gt;&gt; from PIL import Image, ImageDraw, ImageFont\n    &gt;&gt;&gt; import io\n    &gt;&gt;&gt; # Create a blank image\n    &gt;&gt;&gt; img = Image.new('RGB', (200, 50), color='white')\n    &gt;&gt;&gt; # Add text to the image\n    &gt;&gt;&gt; draw = ImageDraw.Draw(img)\n    &gt;&gt;&gt; draw.text((10, 10), \"Hello CommandLAB\", fill='black')\n    &gt;&gt;&gt; # Convert to base64\n    &gt;&gt;&gt; buffer = io.BytesIO()\n    &gt;&gt;&gt; img.save(buffer, format=\"PNG\")\n    &gt;&gt;&gt; b64_str = base64.b64encode(buffer.getvalue()).decode('utf-8')\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; # Parse the screenshot (this would be the actual test)\n    &gt;&gt;&gt; # result = parse_screenshot(b64_str)\n    &gt;&gt;&gt; # Check that we get a ParsedScreenshot\n    &gt;&gt;&gt; # isinstance(result, ParsedScreenshot)\n    &gt;&gt;&gt; # True\n    &gt;&gt;&gt; # Check that we found some text\n    &gt;&gt;&gt; # len(result.elements) &gt; 0\n    &gt;&gt;&gt; # True\n    &gt;&gt;&gt; # Check that the first element contains our text\n    &gt;&gt;&gt; # \"Hello\" in result.elements[0].text\n    &gt;&gt;&gt; # True\n</code></pre>"},{"location":"api/#screenparse-ai-screen-parser","title":"Screenparse Ai Screen Parser","text":"<p>Module Path: <code>commandLAB.processors.screen_parser.screenparse_ai_screen_parser</code></p> <p>Parse a screenshot using the ScreenParse.ai API.</p> <pre><code>Args:\n    base64_image: Base64 encoded image string\n    api_key: ScreenParse.ai API key\n    api_url: ScreenParse.ai API endpoint URL\n\nReturns:\n    ParsedScreenshot containing the detected text elements and their bounding boxes\n</code></pre>"},{"location":"api/#types","title":"Types","text":"<p>Module Path: <code>commandLAB.processors.screen_parser.types</code></p>"},{"location":"api/#openai","title":"Openai","text":"<p>Module Path: <code>commandLAB.processors.tts.openai</code></p>"},{"location":"api/#some-local-model","title":"Some Local Model","text":"<p>Module Path: <code>commandLAB.processors.tts.some_local_model</code></p>"},{"location":"api/#types_1","title":"Types","text":"<p>Module Path: <code>commandLAB.types</code></p> <p>Convert a standard mouse button into the VNC-compatible code.         For VNC, left=1, middle=2, right=3.</p>"},{"location":"api/#image","title":"Image","text":"<p>Module Path: <code>commandLAB.utils.image</code></p> <p>Convert a base64 encoded image string to a PIL Image.</p> <pre><code>Args:\n    b64: Base64 encoded image string\n\nReturns:\n    PIL Image object\n\nExamples:\n    &gt;&gt;&gt; # This example shows the pattern but won't actually run in doctest\n    &gt;&gt;&gt; import base64\n    &gt;&gt;&gt; from PIL import Image\n    &gt;&gt;&gt; # Create a small red 1x1 pixel image\n    &gt;&gt;&gt; img = Image.new('RGB', (1, 1), color='red')\n    &gt;&gt;&gt; buffer = io.BytesIO()\n    &gt;&gt;&gt; img.save(buffer, format=\"PNG\")\n    &gt;&gt;&gt; b64_str = base64.b64encode(buffer.getvalue()).decode('utf-8')\n    &gt;&gt;&gt; result_img = b64ToImage(b64_str)\n    &gt;&gt;&gt; result_img.size\n    (1, 1)\n    &gt;&gt;&gt; result_img.getpixel((0, 0))\n    (255, 0, 0)\n</code></pre>"},{"location":"api/#viewer","title":"Viewer","text":"<p>Module Path: <code>commandLAB.utils.viewer</code></p> <p>Initialize the Environment Viewer.</p> <pre><code>    computer_or_env: An environment instance that supports _get_observation(), returning a ComputerObservation.\n    refresh_rate: Refresh interval in milliseconds.\n    show_mouse: Whether to display mouse state information.\n    show_keyboard: Whether to display keyboard state information.\n</code></pre>"},{"location":"api/#version","title":"Version","text":"<p>Module Path: <code>commandLAB.version</code></p> <p>Get the container version to use for deployments</p>"},{"location":"developers/","title":"Developer Guide","text":"<p>Welcome to the CommandLAB developer guide! This section provides detailed information for developers who want to contribute to CommandLAB or extend it for their own projects.</p>"},{"location":"developers/#getting-started","title":"Getting Started","text":"<ul> <li>Development Environment Setup - Setting up your development environment</li> <li>Project Structure - Understanding the CommandLAB project structure</li> <li>Coding Standards - Coding standards and style guidelines</li> <li>Contributing Guidelines - How to contribute to CommandLAB</li> </ul>"},{"location":"developers/#architecture","title":"Architecture","text":"<ul> <li>Architecture Overview - High-level overview of the CommandLAB architecture</li> <li>Core Components - Detailed explanation of core components</li> <li>Design Patterns - Design patterns used in CommandLAB</li> <li>Type System - Detailed explanation of the type system</li> </ul>"},{"location":"developers/#component-documentation","title":"Component Documentation","text":"<ul> <li>Computer System - Detailed documentation of the computer system</li> <li>Provisioner System - Detailed documentation of the provisioner system</li> <li>Daemon System - Detailed documentation of the daemon system</li> <li>Gym Framework - Detailed documentation of the gym framework</li> </ul>"},{"location":"developers/#extension-points","title":"Extension Points","text":"<ul> <li>Creating Custom Computers - How to create custom computer implementations</li> <li>Creating Custom Provisioners - How to create custom provisioner implementations</li> <li>Creating Custom Agents - How to create custom agent implementations</li> <li>Creating Custom Environments - How to create custom environment implementations</li> </ul>"},{"location":"developers/#testing","title":"Testing","text":"<ul> <li>Testing Strategy - Overall testing strategy</li> <li>Unit Testing - Writing unit tests</li> <li>Integration Testing - Writing integration tests</li> <li>End-to-End Testing - Writing end-to-end tests</li> </ul>"},{"location":"developers/#build-and-release","title":"Build and Release","text":"<ul> <li>Build System - Understanding the build system</li> <li>Release Process - How releases are managed</li> <li>Versioning - Versioning strategy</li> <li>Documentation Generation - How documentation is generated</li> </ul>"},{"location":"developers/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Performance Optimization - Optimizing CommandLAB performance</li> <li>Security Considerations - Security considerations for developers</li> <li>Cross-Platform Development - Developing for multiple platforms</li> <li>Cloud Integration - Integrating with cloud providers</li> <li>CI/CD Integration - Integrating with CI/CD pipelines</li> </ul>"},{"location":"developers/#api-reference","title":"API Reference","text":"<ul> <li>Core API - Core API reference</li> <li>Computer API - Computer API reference</li> <li>Provisioner API - Provisioner API reference</li> <li>Daemon API - Daemon API reference</li> <li>Gym API - Gym API reference</li> </ul>"},{"location":"developers/#internals","title":"Internals","text":"<ul> <li>Dependency Management - How dependencies are managed</li> <li>Error Handling - Error handling strategy</li> <li>Logging System - Logging system details</li> <li>Configuration System - Configuration system details</li> </ul>"},{"location":"developers/#examples","title":"Examples","text":"<ul> <li>Example: Custom Computer - Example of creating a custom computer</li> <li>Example: Custom Provisioner - Example of creating a custom provisioner</li> <li>Example: Custom Agent - Example of creating a custom agent</li> <li>Example: Custom Environment - Example of creating a custom environment</li> </ul>"},{"location":"developers/#related-tutorials","title":"Related Tutorials","text":"<p>For step-by-step guides on extending CommandLAB, see these tutorials:</p> <ul> <li>Custom Computers - Implementing custom computer backends</li> <li>Custom Provisioners - Creating custom provisioning solutions</li> <li>Custom Agents - Creating your own AI agents</li> <li>CI/CD Integration - Integrating CommandLAB into CI/CD pipelines</li> </ul>"},{"location":"developers/#community","title":"Community","text":"<ul> <li>Community Guidelines - Guidelines for the CommandLAB community</li> <li>Code of Conduct - Code of conduct for contributors</li> <li>Governance - Project governance</li> <li>Roadmap - Project roadmap</li> </ul>"},{"location":"developers/custom_computers/","title":"Creating Custom Computers","text":"<p>This guide explains how to create custom computer implementations in CommandLAB. Custom computers allow you to extend CommandLAB to control new types of systems or to integrate with existing automation frameworks.</p>"},{"location":"developers/custom_computers/#introduction","title":"Introduction","text":"<p>The <code>BaseComputer</code> class in CommandLAB defines a standard interface for controlling computers. By implementing this interface, you can create custom computer implementations that work with the rest of the CommandLAB ecosystem.</p> <p>Some reasons to create a custom computer implementation:</p> <ul> <li>Integrate with a specialized hardware platform</li> <li>Support a new remote control protocol</li> <li>Optimize for specific performance requirements</li> <li>Add support for new input/output devices</li> <li>Integrate with existing automation frameworks</li> </ul>"},{"location":"developers/custom_computers/#prerequisites","title":"Prerequisites","text":"<p>Before creating a custom computer implementation, you should:</p> <ul> <li>Understand the <code>BaseComputer</code> interface</li> <li>Be familiar with Python and object-oriented programming</li> <li>Have a clear use case for your custom implementation</li> </ul>"},{"location":"developers/custom_computers/#the-basecomputer-interface","title":"The BaseComputer Interface","text":"<p>The <code>BaseComputer</code> class defines the following key methods:</p> <pre><code>class BaseComputer(BaseModel):\n    def get_screenshot(self) -&gt; ScreenshotObservation:\n        \"\"\"Return a screenshot of the computer\"\"\"\n\n    def get_mouse_state(self) -&gt; MouseStateObservation:\n        \"\"\"Return the current mouse state\"\"\"\n\n    def get_keyboard_state(self) -&gt; KeyboardStateObservation:\n        \"\"\"Return the current keyboard state\"\"\"\n\n    def execute_command(self, action: CommandAction) -&gt; bool:\n        \"\"\"Execute a system command\"\"\"\n\n    def execute_keyboard_key_down(self, action: KeyboardKeyDownAction) -&gt; bool:\n        \"\"\"Execute key down for a keyboard key\"\"\"\n\n    def execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction) -&gt; bool:\n        \"\"\"Execute key release for a keyboard key\"\"\"\n\n    def execute_mouse_move(self, action: MouseMoveAction) -&gt; bool:\n        \"\"\"Execute moving the mouse\"\"\"\n\n    def execute_mouse_scroll(self, action: MouseScrollAction) -&gt; bool:\n        \"\"\"Execute mouse scroll\"\"\"\n\n    def execute_mouse_button_down(self, action: MouseButtonDownAction) -&gt; bool:\n        \"\"\"Execute mouse button down\"\"\"\n\n    def execute_mouse_button_up(self, action: MouseButtonUpAction) -&gt; bool:\n        \"\"\"Execute mouse button up\"\"\"\n</code></pre> <p>The base class also provides default implementations for composite actions like <code>execute_click</code>, <code>execute_type</code>, and <code>execute_keyboard_hotkey</code>, which are built on top of the primitive actions.</p>"},{"location":"developers/custom_computers/#step-1-create-a-new-computer-class","title":"Step 1: Create a New Computer Class","text":"<p>Start by creating a new class that inherits from <code>BaseComputer</code>:</p> <pre><code>from commandLAB.computers.base_computer import BaseComputer\nfrom commandLAB.types import (\n    ScreenshotObservation,\n    MouseStateObservation,\n    KeyboardStateObservation,\n    CommandAction,\n    KeyboardKeyDownAction,\n    KeyboardKeyReleaseAction,\n    MouseMoveAction,\n    MouseScrollAction,\n    MouseButtonDownAction,\n    MouseButtonUpAction,\n)\n\nclass MyCustomComputer(BaseComputer):\n    def __init__(self, custom_param: str = \"default\"):\n        super().__init__()\n        self.custom_param = custom_param\n        # Initialize your custom resources here\n\n    def close(self):\n        \"\"\"Clean up resources when the object is destroyed\"\"\"\n        # Clean up your custom resources here\n        pass\n</code></pre>"},{"location":"developers/custom_computers/#step-2-implement-required-methods","title":"Step 2: Implement Required Methods","text":"<p>Next, implement the required methods from the <code>BaseComputer</code> interface:</p> <pre><code>class MyCustomComputer(BaseComputer):\n    # ... __init__ and other methods ...\n\n    def get_screenshot(self) -&gt; ScreenshotObservation:\n        \"\"\"Return a screenshot of the computer\"\"\"\n        # Implement screenshot capture logic\n        screenshot_data = \"base64_encoded_screenshot_data\"  # Replace with actual implementation\n        return ScreenshotObservation(screenshot=screenshot_data)\n\n    def get_mouse_state(self) -&gt; MouseStateObservation:\n        \"\"\"Return the current mouse state\"\"\"\n        # Implement mouse state retrieval logic\n        buttons = {MouseButton.LEFT: False, MouseButton.RIGHT: False, MouseButton.MIDDLE: False}\n        position = (0, 0)  # Replace with actual implementation\n        return MouseStateObservation(buttons=buttons, position=position)\n\n    def get_keyboard_state(self) -&gt; KeyboardStateObservation:\n        \"\"\"Return the current keyboard state\"\"\"\n        # Implement keyboard state retrieval logic\n        keys = {key: False for key in KeyboardKey}  # Replace with actual implementation\n        return KeyboardStateObservation(keys=keys)\n\n    def execute_command(self, action: CommandAction) -&gt; bool:\n        \"\"\"Execute a system command\"\"\"\n        # Implement command execution logic\n        command = action.command\n        timeout = action.timeout\n        # Execute the command and return success/failure\n        return True  # Replace with actual implementation\n\n    def execute_keyboard_key_down(self, action: KeyboardKeyDownAction) -&gt; bool:\n        \"\"\"Execute key down for a keyboard key\"\"\"\n        # Implement key down logic\n        key = action.key\n        # Press the key and return success/failure\n        return True  # Replace with actual implementation\n\n    def execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction) -&gt; bool:\n        \"\"\"Execute key release for a keyboard key\"\"\"\n        # Implement key release logic\n        key = action.key\n        # Release the key and return success/failure\n        return True  # Replace with actual implementation\n\n    def execute_mouse_move(self, action: MouseMoveAction) -&gt; bool:\n        \"\"\"Execute moving the mouse\"\"\"\n        # Implement mouse move logic\n        x = action.x\n        y = action.y\n        move_duration = action.move_duration\n        # Move the mouse and return success/failure\n        return True  # Replace with actual implementation\n\n    def execute_mouse_scroll(self, action: MouseScrollAction) -&gt; bool:\n        \"\"\"Execute mouse scroll\"\"\"\n        # Implement mouse scroll logic\n        amount = action.amount\n        # Scroll the mouse and return success/failure\n        return True  # Replace with actual implementation\n\n    def execute_mouse_button_down(self, action: MouseButtonDownAction) -&gt; bool:\n        \"\"\"Execute mouse button down\"\"\"\n        # Implement mouse button down logic\n        button = action.button\n        # Press the mouse button and return success/failure\n        return True  # Replace with actual implementation\n\n    def execute_mouse_button_up(self, action: MouseButtonUpAction) -&gt; bool:\n        \"\"\"Execute mouse button up\"\"\"\n        # Implement mouse button up logic\n        button = action.button\n        # Release the mouse button and return success/failure\n        return True  # Replace with actual implementation\n</code></pre>"},{"location":"developers/custom_computers/#step-3-implement-custom-methods-optional","title":"Step 3: Implement Custom Methods (Optional)","text":"<p>You can add custom methods specific to your implementation:</p> <pre><code>class MyCustomComputer(BaseComputer):\n    # ... standard methods ...\n\n    def custom_method(self, param: str) -&gt; bool:\n        \"\"\"A custom method specific to this implementation\"\"\"\n        # Custom implementation\n        return True\n</code></pre>"},{"location":"developers/custom_computers/#step-4-override-composite-methods-optional","title":"Step 4: Override Composite Methods (Optional)","text":"<p>If needed, you can override the default implementations of composite methods:</p> <pre><code>class MyCustomComputer(BaseComputer):\n    # ... standard methods ...\n\n    def execute_click(self, action: ClickAction) -&gt; bool:\n        \"\"\"Custom implementation of click action\"\"\"\n        # Custom click implementation that might be more efficient\n        # than the default implementation that uses move, button down, and button up\n        return True\n</code></pre>"},{"location":"developers/custom_computers/#example-webdrivercomputer","title":"Example: WebDriverComputer","text":"<p>Here's an example of a custom computer implementation that uses Selenium WebDriver to control a web browser:</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.keys import Keys\nimport base64\nimport time\n\nfrom commandLAB.computers.base_computer import BaseComputer\nfrom commandLAB.types import (\n    ScreenshotObservation,\n    MouseStateObservation,\n    KeyboardStateObservation,\n    CommandAction,\n    KeyboardKeyDownAction,\n    KeyboardKeyReleaseAction,\n    MouseMoveAction,\n    MouseScrollAction,\n    MouseButtonDownAction,\n    MouseButtonUpAction,\n    MouseButton,\n    KeyboardKey,\n)\n\nclass WebDriverComputer(BaseComputer):\n    def __init__(self, browser: str = \"chrome\", headless: bool = False):\n        super().__init__()\n\n        # Initialize WebDriver\n        if browser.lower() == \"chrome\":\n            options = webdriver.ChromeOptions()\n            if headless:\n                options.add_argument(\"--headless\")\n            self.driver = webdriver.Chrome(options=options)\n        elif browser.lower() == \"firefox\":\n            options = webdriver.FirefoxOptions()\n            if headless:\n                options.add_argument(\"--headless\")\n            self.driver = webdriver.Firefox(options=options)\n        else:\n            raise ValueError(f\"Unsupported browser: {browser}\")\n\n        # Initialize ActionChains for mouse and keyboard actions\n        self.actions = ActionChains(self.driver)\n\n        # Set initial window size\n        self.driver.set_window_size(1280, 800)\n\n    def close(self):\n        \"\"\"Clean up resources\"\"\"\n        if hasattr(self, 'driver'):\n            self.driver.quit()\n\n    def get_screenshot(self) -&gt; ScreenshotObservation:\n        \"\"\"Take a screenshot using WebDriver\"\"\"\n        screenshot = self.driver.get_screenshot_as_base64()\n        return ScreenshotObservation(screenshot=screenshot)\n\n    def get_mouse_state(self) -&gt; MouseStateObservation:\n        \"\"\"WebDriver doesn't provide mouse state, so return a default value\"\"\"\n        # This is a limitation of WebDriver\n        buttons = {MouseButton.LEFT: False, MouseButton.RIGHT: False, MouseButton.MIDDLE: False}\n        position = (0, 0)\n        return MouseStateObservation(buttons=buttons, position=position)\n\n    def get_keyboard_state(self) -&gt; KeyboardStateObservation:\n        \"\"\"WebDriver doesn't provide keyboard state, so return a default value\"\"\"\n        # This is a limitation of WebDriver\n        keys = {key: False for key in KeyboardKey}\n        return KeyboardStateObservation(keys=keys)\n\n    def execute_command(self, action: CommandAction) -&gt; bool:\n        \"\"\"Execute a JavaScript command in the browser\"\"\"\n        try:\n            self.driver.execute_script(action.command)\n            return True\n        except Exception as e:\n            print(f\"Error executing command: {e}\")\n            return False\n\n    def execute_keyboard_key_down(self, action: KeyboardKeyDownAction) -&gt; bool:\n        \"\"\"Press a key down using ActionChains\"\"\"\n        try:\n            selenium_key = self._convert_to_selenium_key(action.key)\n            self.actions.key_down(selenium_key).perform()\n            return True\n        except Exception as e:\n            print(f\"Error executing key down: {e}\")\n            return False\n\n    def execute_keyboard_key_release(self, action: KeyboardKeyReleaseAction) -&gt; bool:\n        \"\"\"Release a key using ActionChains\"\"\"\n        try:\n            selenium_key = self._convert_to_selenium_key(action.key)\n            self.actions.key_up(selenium_key).perform()\n            return True\n        except Exception as e:\n            print(f\"Error executing key release: {e}\")\n            return False\n\n    def execute_mouse_move(self, action: MouseMoveAction) -&gt; bool:\n        \"\"\"Move the mouse using ActionChains\"\"\"\n        try:\n            # Find an element at the target position or use move_by_offset\n            self.actions.move_by_offset(action.x, action.y).perform()\n            return True\n        except Exception as e:\n            print(f\"Error executing mouse move: {e}\")\n            return False\n\n    def execute_mouse_scroll(self, action: MouseScrollAction) -&gt; bool:\n        \"\"\"Scroll using JavaScript\"\"\"\n        try:\n            self.driver.execute_script(f\"window.scrollBy(0, {action.amount});\")\n            return True\n        except Exception as e:\n            print(f\"Error executing mouse scroll: {e}\")\n            return False\n\n    def execute_mouse_button_down(self, action: MouseButtonDownAction) -&gt; bool:\n        \"\"\"Press a mouse button using ActionChains\"\"\"\n        try:\n            if action.button == MouseButton.LEFT:\n                self.actions.click_and_hold().perform()\n            elif action.button == MouseButton.RIGHT:\n                self.actions.context_click().perform()\n            return True\n        except Exception as e:\n            print(f\"Error executing mouse button down: {e}\")\n            return False\n\n    def execute_mouse_button_up(self, action: MouseButtonUpAction) -&gt; bool:\n        \"\"\"Release a mouse button using ActionChains\"\"\"\n        try:\n            if action.button == MouseButton.LEFT:\n                self.actions.release().perform()\n            return True\n        except Exception as e:\n            print(f\"Error executing mouse button up: {e}\")\n            return False\n\n    def _convert_to_selenium_key(self, key: KeyboardKey):\n        \"\"\"Convert CommandLAB key to Selenium key\"\"\"\n        key_mapping = {\n            KeyboardKey.ENTER: Keys.ENTER,\n            KeyboardKey.TAB: Keys.TAB,\n            KeyboardKey.SPACE: Keys.SPACE,\n            KeyboardKey.BACKSPACE: Keys.BACKSPACE,\n            KeyboardKey.ESCAPE: Keys.ESCAPE,\n            KeyboardKey.UP: Keys.UP,\n            KeyboardKey.DOWN: Keys.DOWN,\n            KeyboardKey.LEFT: Keys.LEFT,\n            KeyboardKey.RIGHT: Keys.RIGHT,\n            KeyboardKey.SHIFT: Keys.SHIFT,\n            KeyboardKey.CTRL: Keys.CONTROL,\n            KeyboardKey.ALT: Keys.ALT,\n            # Add more mappings as needed\n        }\n\n        if key in key_mapping:\n            return key_mapping[key]\n        else:\n            # For regular keys, just return the key value\n            return key.value\n\n    # Custom methods specific to WebDriver\n\n    def navigate_to(self, url: str) -&gt; bool:\n        \"\"\"Navigate to a URL\"\"\"\n        try:\n            self.driver.get(url)\n            return True\n        except Exception as e:\n            print(f\"Error navigating to {url}: {e}\")\n            return False\n\n    def find_and_click(self, selector: str) -&gt; bool:\n        \"\"\"Find an element by CSS selector and click it\"\"\"\n        try:\n            element = self.driver.find_element_by_css_selector(selector)\n            element.click()\n            return True\n        except Exception as e:\n            print(f\"Error finding and clicking {selector}: {e}\")\n            return False\n</code></pre>"},{"location":"developers/custom_computers/#best-practices","title":"Best Practices","text":""},{"location":"developers/custom_computers/#error-handling","title":"Error Handling","text":"<p>Always include robust error handling in your implementation:</p> <pre><code>def execute_command(self, action: CommandAction) -&gt; bool:\n    try:\n        # Implementation\n        return True\n    except Exception as e:\n        print(f\"Error executing command: {e}\")\n        return False\n</code></pre>"},{"location":"developers/custom_computers/#resource-management","title":"Resource Management","text":"<p>Properly manage resources in the <code>__init__</code> and <code>close</code> methods:</p> <pre><code>def __init__(self):\n    super().__init__()\n    # Acquire resources\n\ndef close(self):\n    try:\n        # Release resources\n        pass\n    except Exception as e:\n        print(f\"Error closing resources: {e}\")\n</code></pre>"},{"location":"developers/custom_computers/#documentation","title":"Documentation","text":"<p>Document your implementation thoroughly:</p> <pre><code>class MyCustomComputer(BaseComputer):\n    \"\"\"\n    A custom computer implementation that controls XYZ system.\n\n    This implementation uses the ABC library to interact with XYZ hardware.\n    It supports all standard CommandLAB actions and adds custom methods\n    for XYZ-specific functionality.\n\n    Args:\n        param1: Description of param1\n        param2: Description of param2\n    \"\"\"\n</code></pre>"},{"location":"developers/custom_computers/#testing","title":"Testing","text":"<p>Create comprehensive tests for your implementation:</p> <pre><code>def test_my_custom_computer():\n    computer = MyCustomComputer()\n    try:\n        # Test screenshot\n        screenshot = computer.get_screenshot()\n        assert screenshot is not None\n\n        # Test mouse move\n        result = computer.execute_mouse_move(MouseMoveAction(x=100, y=100))\n        assert result is True\n\n        # Test click\n        result = computer.execute_click(ClickAction(x=100, y=100))\n        assert result is True\n\n        # Test type\n        result = computer.execute_type(TypeAction(text=\"Hello, World!\"))\n        assert result is True\n    finally:\n        computer.close()\n</code></pre>"},{"location":"developers/custom_computers/#integration-with-commandlab","title":"Integration with CommandLAB","text":"<p>Once you've created your custom computer implementation, you can use it with the rest of the CommandLAB ecosystem:</p> <pre><code>from my_module import MyCustomComputer\nfrom commandLAB.types import ClickAction, TypeAction\n\n# Create an instance of your custom computer\ncomputer = MyCustomComputer(custom_param=\"value\")\n\n# Use it like any other computer\ncomputer.execute_click(ClickAction(x=100, y=100))\ncomputer.execute_type(TypeAction(text=\"Hello, CommandLAB!\"))\n\n# Use it with the gym framework\nfrom commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n\n# Create an environment with your custom computer\nenv = ComputerEnv(ComputerEnvConfig(\n    computer_cls_name=\"MyCustomComputer\",\n    computer_cls_kwargs={\"custom_param\": \"value\"}\n))\n</code></pre>"},{"location":"developers/custom_computers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developers/custom_computers/#common-issues","title":"Common Issues","text":"<ol> <li>Method Not Implemented: If you forget to implement a required method, you'll get a <code>NotImplementedError</code>.</li> </ol> <p>Solution: Implement all required methods from the <code>BaseComputer</code> interface.</p> <ol> <li>Type Errors: If your method returns the wrong type, you'll get a type error.</li> </ol> <p>Solution: Make sure your methods return the correct types as specified in the interface.</p> <ol> <li>Resource Leaks: If you don't properly clean up resources, you may experience resource leaks.</li> </ol> <p>Solution: Implement the <code>close</code> method to clean up all resources.</p>"},{"location":"developers/custom_computers/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Add logging to your implementation:</li> </ol> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\ndef execute_mouse_move(self, action: MouseMoveAction) -&gt; bool:\n    logger.debug(f\"Moving mouse to ({action.x}, {action.y})\")\n    # Implementation\n</code></pre> <ol> <li>Use a debugger to step through your code:</li> </ol> <pre><code>import pdb\n\ndef execute_command(self, action: CommandAction) -&gt; bool:\n    pdb.set_trace()  # Start the debugger\n    # Implementation\n</code></pre>"},{"location":"developers/custom_computers/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Creating Custom Provisioners</li> <li>Explore Creating Custom Agents</li> <li>Contribute your implementation to the CommandLAB project</li> </ul>"},{"location":"developers/provisioners/","title":"Provisioner System for Developers","text":"<p>This guide provides detailed information about the CommandLAB provisioner system for library developers who want to extend or modify the system.</p>"},{"location":"developers/provisioners/#architecture-overview","title":"Architecture Overview","text":"<p>The provisioner system is designed to handle the setup, management, and teardown of computer environments across various platforms. It follows a modular architecture with the following components:</p> <ol> <li>BaseComputerProvisioner: Abstract base class that defines the common interface for all provisioners</li> <li>Platform-specific Provisioners: Concrete implementations for different platforms (AWS, Azure, GCP, Docker, Kubernetes)</li> <li>Build System: Tools for building and packaging images for different platforms</li> </ol>"},{"location":"developers/provisioners/#basecomputerprovisioner-interface","title":"BaseComputerProvisioner Interface","text":"<p>All provisioners implement the <code>BaseComputerProvisioner</code> interface:</p> <pre><code>class BaseComputerProvisioner(ABC):\n    def __init__(self, port: int = 8000):\n        self.port = port\n\n    @abstractmethod\n    def setup(self) -&gt; None:\n        \"\"\"Setup the computer environment\"\"\"\n\n    @abstractmethod\n    def teardown(self) -&gt; None:\n        \"\"\"Cleanup resources\"\"\"\n\n    @abstractmethod\n    def is_running(self) -&gt; bool:\n        \"\"\"Check if the environment is running\"\"\"\n\n    def get_status(self) -&gt; str:\n        \"\"\"Get the current status of the provisioner\"\"\"\n        return self._status\n</code></pre>"},{"location":"developers/provisioners/#common-implementation-patterns","title":"Common Implementation Patterns","text":"<p>All provisioners follow these common implementation patterns:</p>"},{"location":"developers/provisioners/#status-tracking","title":"Status Tracking","text":"<p>Provisioners track their status using a <code>_status</code> field with these standard values:</p> <ul> <li><code>\"not_started\"</code>: Initial state</li> <li><code>\"starting\"</code>: During setup</li> <li><code>\"running\"</code>: Successfully running</li> <li><code>\"stopping\"</code>: During teardown</li> <li><code>\"stopped\"</code>: Successfully stopped</li> <li><code>\"error\"</code>: Error state</li> </ul>"},{"location":"developers/provisioners/#logging","title":"Logging","text":"<p>Provisioners use Python's standard logging module:</p> <pre><code>import logging\nlogger = logging.getLogger(__name__)\n\n# Usage\nlogger.info(\"Starting setup...\")\nlogger.error(f\"Error during setup: {e}\")\n</code></pre>"},{"location":"developers/provisioners/#error-handling","title":"Error Handling","text":"<p>Provisioners implement robust error handling with retry logic:</p> <pre><code>retry_count = 0\nwhile retry_count &lt; self.max_retries:\n    try:\n        # Setup logic\n        return\n    except Exception as e:\n        retry_count += 1\n        if retry_count &gt;= self.max_retries:\n            self._status = \"error\"\n            logger.error(f\"Failed after {self.max_retries} attempts: {e}\")\n            raise\n        logger.warning(f\"Error, retrying ({retry_count}/{self.max_retries}): {e}\")\n        time.sleep(2 ** retry_count)  # Exponential backoff\n</code></pre>"},{"location":"developers/provisioners/#timeouts","title":"Timeouts","text":"<p>Provisioners implement timeouts for long-running operations:</p> <pre><code>start_time = time.time()\nwhile time.time() - start_time &lt; self.timeout:\n    if self.is_running():\n        return True\n    time.sleep(5)\nraise TimeoutError(\"Operation timed out\")\n</code></pre>"},{"location":"developers/provisioners/#platform-specific-provisioners","title":"Platform-Specific Provisioners","text":""},{"location":"developers/provisioners/#aws-provisioner","title":"AWS Provisioner","text":"<p>The AWS provisioner uses boto3 to create and manage EC2 instances:</p> <pre><code>class AWSProvisioner(BaseComputerProvisioner):\n    def __init__(\n        self, \n        port: int = 8000, \n        region: str = \"us-west-2\", \n        instance_type: str = \"t2.micro\",\n        image_id: str = None,\n        security_groups: List[str] = None,\n        max_retries: int = 3,\n        timeout: int = 300\n    ):\n        # ...\n</code></pre> <p>Key implementation details:</p> <ul> <li>Uses boto3 EC2 client</li> <li>Configurable AMI ID and security groups</li> <li>Implements retry logic and timeouts</li> <li>Tracks instance state</li> </ul>"},{"location":"developers/provisioners/#azure-provisioner","title":"Azure Provisioner","text":"<p>The Azure provisioner uses the Azure SDK to create and manage VMs:</p> <pre><code>class AzureProvisioner(BaseComputerProvisioner):\n    def __init__(\n        self, \n        port: int = 8000, \n        resource_group: str = \"commandlab-rg\", \n        location: str = \"eastus\", \n        vm_size: str = \"Standard_DS1_v2\",\n        subscription_id: str = None, \n        image_id: str = None,\n        max_retries: int = 3, \n        timeout: int = 600\n    ):\n        # ...\n</code></pre> <p>Key implementation details:</p> <ul> <li>Uses Azure Compute Management Client</li> <li>Supports environment variable fallback for credentials</li> <li>Configurable VM size and image ID</li> </ul>"},{"location":"developers/provisioners/#gcp-provisioner","title":"GCP Provisioner","text":"<p>The GCP provisioner uses the Google Cloud SDK to create and manage VMs:</p> <pre><code>class GCPProvisioner(BaseComputerProvisioner):\n    def __init__(\n        self, \n        port: int = 8000, \n        project: str = None, \n        zone: str = \"us-central1-a\", \n        machine_type: str = \"n1-standard-1\",\n        source_image: str = None,\n        max_retries: int = 3,\n        timeout: int = 600\n    ):\n        # ...\n</code></pre> <p>Key implementation details:</p> <ul> <li>Uses Google Cloud Compute API</li> <li>Configurable project, zone, and machine type</li> <li>Configurable source image</li> </ul>"},{"location":"developers/provisioners/#docker-provisioner","title":"Docker Provisioner","text":"<p>The Docker provisioner supports multiple container platforms:</p> <pre><code>class DockerProvisioner(BaseComputerProvisioner):\n    def __init__(\n        self, \n        port: int = 8000, \n        container_name: str = \"commandlab-daemon\",\n        platform: DockerPlatform = DockerPlatform.LOCAL,\n        version: Optional[str] = None,\n        region: str = None,\n        resource_group: str = None,\n        project_id: str = None,\n        subnets: List[str] = None,\n        security_groups: List[str] = None,\n        subscription_id: str = None,\n        max_retries: int = 3,\n        timeout: int = 300\n    ):\n        # ...\n</code></pre> <p>Key implementation details:</p> <ul> <li>Supports multiple platforms (LOCAL, AWS_ECS, AZURE_CONTAINER_INSTANCES, GCP_CLOUD_RUN)</li> <li>Platform-specific setup and teardown methods</li> <li>Configurable container name and version</li> </ul>"},{"location":"developers/provisioners/#kubernetes-provisioner","title":"Kubernetes Provisioner","text":"<p>The Kubernetes provisioner supports multiple Kubernetes platforms:</p> <pre><code>class KubernetesProvisioner(BaseComputerProvisioner):\n    def __init__(\n        self,\n        port: int = 8000,\n        platform: KubernetesPlatform = KubernetesPlatform.LOCAL,\n        namespace: str = \"default\",\n        cluster_name: Optional[str] = None,\n        region: Optional[str] = None,\n        resource_group: Optional[str] = None,\n        project_id: Optional[str] = None,\n        version: Optional[str] = None,\n        max_retries: int = 3,\n        timeout: int = 300\n    ):\n        # ...\n</code></pre> <p>Key implementation details:</p> <ul> <li>Supports multiple platforms (LOCAL, AWS_EKS, AZURE_AKS, GCP_GKE)</li> <li>Creates Kubernetes deployments and services</li> <li>Configurable namespace and cluster</li> </ul>"},{"location":"developers/provisioners/#build-system","title":"Build System","text":"<p>The build system is responsible for creating images for different platforms:</p>"},{"location":"developers/provisioners/#build-images-cli","title":"Build Images CLI","text":"<p>The <code>build_images.py</code> script provides a CLI for building images:</p> <pre><code>cli = typer.Typer(help=\"Build CommandLAB daemon images for different platforms\")\n\n@cli.command()\ndef build_docker_image(version: Optional[str] = ...):\n    \"\"\"Build the Docker image for the daemon\"\"\"\n    # ...\n\n@cli.command()\ndef build_aws_ami(version: Optional[str] = ...):\n    \"\"\"Build AWS AMI using Packer\"\"\"\n    # ...\n\n@cli.command()\ndef build_azure_vm(version: Optional[str] = ...):\n    \"\"\"Build Azure VM image using Packer\"\"\"\n    # ...\n\n@cli.command()\ndef build_gcp_vm(version: Optional[str] = ...):\n    \"\"\"Build GCP VM image using Packer\"\"\"\n    # ...\n\n@cli.command()\ndef build_kubernetes_image(version: Optional[str] = ...):\n    \"\"\"Build Docker image for Kubernetes deployment\"\"\"\n    # ...\n\n@cli.command()\ndef build_all_images(version: Optional[str] = ...):\n    \"\"\"Build images for all platforms\"\"\"\n    # ...\n</code></pre>"},{"location":"developers/provisioners/#packer-templates","title":"Packer Templates","text":"<p>The build system automatically generates Packer templates for cloud platforms:</p> <ul> <li>AWS AMI template</li> <li>Azure VM template</li> <li>GCP VM template</li> </ul> <p>These templates define how to build the images with the necessary dependencies.</p>"},{"location":"developers/provisioners/#extending-the-provisioner-system","title":"Extending the Provisioner System","text":""},{"location":"developers/provisioners/#creating-a-new-provisioner","title":"Creating a New Provisioner","text":"<p>To create a new provisioner:</p> <ol> <li>Create a new class that inherits from <code>BaseComputerProvisioner</code></li> <li>Implement the required methods: <code>setup()</code>, <code>teardown()</code>, and <code>is_running()</code></li> <li>Follow the common implementation patterns for status tracking, logging, error handling, and timeouts</li> </ol> <p>Example:</p> <pre><code>class MyCustomProvisioner(BaseComputerProvisioner):\n    def __init__(self, port: int = 8000, custom_param: str = \"default\"):\n        super().__init__(port)\n        self.custom_param = custom_param\n        self._status = \"not_started\"\n\n    def setup(self) -&gt; None:\n        self._status = \"starting\"\n        # Implementation...\n        self._status = \"running\"\n\n    def teardown(self) -&gt; None:\n        self._status = \"stopping\"\n        # Implementation...\n        self._status = \"stopped\"\n\n    def is_running(self) -&gt; bool:\n        # Implementation...\n        return True\n</code></pre>"},{"location":"developers/provisioners/#adding-build-support-for-a-new-platform","title":"Adding Build Support for a New Platform","text":"<p>To add build support for a new platform:</p> <ol> <li>Add a new command to <code>build_images.py</code></li> <li>Implement the build logic for the new platform</li> <li>Add the new command to <code>build_all_images()</code></li> </ol> <p>Example:</p> <pre><code>@cli.command()\ndef build_my_platform(version: Optional[str] = ...):\n    \"\"\"Build image for my platform\"\"\"\n    # Implementation...\n\n# Update build_all_images\n@cli.command()\ndef build_all_images(version: Optional[str] = ...):\n    # Existing code...\n    logger.info(\"Building My Platform image...\")\n    build_my_platform(version)\n    # Rest of existing code...\n</code></pre>"},{"location":"developers/provisioners/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling: Always implement robust error handling with retry logic</li> <li>Logging: Use the standard logging module with appropriate log levels</li> <li>Timeouts: Implement timeouts for all long-running operations</li> <li>Status Tracking: Use the standard status values for consistency</li> <li>Configuration: Make all platform-specific parameters configurable</li> <li>Resource Cleanup: Ensure proper cleanup in the <code>teardown()</code> method</li> <li>Validation: Validate required parameters in the constructor</li> </ol> <p>By following these guidelines, you can create robust and maintainable provisioners that integrate seamlessly with the CommandLAB ecosystem.</p>"},{"location":"examples/","title":"Examples","text":"<p>This section contains examples demonstrating various aspects of CommandLAB.</p> <ul> <li>CommandLAB Programming Example</li> <li>CommandLAB Gym Basic Example</li> <li>CommandLAB Gym Text Editing Example</li> <li>CommandLAB Gym Web Browsing Example</li> <li>CommandLAB Gym Training Example</li> <li>CommandLAB Gym Custom Task Example</li> <li>CommandLAB Gym Simple Agent Example</li> <li>CommandLAB Gym React Agent Example</li> <li>CommandLAB Gym Multi-Episode Training Example</li> <li>CommandLAB Getting Started Example</li> <li>CommandLAB Concepts Example</li> <li>CommandLAB Advanced Concepts Example</li> <li>CommandLAB Docker Example</li> <li>CommandLAB Kubernetes Example</li> <li>CommandLAB Scripting Computer Interactions Example</li> <li>CommandLAB Automating Computer Interactions Example</li> <li>CommandLAB Document Editing Example</li> <li>CommandLAB Web Automation Example</li> <li>CommandLAB Simple Gym Test</li> </ul>"},{"location":"examples/advanced_concepts/","title":"CommandLAB Advanced Concepts Example","text":""},{"location":"examples/advanced_concepts/#description","title":"Description","text":"<p>This example demonstrates advanced concepts of CommandLAB, including: - Mouse movement and clicking - Keyboard typing - Keyboard hotkeys - Getting mouse and keyboard state</p>"},{"location":"examples/advanced_concepts/#status","title":"Status","text":"<p>\u2705 Works perfectly</p>"},{"location":"examples/advanced_concepts/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Advanced Concepts Example\n\nThis example demonstrates advanced concepts of CommandLAB, including:\n- Mouse movement and clicking\n- Keyboard typing\n- Keyboard hotkeys\n- Getting mouse and keyboard state\n\nStatus: \u2705 Works perfectly\n- Successfully performs mouse and keyboard actions\n\"\"\"\n\nimport time\n\n# Import the local computer implementation\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.types import (\n        MouseButton,\n        KeyboardKey,\n        ClickAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        MouseMoveAction,\n    )\nexcept ImportError:\n    print(\n        \"Error: Required modules not found. Make sure CommandLAB is installed with the local extra:\"\n    )\n    print(\"pip install commandlab[local]\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a LocalPynputComputer instance...\")\n\n    try:\n        # Create a computer instance\n        computer = LocalPynputComputer()\n\n        # Give the user time to switch to a text editor or notepad\n        print(\n            \"Please open a text editor (like Notepad) and bring it to the foreground.\"\n        )\n        print(\"This example will perform mouse and keyboard actions in 5 seconds...\")\n        for i in range(5, 0, -1):\n            print(f\"{i}...\", end=\" \", flush=True)\n            time.sleep(1)\n        print(\"Starting!\")\n\n        # Get the current mouse state\n        mouse_state = computer.get_mouse_state()\n        print(f\"Current mouse position: {mouse_state.position}\")\n        print(f\"Mouse buttons: {mouse_state.buttons}\")\n\n        # Move the mouse to a position\n        print(\"Moving mouse to position (500, 300)...\")\n        computer.execute_mouse_move(\n            MouseMoveAction(\n                x=500, y=300, move_duration=1.0  # Move slowly so it's visible\n            )\n        )\n        time.sleep(0.5)\n\n        # Click at the current position\n        print(\"Clicking at current position...\")\n        computer.execute_click(ClickAction(x=500, y=300, button=MouseButton.LEFT))\n        time.sleep(0.5)\n\n        # Type some text\n        print(\"Typing text...\")\n        computer.execute_type(\n            TypeAction(\n                text=\"Hello from CommandLAB!\\n\\nThis text was typed automatically.\"\n            )\n        )\n        time.sleep(1)\n\n        # Press a keyboard hotkey (Ctrl+A to select all)\n        print(\"Pressing Ctrl+A to select all text...\")\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.A])\n        )\n        time.sleep(0.5)\n\n        # Type more text (replacing the selected text)\n        print(\"Typing more text...\")\n        computer.execute_type(\n            TypeAction(\n                text=\"This text replaced the selected text.\\n\\nCommandLAB makes automation easy!\"\n            )\n        )\n        time.sleep(1)\n\n        # Get the current keyboard state\n        keyboard_state = computer.get_keyboard_state()\n        print(f\"Keyboard state: {keyboard_state.keys}\")\n\n        print(\"\\nExample completed successfully!\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"computer\" in locals():\n            computer.close()\n            print(\"Computer resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/advanced_concepts/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 3_advanced_concepts.py\n\n# Using Poetry\npoetry run python 3_advanced_concepts.py\n</code></pre>"},{"location":"examples/advanced_concepts/#expected-output","title":"Expected Output","text":"<pre><code>Error: Required modules not found. Make sure CommandLAB is installed with the local extra:\npip install commandlab[local]\n</code></pre>"},{"location":"examples/advanced_concepts/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/advanced_concepts/#next-steps","title":"Next Steps","text":""},{"location":"examples/automating_computer_interactions/","title":"CommandLAB Automating Computer Interactions Example","text":""},{"location":"examples/automating_computer_interactions/#description","title":"Description","text":"<p>This example demonstrates how to use the grid overlay utility to help with positioning when automating computer interactions.</p>"},{"location":"examples/automating_computer_interactions/#status","title":"Status","text":"<p>\u2705 Works perfectly</p>"},{"location":"examples/automating_computer_interactions/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Automating Computer Interactions Example\n\nThis example demonstrates how to use the grid overlay utility to help with positioning\nwhen automating computer interactions.\n\nStatus: \u2705 Works perfectly\n- Successfully creates a grid overlay image and demonstrates mouse actions\n\"\"\"\n\nimport os\nimport time\nimport base64\nfrom PIL import Image\nimport io\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.processors.grid_overlay import overlay_grid\n    from commandLAB.types import ClickAction, MouseButton, MouseMoveAction\nexcept ImportError:\n    print(\n        \"Error: Required modules not found. Make sure CommandLAB is installed with the local extra:\"\n    )\n    print(\"pip install commandlab[local]\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a LocalPynputComputer instance...\")\n\n    try:\n        # Create a computer instance\n        computer = LocalPynputComputer()\n\n        # Take a screenshot\n        print(\"Taking a screenshot...\")\n        screenshot = computer.get_screenshot()\n\n        # Convert base64 to image\n        img_data = base64.b64decode(screenshot.screenshot)\n        img = Image.open(io.BytesIO(img_data))\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n\n        # Apply grid overlay\n        print(\"Applying grid overlay...\")\n        grid_img = overlay_grid(img, grid_px_size=100)\n\n        # Save the grid image\n        grid_path = \"output/grid_overlay.png\"\n        grid_img.save(grid_path)\n\n        print(f\"Grid overlay image saved to {grid_path}\")\n        print(f\"Image size: {grid_img.width}x{grid_img.height} pixels\")\n\n        # Open the grid image to help with positioning\n        print(f\"Opening the grid image to help with positioning...\")\n        if os.name == \"nt\":  # Windows\n            os.system(f\"start {grid_path}\")\n        elif os.uname().sysname == \"Darwin\":  # macOS\n            os.system(f\"open {grid_path}\")\n        else:  # Linux\n            os.system(f\"xdg-open {grid_path}\")\n\n        print(\"\\nThe grid overlay image shows coordinates at 100-pixel intervals.\")\n        print(\"You can use these coordinates to position mouse clicks and movements.\")\n        print(\"For example, to click at position (300, 200):\")\n\n        # Wait for the user to view the grid\n        print(\"\\nPress Enter to continue with a demonstration...\")\n        input()\n\n        # Demonstrate mouse movement to a grid position\n        print(\"Moving mouse to position (300, 200)...\")\n        computer.execute_mouse_move(\n            MouseMoveAction(\n                x=300, y=200, move_duration=1.0  # Move slowly so it's visible\n            )\n        )\n        time.sleep(1)\n\n        # Demonstrate clicking at a grid position\n        print(\"Clicking at position (300, 200)...\")\n        computer.execute_click(ClickAction(x=300, y=200, button=MouseButton.LEFT))\n\n        print(\"\\nExample completed successfully!\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"computer\" in locals():\n            computer.close()\n            print(\"Computer resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/automating_computer_interactions/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 7_automating_computer_interactions.py\n\n# Using Poetry\npoetry run python 7_automating_computer_interactions.py\n</code></pre>"},{"location":"examples/automating_computer_interactions/#expected-output","title":"Expected Output","text":"<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\7_automating_computer_interactions.py\", line 15, in &lt;module&gt;\n    from PIL import Image\nModuleNotFoundError: No module named 'PIL'\n</code></pre>"},{"location":"examples/automating_computer_interactions/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/automating_computer_interactions/#next-steps","title":"Next Steps","text":""},{"location":"examples/concepts/","title":"CommandLAB Concepts Example","text":""},{"location":"examples/concepts/#description","title":"Description","text":"<p>This example demonstrates basic concepts of CommandLAB, including: - Creating a computer instance - Taking a screenshot - Saving the screenshot to a file</p>"},{"location":"examples/concepts/#status","title":"Status","text":"<p>\u2705 Works perfectly</p>"},{"location":"examples/concepts/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Concepts Example\n\nThis example demonstrates basic concepts of CommandLAB, including:\n- Creating a computer instance\n- Taking a screenshot\n- Saving the screenshot to a file\n\nStatus: \u2705 Works perfectly\n- Successfully takes a screenshot and saves it to a file\n\"\"\"\n\nimport os\nimport base64\nfrom PIL import Image\nimport io\n\n# Import the local computer implementation\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nexcept ImportError:\n    print(\n        \"Error: LocalPynputComputer not found. Make sure CommandLAB is installed with the local extra:\"\n    )\n    print(\"pip install commandlab[local]\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a LocalPynputComputer instance...\")\n\n    try:\n        # Create a computer instance\n        computer = LocalPynputComputer()\n\n        print(\"Taking a screenshot...\")\n        # Take a screenshot\n        screenshot = computer.get_screenshot()\n\n        # The screenshot is returned as a base64-encoded string\n        print(f\"Screenshot obtained. Converting to image...\")\n\n        # Convert base64 to image\n        img_data = base64.b64decode(screenshot.screenshot)\n        img = Image.open(io.BytesIO(img_data))\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n\n        # Save the image\n        output_path = \"output/screenshot.png\"\n        img.save(output_path)\n\n        print(f\"Screenshot saved to {output_path}\")\n        print(f\"Image size: {img.width}x{img.height} pixels\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"computer\" in locals():\n            computer.close()\n            print(\"Computer resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/concepts/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 2_concepts.py\n\n# Using Poetry\npoetry run python 2_concepts.py\n</code></pre>"},{"location":"examples/concepts/#expected-output","title":"Expected Output","text":"<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\2_concepts.py\", line 16, in &lt;module&gt;\n    from PIL import Image\nModuleNotFoundError: No module named 'PIL'\n</code></pre>"},{"location":"examples/concepts/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/concepts/#next-steps","title":"Next Steps","text":""},{"location":"examples/document_editing/","title":"CommandLAB Document Editing Example","text":""},{"location":"examples/document_editing/#description","title":"Description","text":"<p>This example demonstrates how to use the screen parser to extract text from a screenshot, which can be useful for document editing and text extraction tasks.</p>"},{"location":"examples/document_editing/#status","title":"Status","text":"<p>\u2705 Works perfectly</p>"},{"location":"examples/document_editing/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Document Editing Example\n\nThis example demonstrates how to use the screen parser to extract text from a screenshot,\nwhich can be useful for document editing and text extraction tasks.\n\nStatus: \u2705 Works perfectly\n- Successfully extracts text from a screenshot and saves it to a file\n\"\"\"\n\nimport os\nimport time\nimport base64\nfrom PIL import Image\nimport io\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.processors.screen_parser.pytesseract_screen_parser import (\n        parse_screenshot,\n    )\n    from commandLAB.types import ClickAction, MouseButton, TypeAction\nexcept ImportError:\n    print(\n        \"Error: Required modules not found. Make sure CommandLAB is installed with the pytesseract extra:\"\n    )\n    print(\"pip install commandlab[local,pytesseract]\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a LocalPynputComputer instance...\")\n\n    try:\n        # Create a computer instance\n        computer = LocalPynputComputer()\n\n        print(\"Please open a text editor or document with some text visible.\")\n        print(\"This example will extract text from the screen.\")\n        print(\"Press Enter when ready...\")\n        input()\n\n        # Take a screenshot\n        print(\"Taking a screenshot...\")\n        screenshot = computer.get_screenshot()\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n\n        # Save the screenshot for reference\n        img_data = base64.b64decode(screenshot.screenshot)\n        img = Image.open(io.BytesIO(img_data))\n        screenshot_path = \"output/screenshot_for_ocr.png\"\n        img.save(screenshot_path)\n        print(f\"Screenshot saved to {screenshot_path}\")\n\n        # Parse the screenshot to extract text\n        print(\"Parsing screenshot to extract text...\")\n        try:\n            parsed_screenshot = parse_screenshot(screenshot.screenshot)\n\n            # Print the extracted text elements\n            print(\"\\nExtracted text elements:\")\n            for i, element in enumerate(parsed_screenshot.elements):\n                print(f\"Element {i+1}:\")\n                print(f\"  Text: {element.text}\")\n                print(f\"  Bounding Box: {element.bounding_box}\")\n\n            # Save the extracted text to a file\n            text_path = \"output/extracted_text.txt\"\n            with open(text_path, \"w\") as f:\n                for element in parsed_screenshot.elements:\n                    f.write(f\"{element.text}\\n\")\n\n            print(f\"\\nExtracted text saved to {text_path}\")\n\n            # Demonstrate clicking on a text element (if any were found)\n            if parsed_screenshot.elements:\n                element = parsed_screenshot.elements[0]\n                x = (element.bounding_box[0] + element.bounding_box[2]) // 2\n                y = (element.bounding_box[1] + element.bounding_box[3]) // 2\n\n                print(\n                    f\"\\nDemonstrating clicking on the first text element at position ({x}, {y})...\"\n                )\n                print(\"Press Enter to continue...\")\n                input()\n\n                # Click on the text element\n                computer.execute_click(ClickAction(x=x, y=y, button=MouseButton.LEFT))\n\n                # Type some text\n                time.sleep(0.5)\n                print(\"Typing text after clicking...\")\n                computer.execute_type(TypeAction(text=\" [CommandLAB was here] \"))\n\n        except Exception as e:\n            print(f\"Error parsing screenshot: {e}\")\n\n        print(\"\\nExample completed successfully!\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"computer\" in locals():\n            computer.close()\n            print(\"Computer resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/document_editing/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 8_document_editing.py\n\n# Using Poetry\npoetry run python 8_document_editing.py\n</code></pre>"},{"location":"examples/document_editing/#expected-output","title":"Expected Output","text":"<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\8_document_editing.py\", line 15, in &lt;module&gt;\n    from PIL import Image\nModuleNotFoundError: No module named 'PIL'\n</code></pre>"},{"location":"examples/document_editing/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/document_editing/#next-steps","title":"Next Steps","text":""},{"location":"examples/getting_started/","title":"CommandLAB Getting Started Example","text":""},{"location":"examples/getting_started/#description","title":"Description","text":"<p>This example demonstrates how to import the CommandLAB library and print its version.</p>"},{"location":"examples/getting_started/#status","title":"Status","text":"<p>\u2705 Works perfectly</p>"},{"location":"examples/getting_started/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Getting Started Example\n\nThis example demonstrates how to import the CommandLAB library and print its version.\n\nStatus: \u2705 Works perfectly\n- Correctly displays version information\n\"\"\"\n\nfrom commandLAB.version import __version__, get_package_version, get_container_version\n\n\ndef main():\n    print(f\"CommandLAB Version: {__version__}\")\n    print(f\"Package Version: {get_package_version()}\")\n    print(f\"Container Version: {get_container_version()}\")\n\n    print(\"\\nCommandLAB is a framework for automating and controlling computers.\")\n    print(\"This example demonstrates the basic import and version information.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/getting_started/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 1_getting_started.py\n\n# Using Poetry\npoetry run python 1_getting_started.py\n</code></pre>"},{"location":"examples/getting_started/#expected-output","title":"Expected Output","text":"<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\1_getting_started.py\", line 11, in &lt;module&gt;\n    from commandLAB.version import __version__, get_package_version, get_container_version\nModuleNotFoundError: No module named 'commandLAB'\n</code></pre>"},{"location":"examples/getting_started/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/getting_started/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_basic/","title":"CommandLAB Gym Basic Example","text":""},{"location":"examples/gym_basic/#description","title":"Description","text":"<p>This example demonstrates how to use the CommandLAB gym framework to create an environment, agent, and collect an episode. It shows the basic structure of a reinforcement learning setup with CommandLAB.</p>"},{"location":"examples/gym_basic/#status","title":"Status","text":"<p>Working but doesn't stop</p> <ul> <li>Successfully moves the mouse to the specified position (100, 100)</li> <li>Demonstrates basic gym framework functionality</li> <li>Test Date: 2024-07-12</li> </ul>"},{"location":"examples/gym_basic/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym Basic Example\n\nThis example demonstrates how to use the CommandLAB gym framework to create an environment,\nagent, and collect an episode. It shows the basic structure of a reinforcement learning\nsetup with CommandLAB.\n\nStatus: Working but doesn't stop\n- Successfully initializes the environment, agent, and driver\n- Successfully moves the mouse to the specified position (100, 100)\n- Demonstrates basic gym framework functionality\n- Test Date: 2024-07-12\n\"\"\"\n\nimport time\nimport os\nimport traceback\nimport random\nfrom typing import List, Optional\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.base_agent import BaseAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        ComputerAction,\n        ComputerObservation,\n        MouseMoveAction,\n    )\n    from commandLAB.gym.schema import Episode\n    from pydantic import Field\nexcept ImportError as e:\n    print(f\"Detailed import error: {e}\")\n    print(\"Traceback:\")\n    traceback.print_exc()\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    exit(1)\n\n\n# Create a simple mock agent for testing\nclass MockAgent(BaseAgent[ComputerObservation, ComputerAction]):\n    \"\"\"A simple mock agent that returns random actions for testing.\"\"\"\n\n    total_reward: float = Field(default=0.0)\n\n    def __init__(self):\n        super().__init__()\n\n    def reset(self) -&gt; None:\n        \"\"\"Reset the agent's internal state.\"\"\"\n        self.total_reward = 0.0\n\n    def act(self, observation: ComputerObservation) -&gt; ComputerAction:\n        \"\"\"Given an observation, determine the next action.\"\"\"\n        # Use a mouse move action that should work\n        return ComputerAction(\n            mouse_move=MouseMoveAction(x=100, y=100, move_duration=0.5)\n        )\n\n    def update(self, reward: float) -&gt; None:\n        \"\"\"Update the agent's internal state based on the reward.\"\"\"\n        self.total_reward += reward\n\n    def train(self, episodes: list[Episode]) -&gt; None:\n        \"\"\"Train the agent on an episode.\"\"\"\n        pass\n\n\ndef main():\n    print(\"CommandLAB Gym Basic Example\")\n    print(\"============================\")\n    print(\"This example demonstrates how to use the CommandLAB gym framework.\")\n    print(\"It will create an environment, agent, and collect an episode.\")\n    print()\n\n    try:\n        # Configure the environment with explicit LocalPynputComputer\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n            # You can add on_reset_python, on_start_python, etc. here\n        )\n\n        # Create the environment with an explicit computer instance\n        print(\"Creating the environment...\")\n        computer = LocalPynputComputer()\n        env = ComputerEnv(config, computer=computer)\n\n        # Enable logging of modality errors for debugging\n        from commandLAB.gym.environments.multimodal_env import MultiModalEnv\n        MultiModalEnv._LOG_MODALITY_ERRORS = True\n\n        # Create a mock agent instead of the NaiveComputerAgent\n        print(\"Creating the agent...\")\n        agent = MockAgent()\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Collect an episode\n        print(\"Collecting an episode...\")\n        print(\"This will take a screenshot and use the agent to decide on actions.\")\n        print(\"Press Ctrl+C to stop the episode collection.\")\n        print()\n        print(\"Starting in 1 second...\")\n        time.sleep(1)\n\n        # Collect the episode\n        episode = driver.collect_episode()\n\n        # Print episode statistics\n        print(\"\\nEpisode collection complete!\")\n        print(f\"Episode length: {episode.num_steps} steps\")\n        print(f\"Total reward: {sum(step.reward for step in episode)}\")\n\n        # Print the actions taken\n        print(\"\\nActions taken:\")\n        for i, step in enumerate(episode):\n            print(f\"Step {i+1}: {step.action}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEpisode collection interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n        traceback.print_exc()\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_basic/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 11_gym_basic.py\n\n# Using Poetry\npoetry run python 11_gym_basic.py\n</code></pre>"},{"location":"examples/gym_basic/#expected-output","title":"Expected Output","text":"<pre><code>Detailed import error: No module named 'commandLAB'\nTraceback:\nError: Required modules not found. Make sure CommandLAB is installed with the required extras:\npip install commandlab[local,gym]\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\11_gym_basic.py\", line 23, in &lt;module&gt;\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nModuleNotFoundError: No module named 'commandLAB'\n</code></pre>"},{"location":"examples/gym_basic/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_basic/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_custom_task/","title":"CommandLAB Gym Custom Task Example","text":""},{"location":"examples/gym_custom_task/#description","title":"Description","text":"<p>This example demonstrates how to create and use a custom task with the CommandLAB gym framework. It shows how to define task-specific goals, rewards, and evaluation criteria.</p>"},{"location":"examples/gym_custom_task/#status","title":"Status","text":"<p>Not tested</p> <ul> <li>Likely requires additional dependencies</li> <li>Test attempted: 2024-07-12</li> <li>Small negative reward for each step (encourages efficiency)</li> <li>Reward for opening the calculator</li> <li>Reward for performing the calculation</li> <li>Large reward for getting the correct result</li> <li>The task is completed (result found)</li> <li>The maximum number of steps is reached</li> </ul>"},{"location":"examples/gym_custom_task/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym Custom Task Example\n\nThis example demonstrates how to create and use a custom task with the CommandLAB gym framework.\nIt shows how to define task-specific goals, rewards, and evaluation criteria.\n\nStatus: Not tested\n- Requires modification to use a mock agent\n- Likely requires additional dependencies\n- Test attempted: 2024-07-12\n\"\"\"\n\nimport time\nimport os\nfrom typing import Dict, Any, List, Optional\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.gym.tasks.base import BaseTask\n    from commandLAB.gym.tasks.computer_task import ComputerTaskMixin\n    from commandLAB.gym.schema import Episode\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        KeyboardKeyPressAction,\n        ComputerAction,\n        ComputerObservation,\n    )\nexcept ImportError:\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    exit(1)\n\n\nclass CalculatorTask(ComputerTaskMixin):\n    \"\"\"\n    A task that requires the agent to open the calculator app and perform a calculation.\n    \"\"\"\n\n    def __init__(self, calculation: str, expected_result: str):\n        super().__init__()\n        self.description = f\"Open the calculator app and calculate {calculation}.\"\n        self.env_config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n        self.calculation = calculation\n        self.expected_result = expected_result\n\n    def evaluate(self, env: ComputerEnv, episode: Episode[ComputerObservation, ComputerAction]) -&gt; bool:\n        \"\"\"\n        Evaluate if the task was completed successfully.\n\n        Returns:\n            bool: True if the task was completed successfully, False otherwise.\n        \"\"\"\n        # Check if the calculator was opened\n        calculator_opened = False\n        calculation_performed = False\n\n        # Analyze the actions taken\n        for step in episode:\n            action = step.action\n\n            # Check if the calculator was opened\n            if action.command is not None:\n                cmd = action.command.command.lower()\n                if \"calc\" in cmd or \"calculator\" in cmd:\n                    calculator_opened = True\n\n            # Check if the calculation was performed\n            if action.type is not None and calculator_opened:\n                text = action.type.text\n                if self.calculation in text:\n                    calculation_performed = True\n\n        # Get the final state from the environment\n        if hasattr(env, \"result_found\") and env.result_found:\n            return True\n\n        return calculator_opened and calculation_performed\n\n\nclass CalculatorEnv(ComputerEnv):\n    \"\"\"Custom environment for calculator tasks.\"\"\"\n\n    def __init__(self, config: ComputerEnvConfig, calculation: str, expected_result: str):\n        super().__init__(config)\n        self.task_completed = False\n        self.steps_taken = 0\n        self.max_steps = 20  # Maximum number of steps before ending the episode\n        self.calculation = calculation\n        self.expected_result = expected_result\n        self.task_description = f\"Open the calculator app and calculate {calculation}.\"\n        self.calculator_opened = False\n        self.calculation_performed = False\n        self.result_found = False\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n\n    def get_reward(self, action: ComputerAction) -&gt; float:\n        \"\"\"\n        Define a reward function for calculator tasks.\n\n        Rewards:\n        - Small negative reward for each step (encourages efficiency)\n        - Reward for opening the calculator\n        - Reward for performing the calculation\n        - Large reward for getting the correct result\n        \"\"\"\n        # Small negative reward for each step to encourage efficiency\n        reward = -0.1\n\n        # Check if the action is executing a command (opening the calculator)\n        if action.command is not None and not self.calculator_opened:\n            cmd = action.command.command.lower()\n            if \"calc\" in cmd or \"calculator\" in cmd:\n                reward += 2.0\n                self.calculator_opened = True\n                print(\"Calculator opened! +2.0 reward\")\n\n        # Check if the action is typing the calculation\n        if action.type is not None and self.calculator_opened and not self.calculation_performed:\n            text = action.type.text\n            if self.calculation in text:\n                reward += 3.0\n                self.calculation_performed = True\n                print(f\"Calculation '{self.calculation}' performed! +3.0 reward\")\n\n        # Check if the action is pressing Enter or = to get the result\n        if self.calculation_performed and not self.result_found:\n            if (action.keyboard_key_press is not None and \n                (action.keyboard_key_press.key == KeyboardKey.ENTER or \n                 action.keyboard_key_press.key == \"=\")):\n                reward += 5.0\n                self.result_found = True\n                self.task_completed = True\n                print(\"Result found! +5.0 reward\")\n\n        # Increment step counter\n        self.steps_taken += 1\n\n        return reward\n\n    def get_done(self, action: ComputerAction) -&gt; bool:\n        \"\"\"\n        Determine if the episode is done.\n\n        The episode is done if:\n        - The task is completed (result found)\n        - The maximum number of steps is reached\n        \"\"\"\n        return self.task_completed or self.steps_taken &gt;= self.max_steps\n\n    def reset(self):\n        \"\"\"Reset the environment.\"\"\"\n        self.task_completed = False\n        self.steps_taken = 0\n        self.calculator_opened = False\n        self.calculation_performed = False\n        self.result_found = False\n        return super().reset()\n\n    def get_info(self) -&gt; Dict[str, Any]:\n        \"\"\"Get additional information about the environment state.\"\"\"\n        return {\n            \"task_completed\": self.task_completed,\n            \"steps_taken\": self.steps_taken,\n            \"calculator_opened\": self.calculator_opened,\n            \"calculation_performed\": self.calculation_performed,\n            \"result_found\": self.result_found,\n            \"task_description\": self.task_description,\n        }\n\n\ndef main():\n    print(\"CommandLAB Gym Custom Task Example\")\n    print(\"==================================\")\n    print(\"This example demonstrates how to create and use a custom task\")\n    print(\"with the CommandLAB gym framework.\")\n    print()\n\n    # Define the calculation task\n    calculation = \"2 + 2\"\n    expected_result = \"4\"\n\n    print(f\"Task: Open the calculator app and calculate {calculation}.\")\n    print(f\"Expected result: {expected_result}\")\n    print()\n\n    try:\n        # Create the task\n        print(\"Creating the calculator task...\")\n        task = CalculatorTask(calculation=calculation, expected_result=expected_result)\n\n        # Configure the environment\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n\n        # Create the custom calculator environment\n        print(\"Creating the calculator environment...\")\n        env = CalculatorEnv(config, calculation=calculation, expected_result=expected_result)\n\n        # Create an agent\n        print(\"Creating the agent...\")\n        # Note: This requires an OpenAI API key or other LLM provider\n        agent = NaiveComputerAgent(chat_model_options={\n            \"model_provider\": \"openai\",\n            \"model\": \"gpt-4-vision-preview\",\n            # Add your API key here if not set as environment variable\n            # \"api_key\": \"your-api-key\",\n        })\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Collect an episode\n        print(\"Collecting an episode...\")\n        print(\"This will take a screenshot and use the agent to decide on actions.\")\n        print(\"The agent will try to complete the calculator task.\")\n        print(\"Press Ctrl+C to stop the episode collection.\")\n        print()\n        print(\"Starting in 3 seconds...\")\n        time.sleep(3)\n\n        # Collect the episode\n        episode = driver.collect_episode()\n\n        # Evaluate the task\n        print(\"\\nEvaluating task completion...\")\n        task_success = task.evaluate(env, episode)\n\n        # Print episode statistics\n        print(\"\\nEpisode collection complete!\")\n        print(f\"Episode length: {episode.num_steps} steps\")\n        print(f\"Total reward: {sum(step.reward for step in episode)}\")\n        print(f\"Task completed: {env.task_completed}\")\n        print(f\"Task evaluation: {'Success' if task_success else 'Failure'}\")\n\n        # Print the actions taken\n        print(\"\\nActions taken:\")\n        for i, step in enumerate(episode):\n            print(f\"Step {i+1}: {step.action}\")\n            print(f\"  Reward: {step.reward}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEpisode collection interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_custom_task/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 15_gym_custom_task.py\n\n# Using Poetry\npoetry run python 15_gym_custom_task.py\n</code></pre>"},{"location":"examples/gym_custom_task/#expected-output","title":"Expected Output","text":"<pre><code>Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\npip install commandlab[local,gym]\n</code></pre>"},{"location":"examples/gym_custom_task/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_custom_task/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_multi_episode_training/","title":"CommandLAB Gym Multi-Episode Training Example","text":""},{"location":"examples/gym_multi_episode_training/#description","title":"Description","text":"<p>This example demonstrates how to train an agent over multiple episodes using the CommandLAB gym framework. It shows how to collect episodes, evaluate performance, and track training progress.</p>"},{"location":"examples/gym_multi_episode_training/#status","title":"Status","text":"<p>not tested</p>"},{"location":"examples/gym_multi_episode_training/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym Multi-Episode Training Example\n\nThis example demonstrates how to train an agent over multiple episodes using the CommandLAB gym framework.\nIt shows how to collect episodes, evaluate performance, and track training progress.\n\nStatus: not tested\n\"\"\"\n\nimport time\nimport os\nimport json\nimport pickle\nfrom typing import Dict, Any, List\nimport traceback\n\ntry:\n    import matplotlib.pyplot as plt\n    import numpy as np\nexcept ImportError:\n    print(\"Warning: matplotlib and numpy are required for plotting. Install with:\")\n    print(\"pip install matplotlib numpy\")\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.gym.trainer import OnlineTrainer\n    from commandLAB.gym.schema import Episode, Step\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        ComputerAction,\n    )\nexcept ImportError as e:\n    print(f\"Detailed import error: {e}\")\n    print(\"Traceback:\")\n    traceback.print_exc()\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    exit(1)\n\n\nclass SimpleTaskEnv(ComputerEnv):\n    \"\"\"Simple environment for training an agent on basic tasks.\"\"\"\n\n    def __init__(self, config: ComputerEnvConfig, computer=None):\n        super().__init__(config, computer=computer)\n        self.task_completed = False\n        self.steps_taken = 0\n        self.max_steps = 15  # Maximum number of steps before ending the episode\n        self.task_description = \"Open a text editor and type a simple message.\"\n        self.editor_opened = False\n        self.text_typed = False\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n        os.makedirs(\"output/training\", exist_ok=True)\n\n    def get_reward(self, action: ComputerAction) -&gt; float:\n        \"\"\"Define a reward function for the simple task.\"\"\"\n        # Small negative reward for each step to encourage efficiency\n        reward = -0.1\n\n        # Check if the action is executing a command (opening a text editor)\n        if action.command is not None and not self.editor_opened:\n            cmd = action.command.command.lower()\n            if \"notepad\" in cmd or \"gedit\" in cmd or \"textedit\" in cmd:\n                reward += 2.0\n                self.editor_opened = True\n                print(\"Text editor opened! +2.0 reward\")\n\n        # Check if the action is typing text\n        if action.type is not None and self.editor_opened and not self.text_typed:\n            if len(action.type.text) &gt; 5:  # Require a meaningful amount of text\n                reward += 3.0\n                self.text_typed = True\n                self.task_completed = True\n                print(\"Text typed! +3.0 reward\")\n\n        # Increment step counter\n        self.steps_taken += 1\n\n        return reward\n\n    def get_done(self, action: ComputerAction) -&gt; bool:\n        \"\"\"Determine if the episode is done.\"\"\"\n        return self.task_completed or self.steps_taken &gt;= self.max_steps\n\n    def reset(self):\n        \"\"\"Reset the environment.\"\"\"\n        self.task_completed = False\n        self.steps_taken = 0\n        self.editor_opened = False\n        self.text_typed = False\n        return super().reset()\n\n    def get_info(self) -&gt; Dict[str, Any]:\n        \"\"\"Get additional information about the environment state.\"\"\"\n        return {\n            \"task_completed\": self.task_completed,\n            \"steps_taken\": self.steps_taken,\n            \"editor_opened\": self.editor_opened,\n            \"text_typed\": self.text_typed,\n            \"task_description\": self.task_description,\n        }\n\n\nclass TrackingAgent(NaiveComputerAgent):\n    \"\"\"Agent that tracks training progress.\"\"\"\n\n    def __init__(self, chat_model_options: dict):\n        super().__init__(chat_model_options)\n        self.training_history = []\n        self.episode_rewards = []\n        self.completion_rate = []\n        self.episodes_seen = 0\n\n    def train(self, episodes: List[Episode]) -&gt; None:\n        \"\"\"Train the agent on a list of episodes.\"\"\"\n        for episode in episodes:\n            # In a real implementation, this would update the agent's model\n            # For this example, we just track statistics\n            total_reward = sum(step.reward for step in episode)\n            self.episode_rewards.append(total_reward)\n\n            # Check if the task was completed\n            last_info = episode[-1].info\n            task_completed = last_info.get(\"task_completed\", False)\n            self.completion_rate.append(1.0 if task_completed else 0.0)\n\n            self.episodes_seen += 1\n\n            # Add to training history\n            self.training_history.append({\n                \"episode\": self.episodes_seen,\n                \"total_reward\": total_reward,\n                \"steps\": episode.num_steps,\n                \"task_completed\": task_completed,\n            })\n\n    def save_history(self, path: str) -&gt; None:\n        \"\"\"Save the training history to a file.\"\"\"\n        # Save as JSON for easier inspection\n        with open(path, \"w\") as f:\n            json.dump({\n                \"training_history\": self.training_history,\n                \"episode_rewards\": self.episode_rewards,\n                \"completion_rate\": self.completion_rate,\n                \"episodes_seen\": self.episodes_seen,\n            }, f, indent=2)\n\n        print(f\"Training history saved to {path}\")\n\n    def plot_training_progress(self, save_path: str) -&gt; None:\n        \"\"\"Plot the training progress.\"\"\"\n        if not self.episode_rewards:\n            print(\"No training data to plot.\")\n            return\n\n        try:\n            # Create a figure with two subplots\n            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))\n\n            # Plot episode rewards\n            episodes = range(1, len(self.episode_rewards) + 1)\n            ax1.plot(episodes, self.episode_rewards, 'b-')\n            ax1.set_xlabel('Episode')\n            ax1.set_ylabel('Total Reward')\n            ax1.set_title('Episode Rewards')\n            ax1.grid(True)\n\n            # Plot completion rate (moving average)\n            window_size = min(10, len(self.completion_rate))\n            if window_size &gt; 0:\n                moving_avg = np.convolve(self.completion_rate, np.ones(window_size)/window_size, mode='valid')\n                ax2.plot(range(window_size, len(self.completion_rate) + 1), moving_avg, 'r-')\n                ax2.set_xlabel('Episode')\n                ax2.set_ylabel('Completion Rate (Moving Avg)')\n                ax2.set_title(f'Task Completion Rate (Window Size: {window_size})')\n                ax2.grid(True)\n                ax2.set_ylim([0, 1.1])\n\n            plt.tight_layout()\n            plt.savefig(save_path)\n            plt.close()\n\n            print(f\"Training progress plot saved to {save_path}\")\n        except Exception as e:\n            print(f\"Error plotting training progress: {e}\")\n            print(\"Make sure matplotlib and numpy are installed.\")\n\n\ndef main():\n    print(\"CommandLAB Gym Multi-Episode Training Example\")\n    print(\"============================================\")\n    print(\"This example demonstrates how to train an agent over multiple episodes\")\n    print(\"using the CommandLAB gym framework.\")\n    print()\n\n    try:\n        # Create a computer instance directly\n        print(\"Creating a computer instance...\")\n        computer = LocalPynputComputer()\n\n        # Configure the environment\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n\n        # Create the environment with the computer instance\n        print(\"Creating the environment...\")\n        env = SimpleTaskEnv(config, computer=computer)\n\n        # Create a tracking agent\n        print(\"Creating the tracking agent...\")\n        agent = TrackingAgent(chat_model_options={\n            \"model_provider\": \"openai\",\n            \"model\": \"gpt-4-vision-preview\",\n            # Add your API key here if not set as environment variable\n            # \"api_key\": \"your-api-key\",\n        })\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Create a trainer\n        print(\"Creating the trainer...\")\n        trainer = OnlineTrainer(driver=driver, agent=agent)\n\n        # Number of episodes to train for\n        num_episodes = 3  # Adjust as needed\n\n        print(f\"Training for {num_episodes} episodes...\")\n        print(\"Press Ctrl+C to stop training.\")\n        print()\n\n        try:\n            # Train the agent\n            episodes = trainer.train(num_episodes)\n\n            # Print training statistics\n            print(\"\\nTraining complete!\")\n            print(f\"Episodes trained: {len(episodes)}\")\n            print(f\"Average episode length: {sum(ep.num_steps for ep in episodes) / len(episodes):.2f} steps\")\n            print(f\"Average reward: {sum(agent.episode_rewards) / len(agent.episode_rewards):.2f}\")\n            print(f\"Completion rate: {sum(agent.completion_rate) / len(agent.completion_rate):.2%}\")\n\n            # Save the training history\n            history_path = \"output/training/training_history.json\"\n            agent.save_history(history_path)\n\n            # Plot training progress\n            plot_path = \"output/training/training_progress.png\"\n            agent.plot_training_progress(plot_path)\n\n        except KeyboardInterrupt:\n            print(\"\\nTraining interrupted by user.\")\n            if agent.episodes_seen &gt; 0:\n                # Save the training history\n                history_path = \"output/training/partial_training_history.json\"\n                agent.save_history(history_path)\n\n                # Plot training progress\n                plot_path = \"output/training/partial_training_progress.png\"\n                agent.plot_training_progress(plot_path)\n\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n        traceback.print_exc()\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_multi_episode_training/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 18_gym_multi_episode_training.py\n\n# Using Poetry\npoetry run python 18_gym_multi_episode_training.py\n</code></pre>"},{"location":"examples/gym_multi_episode_training/#expected-output","title":"Expected Output","text":"<pre><code>Warning: matplotlib and numpy are required for plotting. Install with:\npip install matplotlib numpy\nDetailed import error: No module named 'commandLAB'\nTraceback:\nError: Required modules not found. Make sure CommandLAB is installed with the required extras:\npip install commandlab[local,gym]\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\18_gym_multi_episode_training.py\", line 26, in &lt;module&gt;\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nModuleNotFoundError: No module named 'commandLAB'\n</code></pre>"},{"location":"examples/gym_multi_episode_training/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_multi_episode_training/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_react_agent/","title":"CommandLAB Gym React Agent Example","text":""},{"location":"examples/gym_react_agent/#description","title":"Description","text":"<p>This example demonstrates how to use the CommandLAB gym framework with the ReactComputerAgent. It shows how to create an environment and agent, and collect an episode using the ReAct framework.</p>"},{"location":"examples/gym_react_agent/#status","title":"Status","text":"<p>not tested</p>"},{"location":"examples/gym_react_agent/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym React Agent Example\n\nThis example demonstrates how to use the CommandLAB gym framework with the ReactComputerAgent.\nIt shows how to create an environment and agent, and collect an episode using the ReAct framework.\n\nStatus: not tested\n\"\"\"\n\nimport time\nimport os\nimport traceback\nfrom typing import Dict, Any\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.react_vision_language_computer_agent import ReactComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        ComputerAction,\n    )\nexcept ImportError as e:\n    print(f\"Detailed import error: {e}\")\n    print(\"Traceback:\")\n    traceback.print_exc()\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    exit(1)\n\n\nclass TextEditingTask(ComputerEnv):\n    \"\"\"Custom environment for text editing tasks.\"\"\"\n\n    def __init__(self, config: ComputerEnvConfig, computer=None):\n        super().__init__(config, computer=computer)\n        self.task_completed = False\n        self.steps_taken = 0\n        self.max_steps = 20  # Maximum number of steps before ending the episode\n        self.task_description = \"Open a text editor, type 'Hello from ReactAgent!', and save the file.\"\n        self.editor_opened = False\n        self.text_typed = False\n        self.file_saved = False\n\n    def get_reward(self, action: ComputerAction) -&gt; float:\n        \"\"\"Define a reward function for text editing tasks.\"\"\"\n        # Small negative reward for each step to encourage efficiency\n        reward = -0.1\n\n        # Check if the action is executing a command (opening a text editor)\n        if action.command is not None and not self.editor_opened:\n            cmd = action.command.command.lower()\n            if \"notepad\" in cmd or \"gedit\" in cmd or \"textedit\" in cmd:\n                reward += 2.0\n                self.editor_opened = True\n                print(\"Text editor opened! +2.0 reward\")\n\n        # Check if the action is typing text\n        if action.type is not None and self.editor_opened and not self.text_typed:\n            if \"Hello from ReactAgent!\" in action.type.text:\n                reward += 3.0\n                self.text_typed = True\n                print(\"Target text typed! +3.0 reward\")\n\n        # Check if the action is saving the file (Ctrl+S)\n        if action.keyboard_hotkey is not None and self.text_typed and not self.file_saved:\n            keys = action.keyboard_hotkey.keys\n            if KeyboardKey.CTRL in keys and KeyboardKey.S in keys:\n                reward += 5.0\n                self.file_saved = True\n                self.task_completed = True\n                print(\"File saved! +5.0 reward\")\n\n        # Increment step counter\n        self.steps_taken += 1\n\n        return reward\n\n    def get_done(self, action: ComputerAction) -&gt; bool:\n        \"\"\"Determine if the episode is done.\"\"\"\n        return self.task_completed or self.steps_taken &gt;= self.max_steps\n\n    def reset(self):\n        \"\"\"Reset the environment.\"\"\"\n        self.task_completed = False\n        self.steps_taken = 0\n        self.editor_opened = False\n        self.text_typed = False\n        self.file_saved = False\n        return super().reset()\n\n    def get_info(self) -&gt; Dict[str, Any]:\n        \"\"\"Get additional information about the environment state.\"\"\"\n        return {\n            \"task_completed\": self.task_completed,\n            \"steps_taken\": self.steps_taken,\n            \"editor_opened\": self.editor_opened,\n            \"text_typed\": self.text_typed,\n            \"file_saved\": self.file_saved,\n            \"task_description\": self.task_description,\n        }\n\n\ndef main():\n    print(\"CommandLAB Gym React Agent Example\")\n    print(\"==================================\")\n    print(\"This example demonstrates how to use the CommandLAB gym framework with the ReactComputerAgent.\")\n    print(\"It will create an environment and agent, and collect an episode using the ReAct framework.\")\n    print()\n\n    try:\n        # Create a computer instance directly\n        print(\"Creating a computer instance...\")\n        computer = LocalPynputComputer()\n\n        # Configure the environment\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n\n        # Create the environment with the computer instance\n        print(\"Creating the environment...\")\n        env = TextEditingTask(config, computer=computer)\n\n        # Create a React agent\n        print(\"Creating the React agent...\")\n        # Note: This requires a Hugging Face model\n        agent = ReactComputerAgent(\n            model=\"mistralai/Mistral-7B-Instruct-v0.2\",  # Use an appropriate model\n            device=\"cpu\"  # Use \"cuda\" if you have a GPU\n        )\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Collect an episode\n        print(\"Collecting an episode...\")\n        print(\"This will take a screenshot and use the agent to decide on actions.\")\n        print(\"Press Ctrl+C to stop the episode collection.\")\n        print()\n        print(\"Starting in 3 seconds...\")\n        time.sleep(3)\n\n        # Collect the episode\n        episode = driver.collect_episode()\n\n        # Print episode statistics\n        print(\"\\nEpisode collection complete!\")\n        print(f\"Episode length: {episode.num_steps} steps\")\n        print(f\"Total reward: {sum(step.reward for step in episode)}\")\n        print(f\"Task completed: {env.task_completed}\")\n\n        # Print the actions taken\n        print(\"\\nActions taken:\")\n        for i, step in enumerate(episode):\n            print(f\"Step {i+1}: {step.action}\")\n            print(f\"  Reward: {step.reward}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEpisode collection interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n        traceback.print_exc()\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_react_agent/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 17_gym_react_agent.py\n\n# Using Poetry\npoetry run python 17_gym_react_agent.py\n</code></pre>"},{"location":"examples/gym_react_agent/#expected-output","title":"Expected Output","text":"<pre><code>Detailed import error: No module named 'commandLAB'\nTraceback:\nError: Required modules not found. Make sure CommandLAB is installed with the required extras:\npip install commandlab[local,gym]\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\17_gym_react_agent.py\", line 17, in &lt;module&gt;\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nModuleNotFoundError: No module named 'commandLAB'\n</code></pre>"},{"location":"examples/gym_react_agent/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_react_agent/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_simple_agent/","title":"CommandLAB Gym Simple Agent Example","text":""},{"location":"examples/gym_simple_agent/#description","title":"Description","text":"<p>This example demonstrates how to use the CommandLAB gym framework with the built-in agents. It shows how to create a simple environment and agent, and collect an episode.</p>"},{"location":"examples/gym_simple_agent/#status","title":"Status","text":"<p>not tested</p>"},{"location":"examples/gym_simple_agent/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym Simple Agent Example\n\nThis example demonstrates how to use the CommandLAB gym framework with the built-in agents.\nIt shows how to create a simple environment and agent, and collect an episode.\n\nStatus: not tested\n\"\"\"\n\nimport time\nimport os\nimport traceback\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n    )\nexcept ImportError as e:\n    print(f\"Detailed import error: {e}\")\n    print(\"Traceback:\")\n    traceback.print_exc()\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    exit(1)\n\n\ndef main():\n    print(\"CommandLAB Gym Simple Agent Example\")\n    print(\"===================================\")\n    print(\"This example demonstrates how to use the CommandLAB gym framework with the built-in agents.\")\n    print(\"It will create a simple environment and agent, and collect an episode.\")\n    print()\n\n    try:\n        # Create a computer instance directly\n        print(\"Creating a computer instance...\")\n        computer = LocalPynputComputer()\n\n        # Configure the environment\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n\n        # Create the environment with the computer instance\n        print(\"Creating the environment...\")\n        env = ComputerEnv(config, computer=computer)\n\n        # Create an agent using the NaiveComputerAgent from the gym\n        print(\"Creating the agent...\")\n        # Note: This requires an OpenAI API key or other LLM provider\n        agent = NaiveComputerAgent(chat_model_options={\n            \"model_provider\": \"openai\",\n            \"model\": \"gpt-4-vision-preview\",\n            # Add your API key here if not set as environment variable\n            # \"api_key\": \"your-api-key\",\n        })\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Collect an episode\n        print(\"Collecting an episode...\")\n        print(\"This will take a screenshot and use the agent to decide on actions.\")\n        print(\"Press Ctrl+C to stop the episode collection.\")\n        print()\n        print(\"Starting in 3 seconds...\")\n        time.sleep(3)\n\n        # Collect the episode\n        episode = driver.collect_episode()\n\n        # Print episode statistics\n        print(\"\\nEpisode collection complete!\")\n        print(f\"Episode length: {episode.num_steps} steps\")\n        print(f\"Total reward: {sum(step.reward for step in episode)}\")\n\n        # Print the actions taken\n        print(\"\\nActions taken:\")\n        for i, step in enumerate(episode):\n            print(f\"Step {i+1}: {step.action}\")\n            print(f\"  Reward: {step.reward}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEpisode collection interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n        traceback.print_exc()\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_simple_agent/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 16_gym_simple_agent.py\n\n# Using Poetry\npoetry run python 16_gym_simple_agent.py\n</code></pre>"},{"location":"examples/gym_simple_agent/#expected-output","title":"Expected Output","text":"<pre><code>Detailed import error: No module named 'commandLAB'\nTraceback:\nError: Required modules not found. Make sure CommandLAB is installed with the required extras:\npip install commandlab[local,gym]\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\16_gym_simple_agent.py\", line 16, in &lt;module&gt;\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nModuleNotFoundError: No module named 'commandLAB'\n</code></pre>"},{"location":"examples/gym_simple_agent/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_simple_agent/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_text_editing/","title":"CommandLAB Gym Text Editing Example","text":""},{"location":"examples/gym_text_editing/#description","title":"Description","text":"<p>This example demonstrates how to use the CommandLAB gym framework to automate a text editing task. It creates a custom environment that rewards the agent for successfully completing text editing tasks.</p>"},{"location":"examples/gym_text_editing/#status","title":"Status","text":"<p>Not tested</p> <ul> <li>Script initializes but fails at agent creation without API key</li> <li>Test attempted: 2024-07-12</li> <li>Small positive reward for each action (encourages exploration)</li> <li>Large positive reward for completing the task</li> <li>Small negative reward for each step (encourages efficiency)</li> <li>The task is completed (file saved)</li> <li>The maximum number of steps is reached</li> </ul>"},{"location":"examples/gym_text_editing/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym Text Editing Example\n\nThis example demonstrates how to use the CommandLAB gym framework to automate a text editing task.\nIt creates a custom environment that rewards the agent for successfully completing text editing tasks.\n\nStatus: Not tested\n- Requires OpenAI API key for full testing\n- Script initializes but fails at agent creation without API key\n- Test attempted: 2024-07-12\n\"\"\"\n\nimport time\nimport os\nfrom typing import Dict, Any\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        KeyboardKeyPressAction,\n        ComputerAction,\n    )\nexcept ImportError:\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    exit(1)\n\n\nclass TextEditingEnv(ComputerEnv):\n    \"\"\"Custom environment for text editing tasks.\"\"\"\n\n    def __init__(self, config: ComputerEnvConfig):\n        super().__init__(config)\n        self.task_completed = False\n        self.steps_taken = 0\n        self.max_steps = 20  # Maximum number of steps before ending the episode\n        self.task_description = \"Open a text editor, type 'Hello, CommandLAB!', and save the file.\"\n\n    def get_reward(self, action: ComputerAction) -&gt; float:\n        \"\"\"\n        Define a reward function for text editing tasks.\n\n        Rewards:\n        - Small positive reward for each action (encourages exploration)\n        - Large positive reward for completing the task\n        - Small negative reward for each step (encourages efficiency)\n        \"\"\"\n        # Small negative reward for each step to encourage efficiency\n        reward = -0.1\n\n        # Check if the action is typing text\n        if action.type is not None:\n            # Reward for typing text\n            reward += 0.5\n\n            # Extra reward if the text contains the target phrase\n            if \"Hello, CommandLAB!\" in action.type.text:\n                reward += 2.0\n\n        # Reward for using keyboard shortcuts (like Ctrl+S for saving)\n        if action.keyboard_hotkey is not None:\n            keys = action.keyboard_hotkey.keys\n            if KeyboardKey.CTRL in keys and KeyboardKey.S in keys:\n                reward += 3.0\n                self.task_completed = True\n\n        # Increment step counter\n        self.steps_taken += 1\n\n        return reward\n\n    def get_done(self, action: ComputerAction) -&gt; bool:\n        \"\"\"\n        Determine if the episode is done.\n\n        The episode is done if:\n        - The task is completed (file saved)\n        - The maximum number of steps is reached\n        \"\"\"\n        return self.task_completed or self.steps_taken &gt;= self.max_steps\n\n    def reset(self):\n        \"\"\"Reset the environment.\"\"\"\n        self.task_completed = False\n        self.steps_taken = 0\n        return super().reset()\n\n    def get_info(self) -&gt; Dict[str, Any]:\n        \"\"\"Get additional information about the environment state.\"\"\"\n        return {\n            \"task_completed\": self.task_completed,\n            \"steps_taken\": self.steps_taken,\n            \"task_description\": self.task_description,\n        }\n\n\ndef main():\n    print(\"CommandLAB Gym Text Editing Example\")\n    print(\"===================================\")\n    print(\"This example demonstrates how to use the CommandLAB gym framework\")\n    print(\"to automate a text editing task.\")\n    print()\n    print(\"Task: Open a text editor, type 'Hello, CommandLAB!', and save the file.\")\n    print()\n\n    try:\n        # Configure the environment\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n\n        # Create the custom text editing environment\n        print(\"Creating the text editing environment...\")\n        env = TextEditingEnv(config)\n\n        # Create an agent\n        print(\"Creating the agent...\")\n        # Note: This requires an OpenAI API key or other LLM provider\n        agent = NaiveComputerAgent(chat_model_options={\n            \"model_provider\": \"openai\",\n            \"model\": \"gpt-4-vision-preview\",\n            # Add your API key here if not set as environment variable\n            # \"api_key\": \"your-api-key\",\n        })\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Collect an episode\n        print(\"Collecting an episode...\")\n        print(\"This will take a screenshot and use the agent to decide on actions.\")\n        print(\"The agent will try to complete the text editing task.\")\n        print(\"Press Ctrl+C to stop the episode collection.\")\n        print()\n        print(\"Starting in 1 second...\")\n        time.sleep(1)\n\n        # Open a text editor before starting the episode\n        print(\"Opening a text editor...\")\n        if os.name == \"nt\":  # Windows\n            env._computer.execute_command(CommandAction(command=\"notepad\", timeout=5))\n        elif os.uname().sysname == \"Darwin\":  # macOS\n            env._computer.execute_command(CommandAction(command=\"open -a TextEdit\", timeout=5))\n        else:  # Linux\n            env._computer.execute_command(CommandAction(command=\"gedit\", timeout=5))\n\n        time.sleep(2)  # Wait for the editor to open\n\n        # Collect the episode\n        episode = driver.collect_episode()\n\n        # Print episode statistics\n        print(\"\\nEpisode collection complete!\")\n        print(f\"Episode length: {episode.num_steps} steps\")\n        print(f\"Total reward: {sum(step.reward for step in episode)}\")\n        print(f\"Task completed: {env.task_completed}\")\n\n        # Print the actions taken\n        print(\"\\nActions taken:\")\n        for i, step in enumerate(episode):\n            print(f\"Step {i+1}: {step.action}\")\n            print(f\"  Reward: {step.reward}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEpisode collection interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_text_editing/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 12_gym_text_editing.py\n\n# Using Poetry\npoetry run python 12_gym_text_editing.py\n</code></pre>"},{"location":"examples/gym_text_editing/#expected-output","title":"Expected Output","text":"<pre><code>Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\npip install commandlab[local,gym]\n</code></pre>"},{"location":"examples/gym_text_editing/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_text_editing/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_training/","title":"CommandLAB Gym Training Example","text":""},{"location":"examples/gym_training/#description","title":"Description","text":"<p>This example demonstrates how to use the CommandLAB gym framework to train an agent over multiple episodes. It shows how to collect episodes, evaluate performance, and save/load trained agents.</p>"},{"location":"examples/gym_training/#status","title":"Status","text":"<p>Not tested</p> <ul> <li>Modified to use a mock agent but still needs dependencies</li> <li>Test attempted: 2024-07-12</li> </ul>"},{"location":"examples/gym_training/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym Training Example\n\nThis example demonstrates how to use the CommandLAB gym framework to train an agent\nover multiple episodes. It shows how to collect episodes, evaluate performance,\nand save/load trained agents.\n\nStatus: Not tested\n- Requires additional dependencies (matplotlib)\n- Modified to use a mock agent but still needs dependencies\n- Test attempted: 2024-07-12\n\"\"\"\n\nimport time\nimport os\nimport json\nimport pickle\nimport traceback\nfrom typing import Dict, Any, List\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.gym.trainer import OnlineTrainer\n    from commandLAB.gym.schema import Episode, Step\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        ComputerAction,\n        MouseMoveAction,\n        MouseClickAction,\n        MouseButton,\n    )\nexcept ImportError:\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    print(\"pip install matplotlib numpy\")  # For plotting\n    exit(1)\n\n\nclass SimpleTaskEnv(ComputerEnv):\n    \"\"\"Simple environment for training an agent on basic tasks.\"\"\"\n\n    def __init__(self, config: ComputerEnvConfig):\n        super().__init__(config)\n        self.task_completed = False\n        self.steps_taken = 0\n        self.max_steps = 15  # Maximum number of steps before ending the episode\n        self.task_description = \"Open a text editor and type a simple message.\"\n        self.editor_opened = False\n        self.text_typed = False\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n        os.makedirs(\"output/training\", exist_ok=True)\n\n    def get_reward(self, action: ComputerAction) -&gt; float:\n        \"\"\"Define a reward function for the simple task.\"\"\"\n        # Small negative reward for each step to encourage efficiency\n        reward = -0.1\n\n        # Check if the action is executing a command (opening a text editor)\n        if action.command is not None and not self.editor_opened:\n            if \"notepad\" in action.command.command.lower() or \"gedit\" in action.command.command.lower():\n                reward += 2.0\n                self.editor_opened = True\n                print(\"Text editor opened! +2.0 reward\")\n\n        # Check if the action is typing text\n        if action.type is not None and self.editor_opened and not self.text_typed:\n            if len(action.type.text) &gt; 5:  # Require a meaningful amount of text\n                reward += 3.0\n                self.text_typed = True\n                self.task_completed = True\n                print(\"Text typed! +3.0 reward\")\n\n        # Increment step counter\n        self.steps_taken += 1\n\n        return reward\n\n    def get_done(self, action: ComputerAction) -&gt; bool:\n        \"\"\"Determine if the episode is done.\"\"\"\n        return self.task_completed or self.steps_taken &gt;= self.max_steps\n\n    def reset(self):\n        \"\"\"Reset the environment.\"\"\"\n        self.task_completed = False\n        self.steps_taken = 0\n        self.editor_opened = False\n        self.text_typed = False\n        return super().reset()\n\n    def get_info(self) -&gt; Dict[str, Any]:\n        \"\"\"Get additional information about the environment state.\"\"\"\n        return {\n            \"task_completed\": self.task_completed,\n            \"steps_taken\": self.steps_taken,\n            \"editor_opened\": self.editor_opened,\n            \"text_typed\": self.text_typed,\n            \"task_description\": self.task_description,\n        }\n\n\n# Create a simple mock agent that doesn't require OpenAI API\nclass SimpleMockTrainableAgent(NaiveComputerAgent):\n    \"\"\"A simple mock trainable agent that doesn't require OpenAI API.\"\"\"\n\n    def __init__(self):\n        # Initialize with dummy chat_model_options\n        super().__init__(chat_model_options={\n            \"model_provider\": \"openai\",  # Required by get_chat_model\n            \"model\": \"gpt-4o\",  # Required by ChatOpenAI\n            \"api_key\": \"dummy-api-key\"  # Dummy API key\n        })\n        # Override the chat_model and str_output_parser to avoid API calls\n        self.chat_model = None\n        self.str_output_parser = None\n\n        # Training metrics\n        self.training_history = {\n            \"episode_rewards\": [],\n            \"episode_lengths\": [],\n            \"task_completion_rate\": []\n        }\n        self.steps_taken = 0\n\n    def act(self, observation: ComputerObservation) -&gt; ComputerAction:\n        \"\"\"Given an observation, determine the next action.\"\"\"\n        # Simulate text editing by moving the mouse and typing\n        if self.steps_taken == 0:\n            # First action: Move mouse to text area\n            return ComputerAction(\n                mouse_move=MouseMoveAction(x=300, y=300, move_duration=0.5)\n            )\n        elif self.steps_taken == 1:\n            # Second action: Click on text area\n            return ComputerAction(\n                mouse_click=MouseClickAction(\n                    x=300, y=300, \n                    button=MouseButton.LEFT,\n                    move_duration=0.5\n                )\n            )\n        elif self.steps_taken == 2:\n            # Third action: Type some text\n            return ComputerAction(\n                type=TypeAction(text=\"Hello from training agent!\")\n            )\n        else:\n            # Default action: Move mouse around\n            return ComputerAction(\n                mouse_move=MouseMoveAction(x=400, y=300, move_duration=0.5)\n            )\n\n    def update(self, reward: float) -&gt; None:\n        \"\"\"Update the agent's internal state based on the reward.\"\"\"\n        if not hasattr(self, 'steps_taken'):\n            self.steps_taken = 0\n        self.steps_taken += 1\n\n    def reset(self) -&gt; None:\n        \"\"\"Reset the agent's internal state.\"\"\"\n        self.steps_taken = 0\n\n    def train(self, episodes: List[Episode]) -&gt; None:\n        \"\"\"Train the agent on episodes.\"\"\"\n        print(f\"Training on {len(episodes)} episodes...\")\n\n        # Extract metrics from episodes\n        total_reward = sum(sum(step.reward for step in episode) for episode in episodes)\n        avg_episode_length = sum(len(episode) for episode in episodes) / len(episodes)\n\n        # Update training history\n        self.training_history[\"episode_rewards\"].append(total_reward / len(episodes))\n        self.training_history[\"episode_lengths\"].append(avg_episode_length)\n\n        # Calculate task completion rate\n        completion_rate = sum(1 for episode in episodes if any(step.info.get(\"task_completed\", False) for step in episode)) / len(episodes)\n        self.training_history[\"task_completion_rate\"].append(completion_rate)\n\n        print(f\"Average reward: {total_reward / len(episodes):.2f}\")\n        print(f\"Average episode length: {avg_episode_length:.2f}\")\n        print(f\"Task completion rate: {completion_rate:.2f}\")\n\n    def save(self, path: str) -&gt; None:\n        \"\"\"Save the agent's training history.\"\"\"\n        os.makedirs(os.path.dirname(path), exist_ok=True)\n        with open(path, \"wb\") as f:\n            pickle.dump(self.training_history, f)\n        print(f\"Agent saved to {path}\")\n\n    def load(self, path: str) -&gt; None:\n        \"\"\"Load the agent's training history.\"\"\"\n        with open(path, \"rb\") as f:\n            self.training_history = pickle.load(f)\n        print(f\"Agent loaded from {path}\")\n\n    def plot_training_progress(self, save_path: str) -&gt; None:\n        \"\"\"Plot the agent's training progress.\"\"\"\n        if not self.training_history[\"episode_rewards\"]:\n            print(\"No training history to plot.\")\n            return\n\n        fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 15))\n\n        # Plot episode rewards\n        ax1.plot(self.training_history[\"episode_rewards\"])\n        ax1.set_title(\"Average Episode Reward\")\n        ax1.set_xlabel(\"Training Iteration\")\n        ax1.set_ylabel(\"Reward\")\n\n        # Plot episode lengths\n        ax2.plot(self.training_history[\"episode_lengths\"])\n        ax2.set_title(\"Average Episode Length\")\n        ax2.set_xlabel(\"Training Iteration\")\n        ax2.set_ylabel(\"Steps\")\n\n        # Plot task completion rate\n        ax3.plot(self.training_history[\"task_completion_rate\"])\n        ax3.set_title(\"Task Completion Rate\")\n        ax3.set_xlabel(\"Training Iteration\")\n        ax3.set_ylabel(\"Completion Rate\")\n\n        plt.tight_layout()\n        plt.savefig(save_path)\n        print(f\"Training progress plot saved to {save_path}\")\n\n\ndef main():\n    print(\"CommandLAB Gym Training Example\")\n    print(\"===============================\")\n    print(\"This example demonstrates how to use the CommandLAB gym framework\")\n    print(\"to train an agent over multiple episodes.\")\n    print()\n\n    try:\n        # Configure the environment\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n\n        # Create the training environment\n        print(\"Creating the training environment...\")\n        env = SimpleTaskEnv(config)\n\n        # Enable logging of modality errors for debugging\n        from commandLAB.gym.environments.multimodal_env import MultiModalEnv\n        MultiModalEnv._LOG_MODALITY_ERRORS = True\n\n        # Create a mock trainable agent\n        print(\"Creating the trainable agent...\")\n        agent = SimpleMockTrainableAgent()\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Create a trainer\n        print(\"Creating the trainer...\")\n        trainer = OnlineTrainer(driver=driver, agent=agent)\n\n        # Number of episodes to train for\n        num_episodes = 3  # Adjust as needed\n\n        print(f\"Training for {num_episodes} episodes...\")\n        print(\"Press Ctrl+C to stop training.\")\n        print()\n        print(\"Starting in 1 second...\")\n        time.sleep(1)\n\n        try:\n            # Train the agent\n            episodes = trainer.train(num_episodes)\n\n            # Print training statistics\n            print(\"\\nTraining complete!\")\n            print(f\"Episodes trained: {len(episodes)}\")\n            print(f\"Average episode length: {sum(ep.num_steps for ep in episodes) / len(episodes):.2f} steps\")\n            print(f\"Average reward: {sum(agent.episode_rewards) / len(agent.episode_rewards):.2f}\")\n            print(f\"Completion rate: {sum(agent.completion_rate) / len(agent.completion_rate):.2%}\")\n\n            # Save the trained agent\n            agent_path = \"output/training/trained_agent.pkl\"\n            agent.save(agent_path)\n            print(f\"Trained agent saved to {agent_path}\")\n\n            # Plot training progress\n            plot_path = \"output/training/training_progress.png\"\n            agent.plot_training_progress(plot_path)\n\n        except KeyboardInterrupt:\n            print(\"\\nTraining interrupted by user.\")\n            if agent.episodes_seen &gt; 0:\n                # Save the partially trained agent\n                agent_path = \"output/training/partial_trained_agent.pkl\"\n                agent.save(agent_path)\n                print(f\"Partially trained agent saved to {agent_path}\")\n\n                # Plot training progress\n                plot_path = \"output/training/partial_training_progress.png\"\n                agent.plot_training_progress(plot_path)\n\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_training/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 14_gym_training.py\n\n# Using Poetry\npoetry run python 14_gym_training.py\n</code></pre>"},{"location":"examples/gym_training/#expected-output","title":"Expected Output","text":"<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\14_gym_training.py\", line 21, in &lt;module&gt;\n    import matplotlib.pyplot as plt\nModuleNotFoundError: No module named 'matplotlib'\n</code></pre>"},{"location":"examples/gym_training/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_training/#next-steps","title":"Next Steps","text":""},{"location":"examples/gym_web_browsing/","title":"CommandLAB Gym Web Browsing Example","text":""},{"location":"examples/gym_web_browsing/#description","title":"Description","text":"<p>This example demonstrates how to use the CommandLAB gym framework to automate a web browsing task. It creates a custom environment that rewards the agent for successfully completing web browsing tasks.</p>"},{"location":"examples/gym_web_browsing/#status","title":"Status","text":"<p>Not tested</p> <ul> <li>Modified to use a mock agent but still needs dependencies</li> <li>Test attempted: 2024-07-12</li> <li>Small negative reward for each step (encourages efficiency)</li> <li>Reward for opening a browser</li> <li>Reward for navigating to the target site</li> <li>Large reward for finding the target element</li> <li>The task is completed (target found)</li> <li>The maximum number of steps is reached</li> </ul>"},{"location":"examples/gym_web_browsing/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Gym Web Browsing Example\n\nThis example demonstrates how to use the CommandLAB gym framework to automate a web browsing task.\nIt creates a custom environment that rewards the agent for successfully completing web browsing tasks.\n\nStatus: Not tested\n- Requires additional dependencies (pytesseract)\n- Modified to use a mock agent but still needs dependencies\n- Test attempted: 2024-07-12\n\"\"\"\n\nimport time\nimport os\nimport base64\nimport io\nimport traceback\nfrom typing import Dict, Any\nfrom PIL import Image\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        KeyboardKeyPressAction,\n        ComputerAction,\n        ClickAction,\n        MouseMoveAction,\n        MouseClickAction,\n        MouseButton,\n    )\n    from commandLAB.processors.screen_parser.pytesseract_screen_parser import parse_screenshot\nexcept ImportError:\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym,pytesseract]\")\n    exit(1)\n\n\nclass WebBrowsingEnv(ComputerEnv):\n    \"\"\"Custom environment for web browsing tasks.\"\"\"\n\n    def __init__(self, config: ComputerEnvConfig):\n        super().__init__(config)\n        self.task_completed = False\n        self.steps_taken = 0\n        self.max_steps = 30  # Maximum number of steps before ending the episode\n        self.task_description = \"Open a web browser, navigate to example.com, and find the 'More information' link.\"\n        self.browser_opened = False\n        self.navigated_to_site = False\n        self.found_target = False\n        self.target_text = \"More information\"\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n\n    def get_reward(self, action: ComputerAction) -&gt; float:\n        \"\"\"\n        Define a reward function for web browsing tasks.\n\n        Rewards:\n        - Small negative reward for each step (encourages efficiency)\n        - Reward for opening a browser\n        - Reward for navigating to the target site\n        - Large reward for finding the target element\n        \"\"\"\n        # Small negative reward for each step to encourage efficiency\n        reward = -0.1\n\n        # Check if the action is executing a command (opening a browser)\n        if action.command is not None and not self.browser_opened:\n            if \"chrome\" in action.command.command.lower() or \"firefox\" in action.command.command.lower():\n                reward += 2.0\n                self.browser_opened = True\n                print(\"Browser opened! +2.0 reward\")\n\n        # Check if the action is typing a URL\n        if action.type is not None and not self.navigated_to_site:\n            if \"example.com\" in action.type.text:\n                reward += 3.0\n                self.navigated_to_site = True\n                print(\"Navigated to example.com! +3.0 reward\")\n\n        # Check if the target text is visible on the screen\n        if not self.found_target and self.navigated_to_site:\n            # Get the screenshot\n            screenshot = self._computer.get_screenshot()\n\n            try:\n                # Parse the screenshot to extract text\n                parsed_screenshot = parse_screenshot(screenshot.screenshot)\n\n                # Check if the target text is in any of the extracted elements\n                for element in parsed_screenshot.elements:\n                    if self.target_text.lower() in element.text.lower():\n                        reward += 5.0\n                        self.found_target = True\n                        self.task_completed = True\n                        print(f\"Found target text '{self.target_text}'! +5.0 reward\")\n\n                        # Save the screenshot with the target highlighted\n                        img_data = base64.b64decode(screenshot.screenshot)\n                        img = Image.open(io.BytesIO(img_data))\n                        screenshot_path = \"output/web_target_found.png\"\n                        img.save(screenshot_path)\n                        print(f\"Screenshot saved to {screenshot_path}\")\n\n                        break\n            except Exception as e:\n                print(f\"Error parsing screenshot: {e}\")\n\n        # Increment step counter\n        self.steps_taken += 1\n\n        return reward\n\n    def get_done(self, action: ComputerAction) -&gt; bool:\n        \"\"\"\n        Determine if the episode is done.\n\n        The episode is done if:\n        - The task is completed (target found)\n        - The maximum number of steps is reached\n        \"\"\"\n        return self.task_completed or self.steps_taken &gt;= self.max_steps\n\n    def reset(self):\n        \"\"\"Reset the environment.\"\"\"\n        self.task_completed = False\n        self.steps_taken = 0\n        self.browser_opened = False\n        self.navigated_to_site = False\n        self.found_target = False\n        return super().reset()\n\n    def get_info(self) -&gt; Dict[str, Any]:\n        \"\"\"Get additional information about the environment state.\"\"\"\n        return {\n            \"task_completed\": self.task_completed,\n            \"steps_taken\": self.steps_taken,\n            \"browser_opened\": self.browser_opened,\n            \"navigated_to_site\": self.navigated_to_site,\n            \"found_target\": self.found_target,\n            \"task_description\": self.task_description,\n        }\n\n\n# Create a simple mock agent that doesn't require OpenAI API\nclass SimpleMockAgent(NaiveComputerAgent):\n    \"\"\"A simple mock agent that doesn't require OpenAI API.\"\"\"\n\n    def __init__(self):\n        # Initialize with dummy chat_model_options\n        super().__init__(chat_model_options={\n            \"model_provider\": \"openai\",  # Required by get_chat_model\n            \"model\": \"gpt-4o\",  # Required by ChatOpenAI\n            \"api_key\": \"dummy-api-key\"  # Dummy API key\n        })\n        # Override the chat_model and str_output_parser to avoid API calls\n        self.chat_model = None\n        self.str_output_parser = None\n\n    def act(self, observation: ComputerObservation) -&gt; ComputerAction:\n        \"\"\"Given an observation, determine the next action.\"\"\"\n        # Simulate web browsing by moving the mouse and typing a URL\n        if self.steps_taken == 0:\n            # First action: Move mouse to address bar area\n            return ComputerAction(\n                mouse_move=MouseMoveAction(x=300, y=50, move_duration=0.5)\n            )\n        elif self.steps_taken == 1:\n            # Second action: Click on address bar\n            return ComputerAction(\n                mouse_click=MouseClickAction(\n                    x=300, y=50, \n                    button=MouseButton.LEFT,\n                    move_duration=0.5\n                )\n            )\n        elif self.steps_taken == 2:\n            # Third action: Type a URL\n            return ComputerAction(\n                type=TypeAction(text=\"example.com\")\n            )\n        else:\n            # Default action: Move mouse around\n            return ComputerAction(\n                mouse_move=MouseMoveAction(x=400, y=300, move_duration=0.5)\n            )\n\n    def update(self, reward: float) -&gt; None:\n        \"\"\"Update the agent's internal state based on the reward.\"\"\"\n        if not hasattr(self, 'steps_taken'):\n            self.steps_taken = 0\n        self.steps_taken += 1\n\n    def reset(self) -&gt; None:\n        \"\"\"Reset the agent's internal state.\"\"\"\n        self.steps_taken = 0\n\n\ndef main():\n    print(\"CommandLAB Gym Web Browsing Example\")\n    print(\"===================================\")\n    print(\"This example demonstrates how to use the CommandLAB gym framework\")\n    print(\"to automate a web browsing task.\")\n    print()\n    print(\"Task: Open a web browser, navigate to example.com, and find the 'More information' link.\")\n    print()\n\n    try:\n        # Configure the environment\n        print(\"Configuring the environment...\")\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n\n        # Create the custom web browsing environment\n        print(\"Creating the web browsing environment...\")\n        env = WebBrowsingEnv(config)\n\n        # Enable logging of modality errors for debugging\n        from commandLAB.gym.environments.multimodal_env import MultiModalEnv\n        MultiModalEnv._LOG_MODALITY_ERRORS = True\n\n        # Create a mock agent instead of the NaiveComputerAgent\n        print(\"Creating the agent...\")\n        agent = SimpleMockAgent()\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Collect an episode\n        print(\"Collecting an episode...\")\n        print(\"This will take a screenshot and use the agent to decide on actions.\")\n        print(\"Press Ctrl+C to stop the episode collection.\")\n        print()\n        print(\"Starting in 1 second...\")\n        time.sleep(1)\n\n        # Collect the episode\n        episode = driver.collect_episode()\n\n        # Print episode statistics\n        print(\"\\nEpisode collection complete!\")\n        print(f\"Episode length: {episode.num_steps} steps\")\n        print(f\"Total reward: {sum(step.reward for step in episode)}\")\n        print(f\"Task completed: {env.task_completed}\")\n        print(f\"Browser opened: {env.browser_opened}\")\n        print(f\"Navigated to site: {env.navigated_to_site}\")\n        print(f\"Found target: {env.found_target}\")\n\n        # Print the actions taken\n        print(\"\\nActions taken:\")\n        for i, step in enumerate(episode):\n            print(f\"Step {i+1}: {step.action}\")\n            print(f\"  Reward: {step.reward}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEpisode collection interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/gym_web_browsing/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 13_gym_web_browsing.py\n\n# Using Poetry\npoetry run python 13_gym_web_browsing.py\n</code></pre>"},{"location":"examples/gym_web_browsing/#expected-output","title":"Expected Output","text":"<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\13_gym_web_browsing.py\", line 20, in &lt;module&gt;\n    from PIL import Image\nModuleNotFoundError: No module named 'PIL'\n</code></pre>"},{"location":"examples/gym_web_browsing/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/gym_web_browsing/#next-steps","title":"Next Steps","text":""},{"location":"examples/programming/","title":"CommandLAB Programming Example","text":""},{"location":"examples/programming/#description","title":"Description","text":"<p>This example demonstrates how to use CommandLAB for programming tasks, such as opening a code editor, writing code, and running it.</p>"},{"location":"examples/programming/#status","title":"Status","text":"<p>\u26a0\ufe0f Works with limitations</p> <ul> <li>Encounters an error when trying to edit the script</li> <li>The script itself works correctly when run directly</li> </ul>"},{"location":"examples/programming/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Programming Example\n\nThis example demonstrates how to use CommandLAB for programming tasks,\nsuch as opening a code editor, writing code, and running it.\n\nStatus: \u26a0\ufe0f Works with limitations\n- Successfully creates a Python script\n- Encounters an error when trying to edit the script\n- The script itself works correctly when run directly\n\"\"\"\n\nimport time\nimport os\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKeyPressAction,\n        KeyboardKey,\n        ClickAction,\n        MouseButton,\n    )\nexcept ImportError:\n    print(\n        \"Error: Required modules not found. Make sure CommandLAB is installed with the local extra:\"\n    )\n    print(\"pip install commandlab[local]\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a LocalPynputComputer instance...\")\n\n    try:\n        # Create a computer instance\n        computer = LocalPynputComputer()\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n\n        # Create a simple Python script file\n        script_path = \"output/hello_world.py\"\n        with open(script_path, \"w\") as f:\n            f.write(\n                \"\"\"#!/usr/bin/env python3\n# This script was created by CommandLAB\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\ndef main():\n    print(greet(\"World\"))\n    print(\"This script was created and run using CommandLAB automation.\")\n\nif __name__ == \"__main__\":\n    main()\n\"\"\"\n            )\n\n        print(f\"Created Python script at {script_path}\")\n\n        # Open a code editor or notepad\n        print(\"Opening a text editor...\")\n        if os.name == \"nt\":  # Windows\n            editor_cmd = \"notepad\"\n        elif os.uname().sysname == \"Darwin\":  # macOS\n            editor_cmd = \"open -a TextEdit\"\n        else:  # Linux\n            editor_cmd = \"gedit\"\n\n        result = computer.execute_command(\n            CommandAction(command=f\"{editor_cmd} {script_path}\", timeout=10)\n        )\n\n        print(f\"Editor launch {'succeeded' if result else 'failed'}\")\n        print(\"Waiting for the editor to open...\")\n        time.sleep(3)\n\n        # Add a new function to the script\n        print(\"Adding a new function to the script...\")\n\n        # Press Ctrl+End to go to the end of the file\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.END])\n        )\n        time.sleep(0.5)\n\n        # Add a new line before the end\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.UP, duration=0.1)\n        )\n        time.sleep(0.5)\n\n        # Type the new function\n        computer.execute_type(\n            TypeAction(\n                text=\"\"\"\ndef calculate_sum(a, b):\n    return a + b\n\n\"\"\"\n            )\n        )\n        time.sleep(1)\n\n        # Modify the main function to use the new function\n        # First, find the main function\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.HOME])\n        )\n        time.sleep(0.5)\n\n        # Search for \"def main\"\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.F])\n        )\n        time.sleep(0.5)\n\n        computer.execute_type(TypeAction(text=\"def main\"))\n        time.sleep(0.5)\n\n        # Press Enter to search\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.ENTER, duration=0.1)\n        )\n        time.sleep(0.5)\n\n        # Close the search dialog if it's still open\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.ESCAPE, duration=0.1)\n        )\n        time.sleep(0.5)\n\n        # Move to the end of the main function\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.DOWN, duration=0.1)\n        )\n        time.sleep(0.1)\n\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.DOWN, duration=0.1)\n        )\n        time.sleep(0.1)\n\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.END, duration=0.1)\n        )\n        time.sleep(0.5)\n\n        # Add a new line and type the new code\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.ENTER, duration=0.1)\n        )\n        time.sleep(0.1)\n\n        computer.execute_type(\n            TypeAction(text='    print(f\"The sum of 5 and 7 is {calculate_sum(5, 7)}\")')\n        )\n        time.sleep(1)\n\n        # Save the file\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.S])\n        )\n        time.sleep(1)\n\n        # Close the editor\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.ALT, KeyboardKey.F4])\n        )\n        time.sleep(1)\n\n        # Run the script\n        print(\"Running the Python script...\")\n        result = computer.execute_command(\n            CommandAction(command=f\"python {script_path}\", timeout=10)\n        )\n\n        print(f\"Script execution {'succeeded' if result else 'failed'}\")\n\n        print(\"\\nExample completed successfully!\")\n        print(f\"You can find the script at {script_path}\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"computer\" in locals():\n            computer.close()\n            print(\"Computer resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/programming/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 10_programming.py\n\n# Using Poetry\npoetry run python 10_programming.py\n</code></pre>"},{"location":"examples/programming/#expected-output","title":"Expected Output","text":"<pre><code>Error: Required modules not found. Make sure CommandLAB is installed with the local extra:\npip install commandlab[local]\n</code></pre>"},{"location":"examples/programming/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/programming/#next-steps","title":"Next Steps","text":""},{"location":"examples/scripting_computer_interactions/","title":"CommandLAB Scripting Computer Interactions Example","text":""},{"location":"examples/scripting_computer_interactions/#description","title":"Description","text":"<p>This example demonstrates how to use the manual provisioner to script computer interactions. The manual provisioner is the simplest way to get started with CommandLAB.</p>"},{"location":"examples/scripting_computer_interactions/#status","title":"Status","text":"<p>\u26a0\ufe0f Requires manual setup</p>"},{"location":"examples/scripting_computer_interactions/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Scripting Computer Interactions Example\n\nThis example demonstrates how to use the manual provisioner to script computer interactions.\nThe manual provisioner is the simplest way to get started with CommandLAB.\n\nStatus: \u26a0\ufe0f Requires manual setup\n- Needs the daemon to be running in a separate terminal\n\"\"\"\n\nimport time\nimport os\n\ntry:\n    from commandLAB.computers.daemon_client_computer import (\n        DaemonClientComputer,\n        ProvisioningMethod,\n    )\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKeyPressAction,\n        KeyboardKey,\n        ClickAction,\n        MouseButton,\n    )\nexcept ImportError:\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed:\")\n    print(\"pip install commandlab\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a DaemonClientComputer with Manual provisioning...\")\n\n    try:\n        # Create a computer with Manual provisioning\n        computer = DaemonClientComputer(provisioning_method=ProvisioningMethod.MANUAL)\n\n        print(\"\\nManual provisioning instructions:\")\n        print(\"1. Open a new terminal window\")\n        print(\"2. Run the following command to start the daemon:\")\n        print(\"   pip install commandlab[local,daemon]\")\n        print(\"   python -m commandlab.daemon.daemon --port 8000 --backend pynput\")\n        print(\"3. Once the daemon is running, press Enter to continue...\")\n        input()\n\n        # Give the daemon time to start if it was just started\n        print(\"Waiting for daemon to be ready...\")\n        time.sleep(2)\n\n        # Execute a command\n        print(\n            \"Executing a command to open Notepad (on Windows) or TextEdit (on macOS)...\"\n        )\n        if os.name == \"nt\":  # Windows\n            result = computer.execute_command(\n                CommandAction(command=\"notepad\", timeout=5)\n            )\n        else:  # macOS or Linux\n            result = computer.execute_command(\n                CommandAction(\n                    command=(\n                        \"open -a TextEdit\"\n                        if os.uname().sysname == \"Darwin\"\n                        else \"gedit\"\n                    ),\n                    timeout=5,\n                )\n            )\n\n        print(f\"Command execution {'succeeded' if result else 'failed'}\")\n        print(\"Waiting for the application to open...\")\n        time.sleep(3)\n\n        # Type some text\n        print(\"Typing text...\")\n        computer.execute_type(\n            TypeAction(\n                text=\"Hello from CommandLAB!\\n\\nThis is an example of scripting computer interactions.\"\n            )\n        )\n        time.sleep(1)\n\n        # Press a keyboard hotkey (Ctrl+S to save)\n        print(\"Pressing Ctrl+S to save...\")\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.S])\n        )\n        time.sleep(1)\n\n        # Type a filename\n        print(\"Typing filename...\")\n        computer.execute_type(TypeAction(text=\"commandlab_example.txt\"))\n        time.sleep(1)\n\n        # Press Enter to save\n        print(\"Pressing Enter to save...\")\n        computer.execute_keyboard_key_press(\n            KeyboardKeyPressAction(key=KeyboardKey.ENTER, duration=0.1)\n        )\n        time.sleep(1)\n\n        # Close the application (Alt+F4)\n        print(\"Pressing Alt+F4 to close the application...\")\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.ALT, KeyboardKey.F4])\n        )\n\n        print(\"\\nExample completed successfully!\")\n        print(\"A file named 'commandlab_example.txt' should have been created.\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"computer\" in locals():\n            computer.close()\n            print(\"Resources cleaned up.\")\n            print(\"Note: The daemon is still running. You can stop it manually.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/scripting_computer_interactions/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 6_scripting_computer_interactions.py\n\n# Using Poetry\npoetry run python 6_scripting_computer_interactions.py\n</code></pre>"},{"location":"examples/scripting_computer_interactions/#expected-output","title":"Expected Output","text":"<pre><code>Error: Required modules not found. Make sure CommandLAB is installed:\npip install commandlab\n</code></pre>"},{"location":"examples/scripting_computer_interactions/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/scripting_computer_interactions/#next-steps","title":"Next Steps","text":""},{"location":"examples/simple_gym_test/","title":"CommandLAB Simple Gym Test","text":""},{"location":"examples/simple_gym_test/#description","title":"Description","text":"<p>This is a simplified version of the gym example that uses the proper implementation classes.</p>"},{"location":"examples/simple_gym_test/#status","title":"Status","text":"<p>Working</p> <ul> <li>Successfully moves the mouse to the specified position (100, 100)</li> <li>Demonstrates basic gym framework functionality</li> </ul>"},{"location":"examples/simple_gym_test/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Simple Gym Test\n\nThis is a simplified version of the gym example that uses the proper implementation classes.\n\nStatus: Working\n- Successfully initializes the environment, agent, and driver\n- Successfully moves the mouse to the specified position (100, 100)\n- Demonstrates basic gym framework functionality\n\"\"\"\n\nimport time\nimport os\nimport traceback\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n    from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n    from commandLAB.gym.drivers import SimpleDriver\n    from commandLAB.types import (\n        CommandAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        ComputerAction,\n        ComputerObservation,\n        MouseMoveAction,\n    )\n    from commandLAB.gym.schema import Episode\nexcept ImportError as e:\n    print(f\"Detailed import error: {e}\")\n    print(\"Traceback:\")\n    traceback.print_exc()\n    print(\"Error: Required modules not found. Make sure CommandLAB is installed with the required extras:\")\n    print(\"pip install commandlab[local,gym]\")\n    exit(1)\n\n\n# Create a simple mock agent that doesn't require OpenAI API\nclass SimpleMockAgent(NaiveComputerAgent):\n    \"\"\"A simple mock agent that doesn't require OpenAI API.\"\"\"\n\n    def __init__(self):\n        # Initialize with dummy chat_model_options\n        super().__init__(chat_model_options={\n            \"model_provider\": \"openai\",  # Required by get_chat_model\n            \"model\": \"gpt-4o\",  # Required by ChatOpenAI\n            \"api_key\": \"dummy-api-key\"  # Dummy API key\n        })\n        # Override the chat_model and str_output_parser to avoid API calls\n        self.chat_model = None\n        self.str_output_parser = None\n\n    def act(self, observation: ComputerObservation) -&gt; ComputerAction:\n        \"\"\"Given an observation, determine the next action.\"\"\"\n        # Just return a simple mouse move action\n        return ComputerAction(\n            mouse_move=MouseMoveAction(x=100, y=100, move_duration=0.5)\n        )\n\n\ndef main():\n    print(\"CommandLAB Simple Gym Test\")\n    print(\"==========================\")\n    print(\"This is a simplified version of the gym example.\")\n    print()\n\n    try:\n        # Create the environment with an explicit computer instance\n        print(\"Creating the environment...\")\n        computer = LocalPynputComputer()\n        config = ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            computer_cls_kwargs={},\n        )\n        env = ComputerEnv(config, computer=computer)\n\n        # Enable logging of modality errors for debugging\n        from commandLAB.gym.environments.multimodal_env import MultiModalEnv\n        MultiModalEnv._LOG_MODALITY_ERRORS = True\n\n        # Create a mock agent\n        print(\"Creating the agent...\")\n        agent = SimpleMockAgent()\n\n        # Create a driver\n        print(\"Creating the driver...\")\n        driver = SimpleDriver(env=env, agent=agent)\n\n        # Collect an episode\n        print(\"Collecting an episode...\")\n        print(\"This will take a screenshot and use the agent to decide on actions.\")\n        print(\"Press Ctrl+C to stop the episode collection.\")\n        print()\n        print(\"Starting in 1 second...\")\n        time.sleep(1)\n\n        # Collect the episode\n        episode = driver.collect_episode()\n\n        # Print episode statistics\n        print(\"\\nEpisode collection complete!\")\n        print(f\"Episode length: {episode.num_steps} steps\")\n        print(f\"Total reward: {sum(step.reward for step in episode)}\")\n\n        # Print the actions taken\n        print(\"\\nActions taken:\")\n        for i, step in enumerate(episode):\n            print(f\"Step {i+1}: {step.action}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEpisode collection interrupted by user.\")\n    except Exception as e:\n        print(f\"\\nError: {e}\")\n        traceback.print_exc()\n    finally:\n        # Clean up resources\n        if \"driver\" in locals():\n            driver.close()\n            print(\"Resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main() \n</code></pre>"},{"location":"examples/simple_gym_test/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython simple_gym_test.py\n\n# Using Poetry\npoetry run python simple_gym_test.py\n</code></pre>"},{"location":"examples/simple_gym_test/#expected-output","title":"Expected Output","text":"<pre><code>Detailed import error: No module named 'commandLAB'\nTraceback:\nError: Required modules not found. Make sure CommandLAB is installed with the required extras:\npip install commandlab[local,gym]\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Jacob\\source\\repos\\active\\commandAGI\\commandLAB\\examples\\simple_gym_test.py\", line 18, in &lt;module&gt;\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nModuleNotFoundError: No module named 'commandLAB'\n</code></pre>"},{"location":"examples/simple_gym_test/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/simple_gym_test/#next-steps","title":"Next Steps","text":""},{"location":"examples/using_docker/","title":"CommandLAB Docker Example","text":""},{"location":"examples/using_docker/#description","title":"Description","text":"<p>This example demonstrates how to use the Docker provisioner to create and control a Docker container.</p> <p>Note: This example requires Docker to be installed and running on your system.</p>"},{"location":"examples/using_docker/#status","title":"Status","text":"<p>\u26a0\ufe0f Works with limitations</p> <ul> <li>Provides helpful information about building the image</li> </ul>"},{"location":"examples/using_docker/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Docker Example\n\nThis example demonstrates how to use the Docker provisioner to create and control\na Docker container.\n\nNote: This example requires Docker to be installed and running on your system.\n\nStatus: \u26a0\ufe0f Works with limitations\n- Handles the error gracefully when the Docker image doesn't exist\n- Provides helpful information about building the image\n\"\"\"\n\nimport time\n\ntry:\n    from commandLAB.computers.provisioners.docker_provisioner import (\n        DockerProvisioner,\n        DockerPlatform,\n    )\n    from commandLAB.version import get_container_version\nexcept ImportError:\n    print(\n        \"Error: Required modules not found. Make sure CommandLAB is installed with the Docker extra:\"\n    )\n    print(\"pip install commandlab[docker]\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a Docker container...\")\n\n    try:\n        # Create a Docker provisioner directly\n        provisioner = DockerProvisioner(\n            port=8000,\n            platform=DockerPlatform.LOCAL,\n            container_name=\"commandlab-example\",\n            version=get_container_version(),  # Use the default container version\n            max_retries=3,\n            timeout=60,  # 1 minute timeout\n        )\n\n        print(\"Setting up the Docker container...\")\n        print(\"This may take a while if the image needs to be pulled...\")\n\n        try:\n            provisioner.setup()\n            print(\"Docker container started successfully!\")\n\n            # Check if the container is running\n            if provisioner.is_running():\n                print(\"Container is running!\")\n            else:\n                print(\"Container is not running.\")\n\n            print(\"Waiting for container to be ready...\")\n            time.sleep(5)  # Give the container time to start\n\n        except Exception as setup_error:\n            print(f\"Error setting up container: {setup_error}\")\n            print(\"This may be because the Docker image doesn't exist.\")\n            print(\"You would normally need to build the image first using:\")\n            print(\n                \"poetry run python -m commandLAB.dev.dev_cli build build_docker_image\"\n            )\n\n        print(\"\\nExample completed!\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"provisioner\" in locals():\n            print(\"Cleaning up Docker container...\")\n            try:\n                provisioner.teardown()\n                print(\"Docker container stopped and removed.\")\n            except Exception as cleanup_error:\n                print(f\"Error cleaning up container: {cleanup_error}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/using_docker/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 4_using_docker.py\n\n# Using Poetry\npoetry run python 4_using_docker.py\n</code></pre>"},{"location":"examples/using_docker/#expected-output","title":"Expected Output","text":"<pre><code>Error: Required modules not found. Make sure CommandLAB is installed with the Docker extra:\npip install commandlab[docker]\n</code></pre>"},{"location":"examples/using_docker/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/using_docker/#next-steps","title":"Next Steps","text":""},{"location":"examples/using_kubernetes/","title":"CommandLAB Kubernetes Example","text":""},{"location":"examples/using_kubernetes/#description","title":"Description","text":"<p>This example demonstrates how to use the Kubernetes provisioner to create and control a Kubernetes pod running the CommandLAB daemon.</p>"},{"location":"examples/using_kubernetes/#status","title":"Status","text":"<p>\u274c Not implemented yet</p>"},{"location":"examples/using_kubernetes/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Kubernetes Example\n\nThis example demonstrates how to use the Kubernetes provisioner to create and control\na Kubernetes pod running the CommandLAB daemon.\n\nStatus: \u274c Not implemented yet\n- This is a placeholder for future implementation\n\"\"\"\n\n\ndef main():\n    print(\"This example is not implemented yet.\")\n    print(\n        \"It will demonstrate how to use the Kubernetes provisioner in a future update.\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/using_kubernetes/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 5_using_kubernetes.py\n\n# Using Poetry\npoetry run python 5_using_kubernetes.py\n</code></pre>"},{"location":"examples/using_kubernetes/#expected-output","title":"Expected Output","text":"<pre><code>This example is not implemented yet.\nIt will demonstrate how to use the Kubernetes provisioner in a future update.\n</code></pre>"},{"location":"examples/using_kubernetes/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/using_kubernetes/#next-steps","title":"Next Steps","text":""},{"location":"examples/using_the_internet/","title":"CommandLAB Web Automation Example","text":""},{"location":"examples/using_the_internet/#description","title":"Description","text":"<p>This example demonstrates how to use CommandLAB for web automation tasks, such as opening a browser, navigating to a website, and interacting with web elements.</p>"},{"location":"examples/using_the_internet/#status","title":"Status","text":"<p>\u26a0\ufe0f Works with minor issues</p> <ul> <li>Encounters an error when closing the browser</li> </ul>"},{"location":"examples/using_the_internet/#code","title":"Code","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nCommandLAB Web Automation Example\n\nThis example demonstrates how to use CommandLAB for web automation tasks,\nsuch as opening a browser, navigating to a website, and interacting with web elements.\n\nStatus: \u26a0\ufe0f Works with minor issues\n- Successfully opens a browser, navigates to a website, and takes a screenshot\n- Encounters an error when closing the browser\n\"\"\"\n\nimport time\nimport os\n\ntry:\n    from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n    from commandLAB.types import (\n        CommandAction,\n        ClickAction,\n        TypeAction,\n        KeyboardHotkeyAction,\n        KeyboardKey,\n        MouseButton,\n    )\nexcept ImportError:\n    print(\n        \"Error: Required modules not found. Make sure CommandLAB is installed with the local extra:\"\n    )\n    print(\"pip install commandlab[local]\")\n    exit(1)\n\n\ndef main():\n    print(\"Creating a LocalPynputComputer instance...\")\n\n    try:\n        # Create a computer instance\n        computer = LocalPynputComputer()\n\n        # Open a web browser\n        print(\"Opening a web browser...\")\n        if os.name == \"nt\":  # Windows\n            browser_cmd = \"start chrome\"\n        elif os.uname().sysname == \"Darwin\":  # macOS\n            browser_cmd = \"open -a 'Google Chrome'\"\n        else:  # Linux\n            browser_cmd = \"google-chrome\"\n\n        result = computer.execute_command(\n            CommandAction(command=browser_cmd, timeout=10)\n        )\n\n        print(f\"Browser launch {'succeeded' if result else 'failed'}\")\n        print(\"Waiting for the browser to open...\")\n        time.sleep(5)\n\n        # Navigate to a website by typing in the address bar\n        print(\"Navigating to a website...\")\n\n        # Press Ctrl+L to focus the address bar\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.L])\n        )\n        time.sleep(0.5)\n\n        # Type the URL\n        computer.execute_type(TypeAction(text=\"example.com\"))\n        time.sleep(0.5)\n\n        # Press Enter to navigate\n        computer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.ENTER]))\n\n        print(\"Waiting for the page to load...\")\n        time.sleep(3)\n\n        # Take a screenshot of the page\n        print(\"Taking a screenshot of the page...\")\n        screenshot = computer.get_screenshot()\n\n        # Create output directory if it doesn't exist\n        os.makedirs(\"output\", exist_ok=True)\n\n        # Save the screenshot\n        import base64\n        from PIL import Image\n        import io\n\n        img_data = base64.b64decode(screenshot.screenshot)\n        img = Image.open(io.BytesIO(img_data))\n        screenshot_path = \"output/web_screenshot.png\"\n        img.save(screenshot_path)\n        print(f\"Screenshot saved to {screenshot_path}\")\n\n        # Demonstrate clicking on a link (approximate position for example.com's \"More information\" link)\n        print(\"Clicking on a link...\")\n        computer.execute_click(ClickAction(x=400, y=400, button=MouseButton.LEFT))\n\n        print(\"Waiting for the new page to load...\")\n        time.sleep(3)\n\n        # Close the browser\n        print(\"Closing the browser...\")\n        computer.execute_keyboard_hotkey(\n            KeyboardHotkeyAction(keys=[KeyboardKey.ALT, KeyboardKey.F4])\n        )\n\n        print(\"\\nExample completed successfully!\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        # Clean up resources\n        if \"computer\" in locals():\n            computer.close()\n            print(\"Computer resources cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/using_the_internet/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code># Using Python directly\npython 9_using_the_internet.py\n\n# Using Poetry\npoetry run python 9_using_the_internet.py\n</code></pre>"},{"location":"examples/using_the_internet/#expected-output","title":"Expected Output","text":"<pre><code>Error: Required modules not found. Make sure CommandLAB is installed with the local extra:\npip install commandlab[local]\n</code></pre>"},{"location":"examples/using_the_internet/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/using_the_internet/#next-steps","title":"Next Steps","text":""},{"location":"tutorials/","title":"Tutorials","text":"<p>Welcome to the CommandLAB tutorials section! These step-by-step guides will help you learn how to use CommandLAB for various automation tasks.</p>"},{"location":"tutorials/#getting-started","title":"Getting Started","text":"<p>These tutorials cover the basics of CommandLAB:</p> <ul> <li>Basic Automation - Learn how to automate a simple text editing task</li> <li>Local Computer Control - Control your local computer with CommandLAB</li> <li>Remote Control - Control a remote computer using the daemon</li> </ul>"},{"location":"tutorials/#advanced","title":"Advanced","text":"<p>These tutorials cover more advanced topics:</p> <ul> <li>Training Agents - Train AI agents to use computers</li> <li>Cloud Deployment - Deploy CommandLAB in cloud environments</li> <li>Provisioner Usage - Use provisioners to manage computer environments</li> <li>Custom Agents - Create your own AI agents</li> <li>Custom Computers - Implement custom computer backends</li> <li>Custom Provisioners - Create custom provisioning solutions</li> <li>CI/CD Integration - Integrate CommandLAB into CI/CD pipelines</li> <li>Multi-Agent Systems - Create systems with multiple agents</li> <li>Distributed Automation - Run automation tasks across multiple machines</li> </ul>"},{"location":"tutorials/#examples","title":"Examples","text":"<p>Real-world examples of CommandLAB in action:</p> <ul> <li>Web Automation - Automate web browsing and form filling</li> <li>Desktop Application Automation - Automate desktop applications</li> <li>File Management Automation - Automate file operations</li> <li>Text Processing Automation - Automate text editing and processing</li> <li>Automated Testing - Use CommandLAB for UI testing</li> <li>Data Collection - Collect data from applications and websites</li> <li>Process Automation - Automate business processes</li> </ul> <p>For a complete list of example scripts with their status and usage information, see the Examples page.</p>"},{"location":"tutorials/#tutorial-structure","title":"Tutorial Structure","text":"<p>Each tutorial follows a consistent structure:</p> <ol> <li>Introduction - What you'll learn and why it's useful</li> <li>Prerequisites - What you need to know and have installed</li> <li>Step-by-Step Instructions - Detailed instructions with code examples</li> <li>Explanation - Why things work the way they do</li> <li>Exercises - Optional exercises to reinforce learning</li> <li>Next Steps - Suggestions for what to learn next</li> </ol>"},{"location":"tutorials/#contributing-tutorials","title":"Contributing Tutorials","text":"<p>We welcome contributions to our tutorials! If you've created a useful automation with CommandLAB, consider sharing it as a tutorial. See our contribution guidelines for more information.</p>"},{"location":"tutorials/#requesting-tutorials","title":"Requesting Tutorials","text":"<p>If you'd like to see a tutorial on a specific topic, please open an issue on our GitHub repository with the label \"tutorial request\".</p>"},{"location":"tutorials/basic_automation/","title":"Basic Automation with commandLAB","text":"<p>This tutorial will guide you through the basics of automating computer interactions using commandLAB.</p>"},{"location":"tutorials/basic_automation/#prerequisites","title":"Prerequisites","text":"<ul> <li>commandLAB installed (see Installation)</li> <li>Basic understanding of Python</li> </ul>"},{"location":"tutorials/basic_automation/#getting-started","title":"Getting Started","text":"<p>In this tutorial, we'll create a simple automation script that performs basic tasks on your computer.</p>"},{"location":"tutorials/basic_automation/#step-1-import-the-necessary-modules","title":"Step 1: Import the necessary modules","text":"<pre><code>from commandLAB import LocalPynputComputer\n</code></pre>"},{"location":"tutorials/basic_automation/#step-2-create-a-computer-instance","title":"Step 2: Create a computer instance","text":"<pre><code>computer = LocalPynputComputer()\n</code></pre>"},{"location":"tutorials/basic_automation/#step-3-perform-basic-interactions","title":"Step 3: Perform basic interactions","text":"<pre><code># Take a screenshot\nscreenshot = computer.screenshot()\n\n# Move the mouse\ncomputer.move_mouse(x=100, y=100)\n\n# Click\ncomputer.click()\n\n# Type text\ncomputer.type_text(\"Hello, world!\")\n</code></pre>"},{"location":"tutorials/basic_automation/#next-steps","title":"Next Steps","text":"<p>After completing this tutorial, you can explore more advanced features:</p> <ul> <li>Using Provisioners</li> <li>Cloud Containers</li> </ul>"},{"location":"tutorials/advanced/cloud-deployment/","title":"Running CommandLAB in the Cloud","text":"<p>This guide helps you run CommandLAB daemons in various cloud container services without needing to manage full VMs.</p>"},{"location":"tutorials/advanced/cloud-deployment/#quick-start","title":"Quick Start","text":""},{"location":"tutorials/advanced/cloud-deployment/#aws-ecs-elastic-container-service","title":"AWS ECS (Elastic Container Service)","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.docker_provisioner import DockerPlatform\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.AWS_ECS,\n    region=\"us-west-2\"\n)\n</code></pre>"},{"location":"tutorials/advanced/cloud-deployment/#azure-container-instances","title":"Azure Container Instances","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.docker_provisioner import DockerPlatform\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.AZURE_CONTAINER_INSTANCES,\n    resource_group=\"my-resource-group\",\n    region=\"eastus\"\n)\n</code></pre>"},{"location":"tutorials/advanced/cloud-deployment/#google-cloud-run","title":"Google Cloud Run","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.docker_provisioner import DockerPlatform\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.GCP_CLOUD_RUN,\n    project_id=\"my-project\",\n    region=\"us-central1\"\n)\n</code></pre>"},{"location":"tutorials/advanced/cloud-deployment/#managed-kubernetes-services","title":"Managed Kubernetes Services","text":""},{"location":"tutorials/advanced/cloud-deployment/#amazon-eks","title":"Amazon EKS","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.kubernetes_provisioner import KubernetesPlatform\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.KUBERNETES,\n    platform=KubernetesPlatform.AWS_EKS,\n    cluster_name=\"my-cluster\",\n    region=\"us-west-2\"\n)\n</code></pre>"},{"location":"tutorials/advanced/cloud-deployment/#azure-aks","title":"Azure AKS","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.kubernetes_provisioner import KubernetesPlatform\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.KUBERNETES,\n    platform=KubernetesPlatform.AZURE_AKS,\n    cluster_name=\"my-cluster\",\n    resource_group=\"my-resource-group\"\n)\n</code></pre>"},{"location":"tutorials/advanced/cloud-deployment/#google-gke","title":"Google GKE","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.kubernetes_provisioner import KubernetesPlatform\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.KUBERNETES,\n    platform=KubernetesPlatform.GCP_GKE,\n    cluster_name=\"my-cluster\",\n    project_id=\"my-project\",\n    region=\"us-central1\"\n)\n</code></pre>"},{"location":"tutorials/advanced/cloud-deployment/#cost-considerations","title":"Cost Considerations","text":"<ul> <li>AWS ECS with Fargate: Pay only for resources used</li> <li>Azure Container Instances: Per-second billing</li> <li>Google Cloud Run: Pay-per-use pricing</li> <li>Managed Kubernetes: Additional cluster management costs</li> </ul>"},{"location":"tutorials/advanced/cloud-deployment/#best-practices","title":"Best Practices","text":"<ol> <li>Right-size your resources: Choose appropriate CPU and memory settings</li> <li>Clean up resources: Always call <code>computer.close()</code> when done</li> <li>Monitor usage and costs: Set up billing alerts</li> <li>Use auto-scaling: Configure scaling policies for variable workloads</li> <li>Consider regional pricing: Choose regions with lower costs when possible</li> </ol>"},{"location":"tutorials/advanced/cloud-deployment/#security-considerations","title":"Security Considerations","text":"<ol> <li>API Token Security: Store API tokens securely</li> <li>Network Access: Limit network exposure of your daemon</li> <li>IAM Permissions: Use least-privilege permissions</li> <li>Image Security: Scan container images for vulnerabilities</li> <li>Data Protection: Be careful with sensitive data in containers</li> </ol>"},{"location":"tutorials/advanced/cloud-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/advanced/cloud-deployment/#common-issues","title":"Common Issues","text":"<ul> <li>Connection Timeouts: Check network connectivity and security groups</li> <li>Authentication Failures: Verify credentials and API tokens</li> <li>Resource Limits: Check if you've hit quota limits</li> <li>Image Pull Errors: Ensure your container registry is accessible</li> </ul>"},{"location":"tutorials/advanced/cloud-deployment/#debugging","title":"Debugging","text":"<p>```python import logging logging.basicConfig(level=logging.DEBUG)</p>"},{"location":"tutorials/advanced/cloud-deployment/#create-computer-with-debug-logging","title":"Create computer with debug logging","text":"<p>computer = DaemonClientComputer(     provisioning_method=ProvisioningMethod.DOCKER,     platform=DockerPlatform.AWS_ECS,     region=\"us-west-2\" ) </p>"},{"location":"tutorials/advanced/provisioner-usage/","title":"Using Provisioners in CommandLAB","text":"<p>Provisioners in CommandLAB allow you to automatically set up and manage computer environments across different platforms. This guide explains how to use provisioners in your projects.</p>"},{"location":"tutorials/advanced/provisioner-usage/#what-are-provisioners","title":"What are Provisioners?","text":"<p>Provisioners handle the lifecycle of computer environments:</p> <ol> <li>Setup: Creating and configuring the environment</li> <li>Status Checking: Monitoring the environment's state</li> <li>Teardown: Cleaning up resources when they're no longer needed</li> </ol> <p>This allows you to work with ephemeral environments that can be created and destroyed as needed.</p>"},{"location":"tutorials/advanced/provisioner-usage/#available-provisioners","title":"Available Provisioners","text":"<p>CommandLAB includes provisioners for various platforms:</p>"},{"location":"tutorials/advanced/provisioner-usage/#local-docker","title":"Local Docker","text":"<p>Run environments in Docker containers on your local machine:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.docker_provisioner import DockerPlatform\n\n# Create a computer with local Docker provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.LOCAL\n)\n\n# Use the computer\n# ...\n\n# Clean up when done\ncomputer.close()  # Stops and removes the container\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#aws","title":"AWS","text":"<p>Run environments in AWS EC2 instances:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer with AWS provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.AWS,\n    region=\"us-west-2\",\n    instance_type=\"t2.micro\",\n    image_id=\"ami-0123456789abcdef0\",  # Optional: custom AMI ID\n    security_groups=[\"my-security-group\"]  # Optional: custom security groups\n)\n\n# Use the computer\n# ...\n\n# Clean up when done\ncomputer.close()  # Terminates the EC2 instance\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#azure","title":"Azure","text":"<p>Run environments in Azure VMs:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer with Azure provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.AZURE,\n    resource_group=\"my-resource-group\",\n    location=\"eastus\",\n    vm_size=\"Standard_DS1_v2\",\n    subscription_id=\"your-subscription-id\",  # Optional: can use AZURE_SUBSCRIPTION_ID env var\n    image_id=\"your-image-id\"  # Optional: custom image ID\n)\n\n# Use the computer\n# ...\n\n# Clean up when done\ncomputer.close()  # Deletes the Azure VM\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#google-cloud-platform","title":"Google Cloud Platform","text":"<p>Run environments in GCP VMs:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer with GCP provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.GCP,\n    project=\"your-project-id\",\n    zone=\"us-central1-a\",\n    machine_type=\"n1-standard-1\",\n    source_image=\"your-image-id\"  # Optional: custom image ID\n)\n\n# Use the computer\n# ...\n\n# Clean up when done\ncomputer.close()  # Deletes the GCP VM\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#kubernetes","title":"Kubernetes","text":"<p>Run environments in Kubernetes clusters:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.kubernetes_provisioner import KubernetesPlatform\n\n# Create a computer with Kubernetes provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.KUBERNETES,\n    platform=KubernetesPlatform.GCP_GKE,  # Or AWS_EKS, AZURE_AKS, LOCAL\n    namespace=\"my-namespace\",\n    cluster_name=\"my-cluster\",\n    project_id=\"my-project\",  # For GCP_GKE\n    region=\"us-central1\"  # For AWS_EKS and GCP_GKE\n)\n\n# Use the computer\n# ...\n\n# Clean up when done\ncomputer.close()  # Deletes the Kubernetes resources\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#container-services","title":"Container Services","text":"<p>Run environments in managed container services:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.docker_provisioner import DockerPlatform\n\n# AWS ECS\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.AWS_ECS,\n    region=\"us-west-2\",\n    subnets=[\"subnet-12345\"],\n    security_groups=[\"sg-12345\"]\n)\n\n# Azure Container Instances\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.AZURE_CONTAINER_INSTANCES,\n    region=\"eastus\",\n    resource_group=\"my-resource-group\",\n    subscription_id=\"your-subscription-id\"\n)\n\n# Google Cloud Run\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.GCP_CLOUD_RUN,\n    project_id=\"your-project-id\",\n    region=\"us-central1\"\n)\n\n# Use the computer\n# ...\n\n# Clean up when done\ncomputer.close()\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"tutorials/advanced/provisioner-usage/#timeouts-and-retries","title":"Timeouts and Retries","text":"<p>You can configure timeouts and retry behavior:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.AWS,\n    region=\"us-west-2\",\n    max_retries=5,  # Default: 3\n    timeout=600     # Default: 300 (5 minutes)\n)\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#status-checking","title":"Status Checking","text":"<p>You can check the status of a provisioner:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER\n)\n\n# Get the provisioner status\nstatus = computer.provisioner.get_status()\nprint(f\"Provisioner status: {status}\")\n# Possible values: \"not_started\", \"starting\", \"running\", \"stopping\", \"stopped\", \"error\"\n\n# Check if the environment is running\nis_running = computer.provisioner.is_running()\nprint(f\"Is running: {is_running}\")\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/advanced/provisioner-usage/#resource-management","title":"Resource Management","text":"<p>Always clean up resources when you're done:</p> <pre><code>try:\n    computer = DaemonClientComputer(provisioning_method=ProvisioningMethod.AWS)\n    # Use the computer\nfinally:\n    computer.close()  # Ensure resources are cleaned up\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#error-handling","title":"Error Handling","text":"<p>Handle potential errors during provisioning:</p> <pre><code>try:\n    computer = DaemonClientComputer(provisioning_method=ProvisioningMethod.AWS)\n    # Use the computer\nexcept Exception as e:\n    print(f\"Error during provisioning: {e}\")\n    # Handle the error\nfinally:\n    if 'computer' in locals():\n        computer.close()\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#environment-variables","title":"Environment Variables","text":"<p>Use environment variables for sensitive information:</p> <pre><code># Set environment variables\nimport os\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"your-subscription-id\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"your-client-id\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"your-client-secret\"\nos.environ[\"AZURE_TENANT_ID\"] = \"your-tenant-id\"\n\n# Create computer without explicitly passing credentials\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.AZURE,\n    resource_group=\"my-resource-group\"\n)\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/advanced/provisioner-usage/#common-issues","title":"Common Issues","text":"<ol> <li>Connection Timeouts: Check network connectivity and security groups/firewall rules.</li> <li>Authentication Errors: Verify your credentials and permissions.</li> <li>Resource Limits: Check if you've reached your cloud provider's resource limits.</li> <li>Image Not Found: Ensure the specified image ID exists and is accessible.</li> </ol>"},{"location":"tutorials/advanced/provisioner-usage/#logging","title":"Logging","text":"<p>Enable detailed logging for troubleshooting:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"tutorials/advanced/provisioner-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Cloud Containers for more advanced cloud deployment options</li> <li>Explore Computers to understand how to interact with provisioned environments</li> <li>Check out the Daemon documentation to learn about the remote control protocol </li> </ul>"},{"location":"tutorials/advanced/training-agents/","title":"Training Agents Tutorial","text":"<p>This tutorial will guide you through the process of training AI agents to use computers with CommandLAB's gym framework. You'll learn how to set up environments, create agents, and train them to perform tasks.</p>"},{"location":"tutorials/advanced/training-agents/#introduction","title":"Introduction","text":"<p>CommandLAB's gym framework is inspired by OpenAI Gym and provides a standardized interface for training agents to use computers. This allows you to:</p> <ul> <li>Train agents to automate UI interactions</li> <li>Evaluate agent performance on specific tasks</li> <li>Compare different agent implementations</li> <li>Create benchmarks for computer-using AI</li> </ul>"},{"location":"tutorials/advanced/training-agents/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>CommandLAB installed with gym and local computer support:   <pre><code>pip install \"commandlab[local,gym]\"\n</code></pre></li> <li>For vision-language models, you'll need an API key for OpenAI, Anthropic, or another supported provider</li> </ul>"},{"location":"tutorials/advanced/training-agents/#step-1-understanding-the-gym-framework","title":"Step 1: Understanding the Gym Framework","text":"<p>The CommandLAB gym framework consists of several key components:</p> <ul> <li>Environments: Define the task and interface with computers</li> <li>Agents: Make decisions based on observations</li> <li>Drivers: Manage the interaction between agents and environments</li> <li>Episodes: Sequences of interactions between agents and environments</li> <li>Trainers: Train agents using episodes</li> </ul> <p>The basic flow is:</p> <ol> <li>The environment provides an observation (e.g., a screenshot)</li> <li>The agent selects an action based on the observation</li> <li>The environment executes the action and returns a new observation, reward, and done flag</li> <li>The process repeats until the episode is complete</li> </ol>"},{"location":"tutorials/advanced/training-agents/#step-2-setting-up-an-environment","title":"Step 2: Setting Up an Environment","text":"<p>Let's start by setting up a simple environment using a local computer:</p> <pre><code>from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\n\n# Configure the environment\nconfig = ComputerEnvConfig(\n    computer_cls_name=\"LocalPynputComputer\",  # Use local computer with pynput\n    on_reset_python=\"echo 'Environment reset'\"  # Command to run on reset\n)\n\n# Create the environment\nenv = ComputerEnv(config)\n\n# Reset the environment to get the initial observation\nobservation = env.reset()\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#step-3-creating-a-simple-agent","title":"Step 3: Creating a Simple Agent","text":"<p>Now, let's create a simple agent that uses a vision-language model to make decisions:</p> <pre><code>from commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\n\n# Create an agent with OpenAI's GPT-4 Vision\nagent = NaiveComputerAgent(chat_model_options={\n    \"model_provider\": \"openai\",\n    \"model\": \"gpt-4-vision-preview\",\n    \"api_key\": \"your-openai-api-key\"  # Replace with your actual API key\n})\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#step-4-running-an-episode","title":"Step 4: Running an Episode","text":"<p>Let's use a driver to run an episode with our agent and environment:</p> <pre><code>from commandLAB.gym.drivers import SimpleDriver\n\n# Create a driver\ndriver = SimpleDriver(env=env, agent=agent)\n\n# Collect an episode\nepisode = driver.collect_episode()\n\n# Print episode statistics\nprint(f\"Episode length: {episode.num_steps}\")\nprint(f\"Total reward: {sum(step.reward for step in episode)}\")\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#step-5-analyzing-the-episode","title":"Step 5: Analyzing the Episode","text":"<p>Let's analyze what happened during the episode:</p> <pre><code># Iterate through the steps in the episode\nfor i, step in enumerate(episode):\n    print(f\"Step {i+1}:\")\n    print(f\"  Action: {step.action}\")\n    print(f\"  Reward: {step.reward}\")\n    print(f\"  Info: {step.info}\")\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#step-6-training-an-agent","title":"Step 6: Training an Agent","text":"<p>Now, let's train an agent using multiple episodes:</p> <pre><code>from commandLAB.gym.trainer import OnlineTrainer\n\n# Create a trainer\ntrainer = OnlineTrainer(driver=driver, agent=agent)\n\n# Train the agent for 10 episodes\nepisodes = trainer.train(num_episodes=10)\n\n# Print training statistics\nprint(trainer.get_training_stats())\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#step-7-saving-and-loading-agents","title":"Step 7: Saving and Loading Agents","text":"<p>You can save and load trained agents:</p> <pre><code>import pickle\n\n# Save the agent\nwith open(\"trained_agent.pkl\", \"wb\") as f:\n    pickle.dump(agent, f)\n\n# Load the agent\nwith open(\"trained_agent.pkl\", \"rb\") as f:\n    loaded_agent = pickle.load(f)\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#complete-example-training-an-agent-to-use-a-calculator","title":"Complete Example: Training an Agent to Use a Calculator","text":"<p>Here's a complete example that trains an agent to use the Windows calculator:</p> <pre><code>import time\nfrom commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\nfrom commandLAB.gym.agents.naive_vision_language_computer_agent import NaiveComputerAgent\nfrom commandLAB.gym.drivers import SimpleDriver\nfrom commandLAB.types import CommandAction\n\n# Define a custom environment with a specific reward function\nclass CalculatorEnv(ComputerEnv):\n    def __init__(self):\n        super().__init__(ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            on_reset_python=\"start calc\",  # Start calculator on reset\n            on_stop_python=\"taskkill /f /im calculator.exe\"  # Kill calculator on stop\n        ))\n        self.target_result = 42\n        self.current_result = 0\n\n    def get_reward(self, action):\n        # Extract the current result from the calculator display\n        # This is a simplified example - in a real implementation,\n        # you would use OCR to extract the number from the screenshot\n        screenshot = self._computer.get_screenshot()\n        # ... OCR logic to extract result ...\n\n        # For this example, we'll just simulate it\n        if isinstance(action.command, CommandAction):\n            if \"=\" in action.command.command:\n                # Simulate calculating the result\n                self.current_result = eval(action.command.command.split(\"=\")[0])\n\n        # Calculate reward based on how close we are to the target\n        distance = abs(self.current_result - self.target_result)\n        reward = 1.0 / (1.0 + distance)\n\n        # Bonus reward for exact match\n        if self.current_result == self.target_result:\n            reward += 10.0\n\n        return reward\n\n    def get_done(self, action):\n        # Episode is done if we reach the target or after 20 steps\n        return self.current_result == self.target_result or self.num_steps &gt;= 20\n\n# Create the environment\nenv = CalculatorEnv()\n\n# Create an agent\nagent = NaiveComputerAgent(chat_model_options={\n    \"model_provider\": \"openai\",\n    \"model\": \"gpt-4-vision-preview\",\n    \"api_key\": \"your-openai-api-key\"  # Replace with your actual API key\n})\n\n# Create a driver\ndriver = SimpleDriver(env=env, agent=agent)\n\n# Train the agent\ntrainer = OnlineTrainer(driver=driver, agent=agent)\nepisodes = trainer.train(num_episodes=5)\n\n# Print training statistics\nprint(trainer.get_training_stats())\n\n# Test the trained agent\nobservation = env.reset()\ndone = False\ntotal_reward = 0\n\nwhile not done:\n    action = agent.act(observation)\n    observation, reward, done, info = env.step(action)\n    total_reward += reward\n\nprint(f\"Test episode complete. Total reward: {total_reward}\")\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#advanced-custom-agents","title":"Advanced: Custom Agents","text":"<p>You can create custom agents by implementing the <code>BaseComputerAgent</code> interface:</p> <pre><code>from commandLAB.gym.agents.base_agent import BaseComputerAgent\nfrom commandLAB.types import ComputerObservation, ComputerAction, ClickAction\n\nclass MyCustomAgent(BaseComputerAgent):\n    def reset(self):\n        \"\"\"Reset agent state\"\"\"\n        self.total_reward = 0.0\n\n    def act(self, observation: ComputerObservation) -&gt; ComputerAction:\n        \"\"\"Given an observation, determine the next action\"\"\"\n        # Simple agent that always clicks in the center of the screen\n        screenshot = observation.screenshot\n        if screenshot:\n            # Get the dimensions of the screenshot\n            # In a real implementation, you would parse the base64 image\n            width, height = 1920, 1080  # Placeholder values\n\n            # Click in the center\n            return ComputerAction(\n                click=ClickAction(x=width//2, y=height//2)\n            )\n        return None\n\n    def update(self, reward: float):\n        \"\"\"Update agent state based on reward\"\"\"\n        self.total_reward += reward\n\n    def train(self, episodes: list):\n        \"\"\"Train the agent on episodes\"\"\"\n        # Training logic here\n        pass\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#advanced-custom-environments","title":"Advanced: Custom Environments","text":"<p>You can create custom environments by extending the <code>ComputerEnv</code> class:</p> <pre><code>from commandLAB.gym.environments.computer_env import ComputerEnv, ComputerEnvConfig\nfrom commandLAB.types import ComputerAction\n\nclass WebBrowserEnv(ComputerEnv):\n    def __init__(self, url=\"https://www.google.com\"):\n        super().__init__(ComputerEnvConfig(\n            computer_cls_name=\"LocalPynputComputer\",\n            on_reset_python=f\"start chrome {url}\",\n            on_stop_python=\"taskkill /f /im chrome.exe\"\n        ))\n        self.target_text = \"CommandLAB\"\n\n    def get_reward(self, action: ComputerAction) -&gt; float:\n        \"\"\"Custom reward function based on whether the target text is visible\"\"\"\n        screenshot = self._computer.get_screenshot()\n        # Use OCR to check if target text is visible\n        # For this example, we'll just return a placeholder reward\n        return 1.0\n\n    def get_done(self, action: ComputerAction) -&gt; bool:\n        \"\"\"Episode is done when target text is found or max steps reached\"\"\"\n        return self.num_steps &gt;= 20\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#advanced-distributed-training","title":"Advanced: Distributed Training","text":"<p>For large-scale training, you can use the <code>MultiprocessDriver</code>:</p> <pre><code>from commandLAB.gym.drivers import MultiprocessDriver\nfrom commandLAB.gym.trainer import BatchTrainer\n\n# Create a multiprocess driver with 4 workers\ndriver = MultiprocessDriver(env=env, agent=agent, max_workers=4)\n\n# Create a batch trainer\ntrainer = BatchTrainer(driver=driver, agent=agent, batch_size=10)\n\n# Train the agent for 100 episodes\nepisodes = trainer.train(num_episodes=100)\n</code></pre>"},{"location":"tutorials/advanced/training-agents/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/advanced/training-agents/#agent-not-learning","title":"Agent Not Learning","text":"<p>If your agent isn't learning:</p> <ol> <li>Check Reward Function: Make sure your reward function provides meaningful feedback</li> <li>Increase Episode Length: Allow more steps per episode</li> <li>Adjust Learning Rate: If using a learning-based agent, adjust the learning rate</li> <li>Improve Observations: Make sure the agent has enough information to make decisions</li> </ol>"},{"location":"tutorials/advanced/training-agents/#performance-issues","title":"Performance Issues","text":"<p>If you're experiencing performance issues:</p> <ol> <li>Reduce Screenshot Size: Use smaller screenshots to reduce memory usage</li> <li>Optimize Reward Function: Make sure your reward function is efficient</li> <li>Use Threaded Driver: Use <code>ThreadedDriver</code> for better performance</li> <li>Limit API Calls: If using an API-based model, limit the number of calls</li> </ol>"},{"location":"tutorials/advanced/training-agents/#exercises","title":"Exercises","text":"<ol> <li>Calculator Agent: Train an agent to perform calculations on a calculator app</li> <li>Web Navigation: Train an agent to navigate a website and find specific information</li> <li>Text Editor: Train an agent to open a text editor and write a specific message</li> <li>Custom Agent: Implement a custom agent using a different vision-language model</li> </ol>"},{"location":"tutorials/advanced/training-agents/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Vision-Language Models</li> <li>Explore Reinforcement Learning</li> <li>Try the Custom Agents Guide </li> </ul>"},{"location":"tutorials/getting-started/basic-automation/","title":"Basic Automation Tutorial","text":"<p>In this tutorial, we'll create a simple automation script using CommandLAB to open a text editor, type some text, and save a file.</p>"},{"location":"tutorials/getting-started/basic-automation/#prerequisites","title":"Prerequisites","text":"<ul> <li>CommandLAB installed with local backend: <code>pip install commandlab[local]</code></li> <li>A text editor (like Notepad on Windows or TextEdit on macOS)</li> </ul>"},{"location":"tutorials/getting-started/basic-automation/#step-1-import-required-modules","title":"Step 1: Import Required Modules","text":"<pre><code>from commandLAB.computers.local_pynput_computer import LocalPynputComputer\nfrom commandLAB.types import (\n    CommandAction,\n    TypeAction,\n    ClickAction,\n    KeyboardHotkeyAction,\n    KeyboardKey,\n    KeyboardKeyPressAction\n)\nimport os\nimport time\n</code></pre>"},{"location":"tutorials/getting-started/basic-automation/#step-2-create-a-computer-instance","title":"Step 2: Create a Computer Instance","text":"<pre><code># Create a computer instance\ncomputer = LocalPynputComputer()\n\n# Give yourself time to switch to the right window\nprint(\"Starting in 3 seconds...\")\ntime.sleep(3)\n</code></pre>"},{"location":"tutorials/getting-started/basic-automation/#step-3-open-the-text-editor","title":"Step 3: Open the Text Editor","text":"<pre><code># Open text editor (Notepad on Windows, TextEdit on macOS)\nif computer.execute_command(CommandAction(command=\"notepad\" if os.name == \"nt\" else \"open -a TextEdit\")):\n    print(\"Opened text editor\")\n    # Wait for it to open\n    time.sleep(2)\nelse:\n    print(\"Failed to open text editor\")\n    exit(1)\n</code></pre>"},{"location":"tutorials/getting-started/basic-automation/#step-4-type-some-text","title":"Step 4: Type Some Text","text":"<pre><code># Type some text\ncomputer.execute_type(TypeAction(text=\"Hello from CommandLAB!\\n\\nThis file was created automatically.\"))\nprint(\"Typed text\")\n</code></pre>"},{"location":"tutorials/getting-started/basic-automation/#step-5-save-the-file","title":"Step 5: Save the File","text":"<pre><code># Press Ctrl+S to save\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.S]))\nprint(\"Pressed Ctrl+S\")\ntime.sleep(1)\n\n# Type the filename\ncomputer.execute_type(TypeAction(text=\"commandlab_example.txt\"))\nprint(\"Entered filename\")\ntime.sleep(1)\n\n# Press Enter to confirm\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\nprint(\"Saved file\")\ntime.sleep(1)\n</code></pre>"},{"location":"tutorials/getting-started/basic-automation/#step-6-close-the-editor","title":"Step 6: Close the Editor","text":"<pre><code># Press Alt+F4 to close\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.ALT, KeyboardKey.F4]))\nprint(\"Closed editor\")\n</code></pre>"},{"location":"tutorials/getting-started/basic-automation/#complete-script","title":"Complete Script","text":"<p>Here's the complete script:</p> <pre><code>import os\nimport time\nfrom commandLAB.computers.local_pynput_computer import LocalPynputComputer\nfrom commandLAB.types import (\n    CommandAction,\n    TypeAction,\n    KeyboardHotkeyAction,\n    KeyboardKey,\n    KeyboardKeyPressAction\n)\n\n# Create a computer instance\ncomputer = LocalPynputComputer()\n\n# Give yourself time to switch to the right window\nprint(\"Starting in 3 seconds...\")\ntime.sleep(3)\n\n# Open text editor\nif computer.execute_command(CommandAction(command=\"notepad\" if os.name == \"nt\" else \"open -a TextEdit\")):\n    print(\"Opened text editor\")\n    # Wait for it to open\n    time.sleep(2)\nelse:\n    print(\"Failed to open text editor\")\n    exit(1)\n\n# Type some text\ncomputer.execute_type(TypeAction(text=\"Hello from CommandLAB!\\n\\nThis file was created automatically.\"))\nprint(\"Typed text\")\n\n# Press Ctrl+S to save\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.S]))\nprint(\"Pressed Ctrl+S\")\ntime.sleep(1)\n\n# Type the filename\ncomputer.execute_type(TypeAction(text=\"commandlab_example.txt\"))\nprint(\"Entered filename\")\ntime.sleep(1)\n\n# Press Enter to confirm\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\nprint(\"Saved file\")\ntime.sleep(1)\n\n# Press Alt+F4 to close\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.ALT, KeyboardKey.F4]))\nprint(\"Closed editor\")\n</code></pre>"},{"location":"tutorials/getting-started/basic-automation/#next-steps","title":"Next Steps","text":"<p>Now that you've created a basic automation script, you can:</p> <ol> <li>Modify it to work with different applications</li> <li>Add error handling for more robustness</li> <li>Create more complex automation sequences</li> <li>Try using different computer implementations (e.g., Docker or cloud-based)</li> </ol> <p>Check out the Advanced Automation Tutorial for more complex examples. </p>"},{"location":"tutorials/getting-started/local-computer-control/","title":"Local Computer Control","text":"<p>This guide explains how to use CommandLAB to control your local computer, including mouse and keyboard automation, taking screenshots, and executing system commands.</p>"},{"location":"tutorials/getting-started/local-computer-control/#introduction","title":"Introduction","text":"<p>CommandLAB provides several implementations for controlling your local computer:</p> <ul> <li><code>LocalPynputComputer</code>: Uses the pynput library for precise control</li> <li><code>LocalPyAutoGUIComputer</code>: Uses the PyAutoGUI library for cross-platform compatibility</li> </ul> <p>These implementations allow you to:</p> <ul> <li>Take screenshots</li> <li>Control the mouse (move, click, scroll)</li> <li>Control the keyboard (press keys, type text)</li> <li>Execute system commands</li> </ul>"},{"location":"tutorials/getting-started/local-computer-control/#installation","title":"Installation","text":"<p>To use local computer control, install CommandLAB with the local extra:</p> <pre><code>pip install \"commandlab[local]\"\n</code></pre> <p>This will install the necessary dependencies, including pynput, PyAutoGUI, and mss.</p>"},{"location":"tutorials/getting-started/local-computer-control/#platform-specific-requirements","title":"Platform-Specific Requirements","text":"<p>Windows: - No additional requirements</p> <p>macOS: - You may need to grant accessibility permissions to your terminal or Python application - Go to System Preferences &gt; Security &amp; Privacy &gt; Privacy &gt; Accessibility and add your terminal application</p> <p>Linux: - X11 is required for input control - Install X11 dependencies: <code>sudo apt-get install python3-xlib python3-tk python3-dev</code></p>"},{"location":"tutorials/getting-started/local-computer-control/#basic-usage","title":"Basic Usage","text":""},{"location":"tutorials/getting-started/local-computer-control/#creating-a-computer-instance","title":"Creating a Computer Instance","text":"<pre><code>from commandLAB.computers.local_pynput_computer import LocalPynputComputer\n\n# Create a computer instance\ncomputer = LocalPynputComputer()\n\n# Always clean up when done\ntry:\n    # Your automation code here\n    pass\nfinally:\n    computer.close()\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#taking-screenshots","title":"Taking Screenshots","text":"<pre><code># Take a screenshot\nscreenshot = computer.get_screenshot()\n\n# The screenshot is returned as a base64-encoded string\nprint(f\"Screenshot size: {len(screenshot.screenshot)} bytes\")\n\n# You can convert it to a PIL Image\nfrom commandLAB.utils.image import b64ToImage\nimage = b64ToImage(screenshot.screenshot)\nprint(f\"Image dimensions: {image.size}\")\n\n# Or save it to a file\nimage.save(\"screenshot.png\")\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#mouse-control","title":"Mouse Control","text":"<pre><code>from commandLAB.types import (\n    ClickAction,\n    DoubleClickAction,\n    DragAction,\n    MouseMoveAction,\n    MouseScrollAction,\n    MouseButton,\n    MouseButtonDownAction,\n    MouseButtonUpAction\n)\n\n# Move the mouse\ncomputer.execute_mouse_move(MouseMoveAction(\n    x=100,\n    y=100,\n    move_duration=0.5  # Duration of the move in seconds\n))\n\n# Click\ncomputer.execute_click(ClickAction(\n    x=100,\n    y=100,\n    button=MouseButton.LEFT,\n    move_duration=0.5,  # Duration of the move to the position\n    press_duration=0.1  # Duration to hold the button down\n))\n\n# Double-click\ncomputer.execute_double_click(DoubleClickAction(\n    x=100,\n    y=100,\n    button=MouseButton.LEFT,\n    double_click_interval_seconds=0.1  # Interval between clicks\n))\n\n# Drag\ncomputer.execute_drag(DragAction(\n    start_x=100,\n    start_y=100,\n    end_x=200,\n    end_y=200,\n    button=MouseButton.LEFT,\n    move_duration=0.5\n))\n\n# Scroll\ncomputer.execute_mouse_scroll(MouseScrollAction(\n    amount=10  # Positive for up, negative for down\n))\n\n# Advanced: Manual button control\ncomputer.execute_mouse_button_down(MouseButtonDownAction(\n    button=MouseButton.LEFT\n))\ncomputer.execute_mouse_button_up(MouseButtonUpAction(\n    button=MouseButton.LEFT\n))\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#keyboard-control","title":"Keyboard Control","text":"<pre><code>from commandLAB.types import (\n    TypeAction,\n    KeyboardHotkeyAction,\n    KeyboardKeyPressAction,\n    KeyboardKeyDownAction,\n    KeyboardKeyReleaseAction,\n    KeyboardKey\n)\n\n# Type text\ncomputer.execute_type(TypeAction(\n    text=\"Hello, CommandLAB!\"\n))\n\n# Press a key\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(\n    key=KeyboardKey.ENTER,\n    duration=0.1  # Duration to hold the key down\n))\n\n# Press a keyboard shortcut\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(\n    keys=[KeyboardKey.CTRL, KeyboardKey.C]  # Ctrl+C (copy)\n))\n\n# Advanced: Manual key control\ncomputer.execute_keyboard_key_down(KeyboardKeyDownAction(\n    key=KeyboardKey.SHIFT\n))\ncomputer.execute_keyboard_key_release(KeyboardKeyReleaseAction(\n    key=KeyboardKey.SHIFT\n))\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#executing-system-commands","title":"Executing System Commands","text":"<pre><code>from commandLAB.types import CommandAction\n\n# Execute a system command\nresult = computer.execute_command(CommandAction(\n    command=\"echo Hello, CommandLAB!\",\n    timeout=5  # Timeout in seconds (None for no timeout)\n))\n\nif result:\n    print(\"Command executed successfully\")\nelse:\n    print(\"Command failed\")\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#advanced-usage","title":"Advanced Usage","text":""},{"location":"tutorials/getting-started/local-computer-control/#getting-mouse-and-keyboard-state","title":"Getting Mouse and Keyboard State","text":"<pre><code># Get mouse state\nmouse_state = computer.get_mouse_state()\nprint(f\"Mouse position: {mouse_state.position}\")\nprint(f\"Mouse buttons: {mouse_state.buttons}\")\n\n# Get keyboard state\nkeyboard_state = computer.get_keyboard_state()\nprint(f\"Shift key pressed: {keyboard_state.keys.get(KeyboardKey.SHIFT, False)}\")\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#using-pyautogui-instead-of-pynput","title":"Using PyAutoGUI Instead of Pynput","text":"<pre><code>from commandLAB.computers.local_pyautogui_computer import LocalPyAutoGUIComputer\n\n# Create a PyAutoGUI computer instance\ncomputer = LocalPyAutoGUIComputer()\n\n# Use the same API as with pynput\ncomputer.execute_click(ClickAction(x=100, y=100))\ncomputer.execute_type(TypeAction(text=\"Hello, CommandLAB!\"))\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#handling-errors","title":"Handling Errors","text":"<pre><code>try:\n    computer.execute_click(ClickAction(x=100, y=100))\nexcept Exception as e:\n    print(f\"Error executing click: {e}\")\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#common-tasks","title":"Common Tasks","text":""},{"location":"tutorials/getting-started/local-computer-control/#opening-an-application","title":"Opening an Application","text":"<pre><code>from commandLAB.types import CommandAction\n\n# Windows\ncomputer.execute_command(CommandAction(command=\"start notepad\"))\n\n# macOS\ncomputer.execute_command(CommandAction(command=\"open -a TextEdit\"))\n\n# Linux\ncomputer.execute_command(CommandAction(command=\"gedit\"))\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#taking-a-screenshot-and-saving-it","title":"Taking a Screenshot and Saving It","text":"<pre><code>import time\nfrom datetime import datetime\nfrom commandLAB.utils.image import b64ToImage\n\n# Take a screenshot\nscreenshot = computer.get_screenshot()\n\n# Convert to PIL Image\nimage = b64ToImage(screenshot.screenshot)\n\n# Save with timestamp\ntimestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\nimage.save(f\"screenshot_{timestamp}.png\")\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#automating-a-web-browser","title":"Automating a Web Browser","text":"<pre><code>import time\nfrom commandLAB.types import (\n    CommandAction,\n    TypeAction,\n    KeyboardKeyPressAction,\n    KeyboardKey\n)\n\n# Open Chrome\ncomputer.execute_command(CommandAction(command=\"start chrome\"))\ntime.sleep(2)  # Wait for the browser to open\n\n# Navigate to a website\ncomputer.execute_type(TypeAction(text=\"https://www.google.com\"))\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\ntime.sleep(2)  # Wait for the page to load\n\n# Search for something\ncomputer.execute_type(TypeAction(text=\"CommandLAB python automation\"))\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#automating-a-text-editor","title":"Automating a Text Editor","text":"<pre><code>import time\nfrom commandLAB.types import (\n    CommandAction,\n    TypeAction,\n    KeyboardHotkeyAction,\n    KeyboardKey,\n    KeyboardKeyPressAction\n)\n\n# Open Notepad\ncomputer.execute_command(CommandAction(command=\"start notepad\"))\ntime.sleep(1)  # Wait for Notepad to open\n\n# Type some text\ncomputer.execute_type(TypeAction(text=\"Hello, CommandLAB!\\n\\nThis is an automated test.\"))\n\n# Save the file\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.CTRL, KeyboardKey.S]))\ntime.sleep(1)  # Wait for the save dialog\n\n# Type the filename\ncomputer.execute_type(TypeAction(text=\"commandlab_test.txt\"))\ncomputer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/getting-started/local-computer-control/#adding-delays","title":"Adding Delays","text":"<p>When automating UI interactions, it's important to add delays to account for application response times:</p> <pre><code>import time\n\n# Click a button\ncomputer.execute_click(ClickAction(x=100, y=100))\ntime.sleep(0.5)  # Wait for the click to register\n\n# Type text\ncomputer.execute_type(TypeAction(text=\"Hello\"))\ntime.sleep(0.2)  # Wait for the text to appear\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#error-handling","title":"Error Handling","text":"<p>Always include error handling to make your automation robust:</p> <pre><code>try:\n    # Take a screenshot\n    screenshot = computer.get_screenshot()\n\n    # Process the screenshot\n    # ...\n\nexcept Exception as e:\n    print(f\"Error: {e}\")\n    # Handle the error or retry\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#resource-cleanup","title":"Resource Cleanup","text":"<p>Always clean up resources when you're done:</p> <pre><code>computer = LocalPynputComputer()\ntry:\n    # Your automation code here\n    pass\nfinally:\n    computer.close()\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#cross-platform-compatibility","title":"Cross-Platform Compatibility","text":"<p>For cross-platform compatibility, use platform-specific commands:</p> <pre><code>import platform\n\nif platform.system() == \"Windows\":\n    computer.execute_command(CommandAction(command=\"start notepad\"))\nelif platform.system() == \"Darwin\":  # macOS\n    computer.execute_command(CommandAction(command=\"open -a TextEdit\"))\nelse:  # Linux\n    computer.execute_command(CommandAction(command=\"gedit\"))\n</code></pre>"},{"location":"tutorials/getting-started/local-computer-control/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/getting-started/local-computer-control/#permission-issues","title":"Permission Issues","text":"<p>Problem: <code>PermissionError</code> when trying to control mouse or keyboard</p> <p>Solution: - Run your script with administrator/root privileges - On macOS, grant accessibility permissions to your terminal - On Linux, ensure you have the necessary X11 permissions</p>"},{"location":"tutorials/getting-started/local-computer-control/#coordinates-issues","title":"Coordinates Issues","text":"<p>Problem: Clicks are not happening at the expected coordinates</p> <p>Solution: - Check if you have multiple monitors and adjust coordinates accordingly - Use <code>get_screenshot()</code> to verify the screen dimensions - Add debugging to print the actual mouse position using <code>get_mouse_state()</code></p>"},{"location":"tutorials/getting-started/local-computer-control/#timing-issues","title":"Timing Issues","text":"<p>Problem: Actions are happening too quickly or too slowly</p> <p>Solution: - Adjust <code>move_duration</code> and <code>press_duration</code> parameters - Add <code>time.sleep()</code> calls between actions - Use <code>get_mouse_state()</code> and <code>get_keyboard_state()</code> to verify the current state</p>"},{"location":"tutorials/getting-started/local-computer-control/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Remote Computer Control</li> <li>Explore Vision-Language Models for intelligent automation</li> <li>Try the Basic Automation Tutorial </li> </ul>"},{"location":"tutorials/getting-started/remote-control/","title":"Remote Control Tutorial","text":"<p>This tutorial will guide you through the process of setting up and using CommandLAB's remote control capabilities. You'll learn how to control a computer remotely using the daemon.</p>"},{"location":"tutorials/getting-started/remote-control/#introduction","title":"Introduction","text":"<p>CommandLAB's remote control feature allows you to control one computer from another. This is useful for:</p> <ul> <li>Automating tasks on remote servers</li> <li>Controlling headless machines</li> <li>Setting up distributed automation systems</li> <li>Testing applications across different environments</li> </ul>"},{"location":"tutorials/getting-started/remote-control/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>CommandLAB installed on both the controller and target machines</li> <li>Network connectivity between the machines</li> <li>Appropriate permissions to run the daemon on the target machine</li> </ul>"},{"location":"tutorials/getting-started/remote-control/#installation","title":"Installation","text":"<p>On both machines, install CommandLAB with daemon support:</p> <pre><code>pip install \"commandlab[daemon]\"\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#step-1-start-the-daemon-on-the-target-machine","title":"Step 1: Start the Daemon on the Target Machine","text":"<p>The first step is to start the daemon on the target machine (the one you want to control).</p> <pre><code>python -m commandLAB.daemon.cli start --port 8000 --backend pynput\n</code></pre> <p>This will start the daemon on port 8000 using the pynput backend for computer control. The daemon will print an API token that looks something like this:</p> <pre><code>Starting daemon on port 8000\nAPI Token: abcdef1234567890abcdef1234567890\n</code></pre> <p>Make note of this token, as you'll need it to authenticate with the daemon.</p>"},{"location":"tutorials/getting-started/remote-control/#step-2-connect-to-the-daemon-from-the-controller-machine","title":"Step 2: Connect to the Daemon from the Controller Machine","text":"<p>Now, on the controller machine, you can connect to the daemon using the <code>DaemonClientComputer</code> class:</p> <pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.types import TypeAction, ClickAction, KeyboardHotkeyAction, KeyboardKey\n\n# Connect to the daemon\ncomputer = DaemonClientComputer(\n    daemon_base_url=\"http://target-machine-ip\",  # Replace with the actual IP address\n    daemon_port=8000,\n    provisioning_method=ProvisioningMethod.MANUAL\n)\n\n# Now you can control the target machine\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#step-3-basic-remote-control-operations","title":"Step 3: Basic Remote Control Operations","text":"<p>Once connected, you can control the target machine using the same API as local control:</p> <pre><code># Take a screenshot of the remote computer\nscreenshot = computer.get_screenshot()\n\n# Click at coordinates (100, 100) on the remote computer\ncomputer.execute_click(ClickAction(x=100, y=100))\n\n# Type text on the remote computer\ncomputer.execute_type(TypeAction(text=\"Hello from another machine!\"))\n\n# Press keyboard shortcut (Ctrl+S) on the remote computer\ncomputer.execute_keyboard_hotkey(KeyboardHotkeyAction(\n    keys=[KeyboardKey.CTRL, KeyboardKey.S]\n))\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#step-4-execute-commands-on-the-remote-machine","title":"Step 4: Execute Commands on the Remote Machine","text":"<p>You can also execute system commands on the remote machine:</p> <pre><code>from commandLAB.types import CommandAction\n\n# Execute a command on the remote machine\nresult = computer.execute_command(CommandAction(\n    command=\"ls -la\",\n    timeout=5  # Timeout in seconds\n))\n\nif result:\n    print(\"Command executed successfully\")\nelse:\n    print(\"Command failed\")\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#step-5-clean-up","title":"Step 5: Clean Up","text":"<p>When you're done, make sure to close the connection:</p> <pre><code># Clean up when done\ncomputer.close()\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#complete-example-remote-web-automation","title":"Complete Example: Remote Web Automation","text":"<p>Here's a complete example that automates opening a browser and performing a web search on a remote machine:</p> <pre><code>import time\nfrom commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.types import (\n    CommandAction,\n    TypeAction,\n    KeyboardKeyPressAction,\n    KeyboardHotkeyAction,\n    KeyboardKey\n)\n\n# Connect to the daemon\ncomputer = DaemonClientComputer(\n    daemon_base_url=\"http://target-machine-ip\",  # Replace with the actual IP address\n    daemon_port=8000,\n    provisioning_method=ProvisioningMethod.MANUAL\n)\n\ntry:\n    # Open a browser on the remote machine\n    computer.execute_command(CommandAction(command=\"chrome\"))\n    time.sleep(2)  # Wait for the browser to open\n\n    # Type a URL\n    computer.execute_type(TypeAction(text=\"https://www.google.com\"))\n    computer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\n    time.sleep(2)  # Wait for the page to load\n\n    # Type a search query\n    computer.execute_type(TypeAction(text=\"CommandLAB python automation\"))\n    computer.execute_keyboard_key_press(KeyboardKeyPressAction(key=KeyboardKey.ENTER))\n    time.sleep(2)  # Wait for search results\n\n    # Take a screenshot of the results\n    screenshot = computer.get_screenshot()\n    print(\"Took screenshot of search results\")\n\n    # Close the browser\n    computer.execute_keyboard_hotkey(KeyboardHotkeyAction(keys=[KeyboardKey.ALT, KeyboardKey.F4]))\n\nfinally:\n    # Always clean up\n    computer.close()\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#advanced-secure-remote-control","title":"Advanced: Secure Remote Control","text":"<p>For production use, you should secure your daemon:</p>"},{"location":"tutorials/getting-started/remote-control/#1-use-https","title":"1. Use HTTPS","text":"<p>Generate a self-signed certificate:</p> <pre><code>openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n</code></pre> <p>Start the daemon with HTTPS:</p> <pre><code>python -m commandLAB.daemon.cli start --port 8443 --backend pynput --ssl-cert cert.pem --ssl-key key.pem\n</code></pre> <p>Connect using HTTPS:</p> <pre><code>computer = DaemonClientComputer(\n    daemon_base_url=\"https://target-machine-ip\",\n    daemon_port=8443,\n    provisioning_method=ProvisioningMethod.MANUAL\n)\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#2-use-a-firewall","title":"2. Use a Firewall","text":"<p>Restrict access to the daemon port using a firewall:</p> <pre><code># On Linux\nsudo ufw allow from trusted-ip-address to any port 8000\n\n# On Windows\nnetsh advfirewall firewall add rule name=\"CommandLAB Daemon\" dir=in action=allow protocol=TCP localport=8000 remoteip=trusted-ip-address\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#advanced-automatic-provisioning","title":"Advanced: Automatic Provisioning","text":"<p>Instead of manually starting the daemon, you can use provisioners to automatically set up and manage daemon environments:</p>"},{"location":"tutorials/getting-started/remote-control/#docker-provisioning","title":"Docker Provisioning","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\nfrom commandLAB.computers.provisioners.docker_provisioner import DockerPlatform\n\n# Create a computer with Docker provisioning\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.DOCKER,\n    platform=DockerPlatform.LOCAL\n)\n\n# Use the computer\n# ...\n\n# Clean up (stops and removes the container)\ncomputer.close()\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#cloud-provisioning","title":"Cloud Provisioning","text":"<pre><code>from commandLAB.computers.daemon_client_computer import DaemonClientComputer, ProvisioningMethod\n\n# Create a computer in AWS EC2\ncomputer = DaemonClientComputer(\n    provisioning_method=ProvisioningMethod.AWS,\n    region=\"us-west-2\",\n    instance_type=\"t2.micro\"\n)\n\n# Use the computer\n# ...\n\n# Clean up (terminates the EC2 instance)\ncomputer.close()\n</code></pre>"},{"location":"tutorials/getting-started/remote-control/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/getting-started/remote-control/#connection-issues","title":"Connection Issues","text":"<p>If you're having trouble connecting to the daemon:</p> <ol> <li> <p>Check Network Connectivity: Make sure the machines can communicate    <pre><code>ping target-machine-ip\n</code></pre></p> </li> <li> <p>Check Firewall Settings: Make sure the daemon port is open    <pre><code># On Linux\nsudo ufw status\n\n# On Windows\nnetsh advfirewall firewall show rule name=\"CommandLAB Daemon\"\n</code></pre></p> </li> <li> <p>Check Daemon Status: Make sure the daemon is running    <pre><code># On Linux\nps aux | grep commandLAB.daemon\n\n# On Windows\ntasklist | findstr python\n</code></pre></p> </li> </ol>"},{"location":"tutorials/getting-started/remote-control/#authentication-issues","title":"Authentication Issues","text":"<p>If you're having authentication issues:</p> <ol> <li>Check API Token: Make sure you're using the correct API token</li> <li>Restart the Daemon: Sometimes restarting the daemon can help</li> <li>Check Logs: Look for error messages in the daemon logs</li> </ol>"},{"location":"tutorials/getting-started/remote-control/#exercises","title":"Exercises","text":"<ol> <li>Basic Remote Control: Connect to a remote machine and take a screenshot</li> <li>Remote File Management: Create a script that manages files on a remote machine</li> <li>Multi-Machine Control: Create a script that controls multiple remote machines</li> <li>Secure Daemon: Set up a secure daemon with HTTPS and firewall rules</li> </ol>"},{"location":"tutorials/getting-started/remote-control/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Cloud Containers</li> <li>Try the Training Agents Tutorial</li> <li>Explore Provisioners </li> </ul>"}]}